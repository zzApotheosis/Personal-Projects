

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Jan 23 18:10:01 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F87J11
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	smallconst
    42  001000                     __psmallconst:
    43                           	opt stack 0
    44  001000  00                 	db	0
    45  001001                     _dpowers:
    46                           	opt stack 0
    47  001001  0001               	dw	1
    48  001003  000A               	dw	10
    49  001005  0064               	dw	100
    50  001007  03E8               	dw	1000
    51  001009  2710               	dw	10000
    52  00100B                     __end_of_dpowers:
    53                           	opt stack 0
    54  0000                     _BAUDCON1bits	set	3966
    55  0000                     _INTCON2bits	set	4081
    56  0000                     _INTCONbits	set	4082
    57  0000                     _LATAbits	set	3977
    58  0000                     _LATD	set	3980
    59  0000                     _OSCTUNEbits	set	3995
    60  0000                     _PIR1bits	set	3998
    61  0000                     _RCONbits	set	4048
    62  0000                     _RCREG1	set	4015
    63  0000                     _RCSTA1bits	set	4012
    64  0000                     _SPBRG1	set	4016
    65  0000                     _SPBRGH1	set	3967
    66  0000                     _SSPBUF	set	4041
    67  0000                     _SSPCON1	set	4038
    68  0000                     _SSPSTATbits	set	4039
    69  0000                     _TRISAbits	set	3986
    70  0000                     _TRISB	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISCbits	set	3988
    73  0000                     _TRISD	set	3989
    74  0000                     _TXREG1	set	4014
    75  0000                     _TXSTA1bits	set	4013
    76  0000                     _CREN1	set	32100
    77  0000                     _INT0IF	set	32657
    78  0000                     _RBPU	set	32655
    79  0000                     _SSPIF	set	31987
    80  0000                     _TX1IF	set	31988
    81  00100B                     STR_1:
    82  00100B  53                 	db	83	;'S'
    83  00100C  65                 	db	101	;'e'
    84  00100D  63                 	db	99	;'c'
    85  00100E  72                 	db	114	;'r'
    86  00100F  65                 	db	101	;'e'
    87  001010  74                 	db	116	;'t'
    88  001011  20                 	db	32
    89  001012  42                 	db	66	;'B'
    90  001013  75                 	db	117	;'u'
    91  001014  74                 	db	116	;'t'
    92  001015  74                 	db	116	;'t'
    93  001016  6F                 	db	111	;'o'
    94  001017  6E                 	db	110	;'n'
    95  001018  00                 	db	0
    96  001019                     STR_5:
    97  001019  43                 	db	67	;'C'
    98  00101A  6F                 	db	111	;'o'
    99  00101B  75                 	db	117	;'u'
   100  00101C  6E                 	db	110	;'n'
   101  00101D  74                 	db	116	;'t'
   102  00101E  20                 	db	32
   103  00101F  3D                 	db	61	;'='
   104  001020  20                 	db	32
   105  001021  25                 	db	37
   106  001022  64                 	db	100	;'d'
   107  001023  0A                 	db	10
   108  001024  00                 	db	0
   109  001025                     STR_4:
   110  001025  43                 	db	67	;'C'
   111  001026  6F                 	db	111	;'o'
   112  001027  75                 	db	117	;'u'
   113  001028  6E                 	db	110	;'n'
   114  001029  74                 	db	116	;'t'
   115  00102A  20                 	db	32
   116  00102B  3D                 	db	61	;'='
   117  00102C  20                 	db	32
   118  00102D  25                 	db	37
   119  00102E  64                 	db	100	;'d'
   120  00102F  00                 	db	0
   121  001030                     STR_2:
   122  001030  52                 	db	82	;'R'
   123  001031  65                 	db	101	;'e'
   124  001032  6C                 	db	108	;'l'
   125  001033  65                 	db	101	;'e'
   126  001034  61                 	db	97	;'a'
   127  001035  73                 	db	115	;'s'
   128  001036  65                 	db	101	;'e'
   129  001037  64                 	db	100	;'d'
   130  001038  00                 	db	0
   131  001039                     STR_6:
   132  001039  28                 	db	40
   133  00103A  6E                 	db	110	;'n'
   134  00103B  75                 	db	117	;'u'
   135  00103C  6C                 	db	108	;'l'
   136  00103D  6C                 	db	108	;'l'
   137  00103E  29                 	db	41
   138  00103F  00                 	db	0
   139  001040                     STR_3:
   140  001040  25                 	db	37
   141  001041  73                 	db	115	;'s'
   142  001042  0A                 	db	10
   143  001043  00                 	db	0
   144                           
   145                           ; #config settings
   146  001044  00                 	db	0	; dummy byte at the end
   147  0000                     
   148                           	psect	cinit
   149  001802                     __pcinit:
   150                           	opt stack 0
   151  001802                     start_initialization:
   152                           	opt stack 0
   153  001802                     __initialization:
   154                           	opt stack 0
   155                           
   156                           ; Clear objects allocated to BANK0 (34 bytes)
   157  001802  EE00  F060         	lfsr	0,__pbssBANK0
   158  001806  0E22               	movlw	34
   159  001808                     clear_0:
   160  001808  6AEE               	clrf	postinc0,c
   161  00180A  06E8               	decf	wreg,f,c
   162  00180C  E1FD               	bnz	clear_0
   163                           
   164                           ; Clear objects allocated to COMRAM (20 bytes)
   165  00180E  EE00  F039         	lfsr	0,__pbssCOMRAM
   166  001812  0E14               	movlw	20
   167  001814                     clear_1:
   168  001814  6AEE               	clrf	postinc0,c
   169  001816  06E8               	decf	wreg,f,c
   170  001818  E1FD               	bnz	clear_1
   171  00181A                     end_of_initialization:
   172                           	opt stack 0
   173  00181A                     __end_of__initialization:
   174                           	opt stack 0
   175  00181A  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   176  00181C  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   177  00181E  0100               	movlb	0
   178  001820  EFE3  F009         	goto	_main	;jump to C main() function
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           
   182                           	psect	bssCOMRAM
   183  000039                     __pbssCOMRAM:
   184                           	opt stack 0
   185  000039                     _count:
   186                           	opt stack 0
   187  000039                     	ds	2
   188  00003B                     _buttonState:
   189                           	opt stack 0
   190  00003B                     	ds	1
   191  00003C                     _line2str:
   192                           	opt stack 0
   193  00003C                     	ds	17
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           
   197                           	psect	bssBANK0
   198  000060                     __pbssBANK0:
   199                           	opt stack 0
   200  000060                     _buffer:
   201                           	opt stack 0
   202  000060                     	ds	17
   203  000071                     _line1str:
   204                           	opt stack 0
   205  000071                     	ds	17
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           
   209                           	psect	cstackBANK0
   210  000082                     __pcstackBANK0:
   211                           	opt stack 0
   212  000082                     main@temp:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0x0
   216  000082                     	ds	1
   217  000083                     main@time:
   218                           	opt stack 0
   219                           
   220                           ; 4 bytes @ 0x1
   221  000083                     	ds	4
   222  000087                     main@currentState:
   223                           	opt stack 0
   224                           
   225                           ; 1 bytes @ 0x5
   226  000087                     	ds	1
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	cstackCOMRAM
   231  000001                     __pcstackCOMRAM:
   232                           	opt stack 0
   233  000001                     ??_HighIsr:
   234  000001                     
   235                           ; 1 bytes @ 0x0
   236  000001                     	ds	15
   237  000010                     ??_longDelay:
   238  000010                     ?___lwdiv:
   239                           	opt stack 0
   240  000010                     calculateBase@base:
   241                           	opt stack 0
   242  000010                     WriteRegister@b:
   243                           	opt stack 0
   244  000010                     putch@c:
   245                           	opt stack 0
   246  000010                     ___lwdiv@dividend:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0xF
   250  000010                     	ds	1
   251  000011                     calculateBase@line:
   252                           	opt stack 0
   253  000011                     WriteRegister@reg:
   254                           	opt stack 0
   255                           
   256                           ; 1 bytes @ 0x10
   257  000011                     	ds	1
   258  000012                     LCDWriteByte@rs:
   259                           	opt stack 0
   260  000012                     ___lwdiv@divisor:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x11
   264  000012                     	ds	1
   265  000013                     LCDWriteByte@c:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x12
   269  000013                     	ds	1
   270  000014                     LCDWriteByte@comFlags:
   271                           	opt stack 0
   272  000014                     ___lwdiv@counter:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x13
   276  000014                     	ds	1
   277  000015                     LCDCommand@command:
   278                           	opt stack 0
   279  000015                     LCDInitCommand@command:
   280                           	opt stack 0
   281  000015                     LCDWriteData@c:
   282                           	opt stack 0
   283  000015                     ___lwdiv@quotient:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x14
   287  000015                     	ds	1
   288  000016                     ??_LCDInit:
   289  000016                     LCDSetPos@row:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x15
   293  000016                     	ds	1
   294  000017                     ?___lwmod:
   295                           	opt stack 0
   296  000017                     LCDInit@functionSet:
   297                           	opt stack 0
   298  000017                     ___lwmod@dividend:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x16
   302  000017                     	ds	1
   303  000018                     LCDSetPos@col:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x17
   307  000018                     	ds	1
   308  000019                     ___lwmod@divisor:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x18
   312  000019                     	ds	1
   313  00001A                     ??_LCDSetPos:
   314                           
   315                           ; 0 bytes @ 0x19
   316  00001A                     	ds	1
   317  00001B                     ___lwmod@counter:
   318                           	opt stack 0
   319  00001B                     LCDSetPos@pos:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x1A
   323  00001B                     	ds	1
   324  00001C                     ?__doprnt:
   325                           	opt stack 0
   326  00001C                     __doprnt@pb:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x1B
   330  00001C                     	ds	1
   331  00001D                     LCDClearLine@c:
   332                           	opt stack 0
   333  00001D                     LCDWriteLine@str:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x1C
   337  00001D                     	ds	1
   338  00001E                     LCDClearLine@line:
   339                           	opt stack 0
   340  00001E                     __doprnt@f:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x1D
   344  00001E                     	ds	1
   345  00001F                     LCDWriteLine@line:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x1E
   349  00001F                     	ds	1
   350  000020                     __doprnt@ap:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x1F
   354  000020                     	ds	2
   355  000022                     ??__doprnt:
   356                           
   357                           ; 0 bytes @ 0x21
   358  000022                     	ds	3
   359  000025                     __doprnt@flag:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x24
   363  000025                     	ds	1
   364  000026                     __doprnt@prec:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x25
   368  000026                     	ds	1
   369  000027                     __doprnt@val:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x26
   373  000027                     	ds	2
   374  000029                     __doprnt@cp:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x28
   378  000029                     	ds	2
   379  00002B                     __doprnt@c:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x2A
   383  00002B                     	ds	1
   384  00002C                     ?_sprintf:
   385                           	opt stack 0
   386  00002C                     ?_printf:
   387                           	opt stack 0
   388  00002C                     printf@f:
   389                           	opt stack 0
   390  00002C                     sprintf@wh:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x2B
   394  00002C                     	ds	2
   395  00002E                     sprintf@f:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x2D
   399  00002E                     	ds	2
   400  000030                     printf@ap:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x2F
   404  000030                     	ds	2
   405  000032                     sprintf@ap:
   406                           	opt stack 0
   407  000032                     printf@pb:
   408                           	opt stack 0
   409                           
   410                           ; 5 bytes @ 0x31
   411  000032                     	ds	2
   412  000034                     sprintf@pb:
   413                           	opt stack 0
   414                           
   415                           ; 5 bytes @ 0x33
   416  000034                     	ds	5
   417  000039                     postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           
   420                           ; 0 bytes @ 0x38
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 33 in file "Lab0.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  time            4    1[BANK0 ] long 
   431 ;;  currentState    1    5[BANK0 ] unsigned char 
   432 ;;  temp            1    0[BANK0 ] unsigned char 
   433 ;; Return value:  Size  Location     Type
   434 ;;		None               void
   435 ;; Registers used:
   436 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   443 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;Total ram usage:        6 bytes
   447 ;; Hardware stack levels required when called:    6
   448 ;; This function calls:
   449 ;;		_ConfigInterrupts
   450 ;;		_ConfigPeriph
   451 ;;		_InitPins
   452 ;;		_LCDClear
   453 ;;		_LCDClearLine
   454 ;;		_LCDInit
   455 ;;		_LCDWriteLine
   456 ;;		_printf
   457 ;;		_sprintf
   458 ;; This function is called by:
   459 ;;		Startup code after reset
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text0
   464  0013C6                     __ptext0:
   465                           	opt stack 0
   466  0013C6                     _main:
   467                           	opt stack 25
   468                           
   469                           ;Lab0.c: 34: long time;
   470                           ;Lab0.c: 35: char currentState = buttonState;
   471                           
   472                           ;incstack = 0
   473  0013C6  C03B  F087         	movff	_buttonState,main@currentState	;volatile
   474                           
   475                           ;Lab0.c: 36: char temp;
   476                           ;Lab0.c: 38: OSCTUNEbits.PLLEN = 1;
   477  0013CA  8C9B               	bsf	3995,6,c	;volatile
   478                           
   479                           ;Lab0.c: 39: LCDInit();
   480  0013CC  ECC6  F00A         	call	_LCDInit	;wreg free
   481                           
   482                           ;Lab0.c: 40: LCDClear();
   483  0013D0  EC67  F00C         	call	_LCDClear	;wreg free
   484                           
   485                           ;Lab0.c: 41: InitPins();
   486  0013D4  EC37  F00C         	call	_InitPins	;wreg free
   487                           
   488                           ;Lab0.c: 42: ConfigPeriph();
   489  0013D8  EC41  F00C         	call	_ConfigPeriph	;wreg free
   490                           
   491                           ;Lab0.c: 43: ConfigInterrupts();
   492  0013DC  EC5A  F00C         	call	_ConfigInterrupts	;wreg free
   493                           
   494                           ;Lab0.c: 44: count = 0;
   495  0013E0  0E00               	movlw	0
   496  0013E2  6E3A               	movwf	_count+1,c
   497  0013E4  0E00               	movlw	0
   498  0013E6  6E39               	movwf	_count,c
   499                           
   500                           ;Lab0.c: 45: CREN1 = 1;
   501  0013E8  88AC               	bsf	4012,4,c	;volatile
   502  0013EA                     l246:
   503  0013EA  AA9E               	btfss	3998,5,c	;volatile
   504  0013EC  D7FE               	goto	l246
   505                           
   506                           ;Lab0.c: 47: temp = RCREG1;
   507  0013EE  CFAF F082          	movff	4015,main@temp	;volatile
   508                           
   509                           ;Lab0.c: 48: CREN1 = 0;
   510  0013F2  98AC               	bcf	4012,4,c	;volatile
   511                           
   512                           ;Lab0.c: 49: LATD = 0;
   513  0013F4  0E00               	movlw	0
   514  0013F6  6E8C               	movwf	3980,c	;volatile
   515  0013F8                     l2393:
   516                           
   517                           ;Lab0.c: 51: if (currentState != buttonState) {
   518  0013F8  503B               	movf	_buttonState,w,c	;volatile
   519  0013FA  0100               	movlb	0	; () banked
   520  0013FC  1987               	xorwf	main@currentState& (0+255),w,b
   521  0013FE  B4D8               	btfsc	status,2,c
   522  001400  D031               	goto	l2409
   523                           
   524                           ; BSR set to: 0
   525                           ;Lab0.c: 52: currentState = buttonState;
   526  001402  C03B  F087         	movff	_buttonState,main@currentState	;volatile
   527                           
   528                           ; BSR set to: 0
   529                           ;Lab0.c: 53: if (currentState == 0)
   530  001406  0100               	movlb	0	; () banked
   531  001408  5187               	movf	main@currentState& (0+255),w,b
   532  00140A  0100               	movlb	0	; () banked
   533  00140C  A4D8               	btfss	status,2,c
   534  00140E  D00B               	goto	l2401
   535                           
   536                           ; BSR set to: 0
   537                           ;Lab0.c: 54: sprintf(line2str, "Secret Button");
   538  001410  0E3C               	movlw	low _line2str
   539  001412  6E2C               	movwf	sprintf@wh,c
   540  001414  0E00               	movlw	high _line2str
   541  001416  6E2D               	movwf	sprintf@wh+1,c
   542  001418  0E0B               	movlw	low STR_1
   543  00141A  6E2E               	movwf	sprintf@f,c
   544  00141C  0E10               	movlw	high STR_1
   545  00141E  6E2F               	movwf	sprintf@f+1,c
   546  001420  EC1B  F00B         	call	_sprintf	;wreg free
   547  001424  D00A               	goto	l2403
   548  001426                     l2401:
   549                           
   550                           ;Lab0.c: 55: else
   551                           ;Lab0.c: 56: sprintf(line2str, "Released");
   552  001426  0E3C               	movlw	low _line2str
   553  001428  6E2C               	movwf	sprintf@wh,c
   554  00142A  0E00               	movlw	high _line2str
   555  00142C  6E2D               	movwf	sprintf@wh+1,c
   556  00142E  0E30               	movlw	low STR_2
   557  001430  6E2E               	movwf	sprintf@f,c
   558  001432  0E10               	movlw	high STR_2
   559  001434  6E2F               	movwf	sprintf@f+1,c
   560  001436  EC1B  F00B         	call	_sprintf	;wreg free
   561  00143A                     l2403:
   562                           
   563                           ;Lab0.c: 57: LCDClearLine(1);
   564  00143A  0E01               	movlw	1
   565  00143C  ECBD  F00B         	call	_LCDClearLine
   566                           
   567                           ;Lab0.c: 58: LCDWriteLine(line2str, 1);
   568  001440  0E3C               	movlw	low _line2str
   569  001442  6E1D               	movwf	LCDWriteLine@str,c
   570  001444  0E00               	movlw	high _line2str
   571  001446  6E1E               	movwf	LCDWriteLine@str+1,c
   572  001448  0E01               	movlw	1
   573  00144A  6E1F               	movwf	LCDWriteLine@line,c
   574  00144C  EC7E  F00A         	call	_LCDWriteLine	;wreg free
   575                           
   576                           ;Lab0.c: 59: printf("%s\n", line2str);
   577  001450  0E40               	movlw	low STR_3
   578  001452  6E2C               	movwf	printf@f,c
   579  001454  0E10               	movlw	high STR_3
   580  001456  6E2D               	movwf	printf@f+1,c
   581  001458  0E3C               	movlw	low _line2str
   582  00145A  6E2E               	movwf	?_printf+2,c
   583  00145C  0E00               	movlw	high _line2str
   584  00145E  6E2F               	movwf	?_printf+3,c
   585  001460  ECA0  F00B         	call	_printf	;wreg free
   586  001464                     l2409:
   587                           
   588                           ;Lab0.c: 60: }
   589                           ;Lab0.c: 61: sprintf(line1str, "Count = %d", count);
   590  001464  0E71               	movlw	low _line1str
   591  001466  6E2C               	movwf	sprintf@wh,c
   592  001468  0E00               	movlw	high _line1str
   593  00146A  6E2D               	movwf	sprintf@wh+1,c
   594  00146C  0E25               	movlw	low STR_4
   595  00146E  6E2E               	movwf	sprintf@f,c
   596  001470  0E10               	movlw	high STR_4
   597  001472  6E2F               	movwf	sprintf@f+1,c
   598  001474  C039  F030         	movff	_count,?_sprintf+4
   599  001478  C03A  F031         	movff	_count+1,?_sprintf+5
   600  00147C  EC1B  F00B         	call	_sprintf	;wreg free
   601                           
   602                           ;Lab0.c: 62: LCDClearLine(0);
   603  001480  0E00               	movlw	0
   604  001482  ECBD  F00B         	call	_LCDClearLine
   605                           
   606                           ;Lab0.c: 63: LCDWriteLine(line1str, 0);
   607  001486  0E71               	movlw	low _line1str
   608  001488  6E1D               	movwf	LCDWriteLine@str,c
   609  00148A  0E00               	movlw	high _line1str
   610  00148C  6E1E               	movwf	LCDWriteLine@str+1,c
   611  00148E  0E00               	movlw	0
   612  001490  6E1F               	movwf	LCDWriteLine@line,c
   613  001492  EC7E  F00A         	call	_LCDWriteLine	;wreg free
   614                           
   615                           ;Lab0.c: 64: LATD += 5;
   616  001496  0E05               	movlw	5
   617  001498  268C               	addwf	3980,f,c	;volatile
   618                           
   619                           ;Lab0.c: 65: printf("Count = %d\n", count);
   620  00149A  0E19               	movlw	low STR_5
   621  00149C  6E2C               	movwf	printf@f,c
   622  00149E  0E10               	movlw	high STR_5
   623  0014A0  6E2D               	movwf	printf@f+1,c
   624  0014A2  C039  F02E         	movff	_count,?_printf+2
   625  0014A6  C03A  F02F         	movff	_count+1,?_printf+3
   626  0014AA  ECA0  F00B         	call	_printf	;wreg free
   627                           
   628                           ;Lab0.c: 66: for (time = 0; time < 310000L; ++time);
   629  0014AE  0E00               	movlw	0
   630  0014B0  0100               	movlb	0	; () banked
   631  0014B2  6F83               	movwf	main@time& (0+255),b
   632  0014B4  0E00               	movlw	0
   633  0014B6  6F84               	movwf	(main@time+1)& (0+255),b
   634  0014B8  0E00               	movlw	0
   635  0014BA  6F85               	movwf	(main@time+2)& (0+255),b
   636  0014BC  0E00               	movlw	0
   637  0014BE  6F86               	movwf	(main@time+3)& (0+255),b
   638  0014C0                     l2421:
   639                           
   640                           ; BSR set to: 0
   641  0014C0  0100               	movlb	0	; () banked
   642  0014C2  BF86               	btfsc	(main@time+3)& (0+255),7,b
   643  0014C4  D00E               	goto	l2425
   644  0014C6  0100               	movlb	0	; () banked
   645  0014C8  5186               	movf	(main@time+3)& (0+255),w,b
   646  0014CA  E113               	bnz	l2427
   647  0014CC  0EF0               	movlw	240
   648  0014CE  0100               	movlb	0	; () banked
   649  0014D0  5D83               	subwf	main@time& (0+255),w,b
   650  0014D2  0EBA               	movlw	186
   651  0014D4  0100               	movlb	0	; () banked
   652  0014D6  5984               	subwfb	(main@time+1)& (0+255),w,b
   653  0014D8  0E04               	movlw	4
   654  0014DA  0100               	movlb	0	; () banked
   655  0014DC  5985               	subwfb	(main@time+2)& (0+255),w,b
   656  0014DE  B0D8               	btfsc	status,0,c
   657  0014E0  D008               	goto	l2427
   658  0014E2                     l2425:
   659                           
   660                           ; BSR set to: 0
   661  0014E2  0E01               	movlw	1
   662  0014E4  0100               	movlb	0	; () banked
   663  0014E6  2783               	addwf	main@time& (0+255),f,b
   664  0014E8  0E00               	movlw	0
   665  0014EA  2384               	addwfc	(main@time+1)& (0+255),f,b
   666  0014EC  2385               	addwfc	(main@time+2)& (0+255),f,b
   667  0014EE  2386               	addwfc	(main@time+3)& (0+255),f,b
   668  0014F0  D7E7               	goto	l2421
   669  0014F2                     l2427:
   670                           
   671                           ; BSR set to: 0
   672                           ;Lab0.c: 67: count -= 5;
   673  0014F2  0EFB               	movlw	251
   674  0014F4  2639               	addwf	_count,f,c
   675  0014F6  0EFF               	movlw	255
   676  0014F8  223A               	addwfc	_count+1,f,c
   677                           
   678                           ; BSR set to: 0
   679  0014FA  D77E               	goto	l2393
   680  0014FC                     __end_of_main:
   681                           	opt stack 0
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           status	equ	0xFD8
   685                           
   686 ;; *************** function _sprintf *****************
   687 ;; Defined at:
   688 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\sprintf.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  wh              2   43[COMRAM] PTR unsigned char 
   691 ;;		 -> line1str(17), line2str(17), 
   692 ;;  f               2   45[COMRAM] PTR const unsigned char 
   693 ;;		 -> STR_4(11), STR_2(9), STR_1(14), 
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  pb              5   51[COMRAM] struct __prbuf
   696 ;;  ap              2   49[COMRAM] PTR void [1]
   697 ;;		 -> ?_sprintf(2), ?_printf(2), 
   698 ;; Return value:  Size  Location     Type
   699 ;;                  2   43[COMRAM] int 
   700 ;; Registers used:
   701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   707 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   710 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;Total ram usage:       13 bytes
   712 ;; Hardware stack levels used:    1
   713 ;; Hardware stack levels required when called:    3
   714 ;; This function calls:
   715 ;;		__doprnt
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text1
   722  001636                     __ptext1:
   723                           	opt stack 0
   724  001636                     _sprintf:
   725                           	opt stack 27
   726                           
   727                           ; BSR set to: 0
   728                           ;incstack = 0
   729  001636  C02C  F034         	movff	sprintf@wh,sprintf@pb
   730  00163A  C02D  F035         	movff	sprintf@wh+1,sprintf@pb+1
   731  00163E  0E00               	movlw	0
   732  001640  6E36               	movwf	sprintf@pb+2,c
   733  001642  0E00               	movlw	0
   734  001644  6E37               	movwf	sprintf@pb+3,c
   735  001646  0E00               	movlw	0
   736  001648  6E38               	movwf	sprintf@pb+4,c
   737  00164A  0E30               	movlw	low (?_sprintf+4)
   738  00164C  6E32               	movwf	sprintf@ap,c
   739  00164E  0E00               	movlw	high (?_sprintf+4)
   740  001650  6E33               	movwf	sprintf@ap+1,c
   741  001652  0E34               	movlw	low sprintf@pb
   742  001654  6E1C               	movwf	__doprnt@pb,c
   743  001656  0E00               	movlw	high sprintf@pb
   744  001658  6E1D               	movwf	__doprnt@pb+1,c
   745  00165A  C02E  F01E         	movff	sprintf@f,__doprnt@f
   746  00165E  C02F  F01F         	movff	sprintf@f+1,__doprnt@f+1
   747  001662  0E32               	movlw	low sprintf@ap
   748  001664  6E20               	movwf	__doprnt@ap,c
   749  001666  0E00               	movlw	high sprintf@ap
   750  001668  6E21               	movwf	__doprnt@ap+1,c
   751  00166A  EC23  F008         	call	__doprnt	;wreg free
   752  00166E  C034  FFD9         	movff	sprintf@pb,fsr2l
   753  001672  C035  FFDA         	movff	sprintf@pb+1,fsr2h
   754  001676  0E00               	movlw	0
   755  001678  6EDF               	movwf	indf2,c
   756  00167A  0012               	return	
   757  00167C                     __end_of_sprintf:
   758                           	opt stack 0
   759                           postinc0	equ	0xFEE
   760                           wreg	equ	0xFE8
   761                           indf2	equ	0xFDF
   762                           fsr2h	equ	0xFDA
   763                           fsr2l	equ	0xFD9
   764                           status	equ	0xFD8
   765                           
   766 ;; *************** function _printf *****************
   767 ;; Defined at:
   768 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\printf.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  f               2   43[COMRAM] PTR const unsigned char 
   771 ;;		 -> STR_5(12), STR_3(4), 
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  pb              5   49[COMRAM] struct __prbuf
   774 ;;  ap              2   47[COMRAM] PTR void [1]
   775 ;;		 -> ?_sprintf(2), ?_printf(2), 
   776 ;; Return value:  Size  Location     Type
   777 ;;                  2   43[COMRAM] int 
   778 ;; Registers used:
   779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;Total ram usage:       11 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    3
   792 ;; This function calls:
   793 ;;		__doprnt
   794 ;; This function is called by:
   795 ;;		_main
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           	psect	text2
   800  001740                     __ptext2:
   801                           	opt stack 0
   802  001740                     _printf:
   803                           	opt stack 27
   804                           
   805                           ;incstack = 0
   806  001740  0E00               	movlw	0
   807  001742  6E32               	movwf	printf@pb,c
   808  001744  0E00               	movlw	0
   809  001746  6E33               	movwf	printf@pb+1,c
   810  001748  0EC2               	movlw	low _putch
   811  00174A  6E34               	movwf	printf@pb+2,c
   812  00174C  0E18               	movlw	high _putch
   813  00174E  6E35               	movwf	printf@pb+3,c
   814  001750  0E00               	movlw	low (_putch shr (0+16))
   815  001752  6E36               	movwf	printf@pb+4,c
   816  001754  0E2E               	movlw	low (?_printf+2)
   817  001756  6E30               	movwf	printf@ap,c
   818  001758  0E00               	movlw	high (?_printf+2)
   819  00175A  6E31               	movwf	printf@ap+1,c
   820                           
   821                           ;	Return value of _printf is never used
   822  00175C  0E32               	movlw	low printf@pb
   823  00175E  6E1C               	movwf	__doprnt@pb,c
   824  001760  0E00               	movlw	high printf@pb
   825  001762  6E1D               	movwf	__doprnt@pb+1,c
   826  001764  C02C  F01E         	movff	printf@f,__doprnt@f
   827  001768  C02D  F01F         	movff	printf@f+1,__doprnt@f+1
   828  00176C  0E30               	movlw	low printf@ap
   829  00176E  6E20               	movwf	__doprnt@ap,c
   830  001770  0E00               	movlw	high printf@ap
   831  001772  6E21               	movwf	__doprnt@ap+1,c
   832  001774  EC23  F008         	call	__doprnt	;wreg free
   833  001778  0012               	return	
   834  00177A                     __end_of_printf:
   835                           	opt stack 0
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           indf2	equ	0xFDF
   839                           fsr2h	equ	0xFDA
   840                           fsr2l	equ	0xFD9
   841                           status	equ	0xFD8
   842                           
   843 ;; *************** function __doprnt *****************
   844 ;; Defined at:
   845 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  pb              2   27[COMRAM] PTR struct __prbuf
   848 ;;		 -> sprintf@pb(5), printf@pb(5), 
   849 ;;  f               2   29[COMRAM] PTR const unsigned char 
   850 ;;		 -> STR_5(12), STR_4(11), STR_3(4), STR_2(9), 
   851 ;;		 -> STR_1(14), 
   852 ;;  ap              2   31[COMRAM] PTR PTR void 
   853 ;;		 -> sprintf@ap(2), printf@ap(2), 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  tmpval          4    0        struct .
   856 ;;  cp              2   40[COMRAM] PTR const unsigned char 
   857 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_6(7), 
   858 ;;		 -> line1str(17), line2str(17), 
   859 ;;  val             2   38[COMRAM] unsigned int 
   860 ;;  len             2    0        unsigned int 
   861 ;;  c               1   42[COMRAM] char 
   862 ;;  prec            1   37[COMRAM] char 
   863 ;;  flag            1   36[COMRAM] unsigned char 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  2   27[COMRAM] int 
   866 ;; Registers used:
   867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   873 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   875 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   876 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;Total ram usage:       16 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    2
   880 ;; This function calls:
   881 ;;		Absolute function
   882 ;;		___lwdiv
   883 ;;		___lwmod
   884 ;;		_putch
   885 ;; This function is called by:
   886 ;;		_printf
   887 ;;		_sprintf
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text3
   892  001046                     __ptext3:
   893                           	opt stack 0
   894  001046                     __doprnt:
   895                           	opt stack 27
   896                           
   897                           ;doprnt.c: 499: signed char c;
   898                           ;doprnt.c: 506: signed char prec;
   899                           ;doprnt.c: 508: unsigned char flag;
   900                           ;doprnt.c: 523: union {
   901                           ;doprnt.c: 524: unsigned long vd;
   902                           ;doprnt.c: 525: double integ;
   903                           ;doprnt.c: 526: } tmpval;
   904                           ;doprnt.c: 528: unsigned int val;
   905                           ;doprnt.c: 529: unsigned len;
   906                           ;doprnt.c: 530: const char * cp;
   907                           ;doprnt.c: 536: while(c = *f++) {
   908                           
   909                           ;incstack = 0
   910  001046  D1AC               	goto	l2141
   911  001048                     l2059:
   912                           
   913                           ;doprnt.c: 538: if(c != '%')
   914  001048  0E25               	movlw	37
   915  00104A  182B               	xorwf	__doprnt@c,w,c
   916  00104C  B4D8               	btfsc	status,2,c
   917  00104E  D034               	goto	l2069
   918                           
   919                           ;doprnt.c: 540: {
   920                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
   921  001050  EE20 F002          	lfsr	2,2
   922  001054  501C               	movf	__doprnt@pb,w,c
   923  001056  26D9               	addwf	fsr2l,f,c
   924  001058  501D               	movf	__doprnt@pb+1,w,c
   925  00105A  22DA               	addwfc	fsr2h,f,c
   926  00105C  50DE               	movf	postinc2,w,c
   927  00105E  10DE               	iorwf	postinc2,w,c
   928  001060  10DE               	iorwf	postinc2,w,c
   929  001062  B4D8               	btfsc	status,2,c
   930  001064  D013               	goto	l2065
   931  001066  EE20 F002          	lfsr	2,2
   932  00106A  501C               	movf	__doprnt@pb,w,c
   933  00106C  26D9               	addwf	fsr2l,f,c
   934  00106E  501D               	movf	__doprnt@pb+1,w,c
   935  001070  22DA               	addwfc	fsr2h,f,c
   936  001072  D801               	call	u1498
   937  001074  D195               	goto	l2141
   938  001076                     u1498:
   939  001076  0005               	push	
   940  001078  6EFA               	movwf	pclath,c
   941  00107A  50DE               	movf	postinc2,w,c
   942  00107C  6EFD               	movwf	tosl,c
   943  00107E  50DE               	movf	postinc2,w,c
   944  001080  6EFE               	movwf	tosh,c
   945  001082  50DE               	movf	postinc2,w,c
   946  001084  6EFF               	movwf	tosu,c
   947  001086  50FA               	movf	pclath,w,c
   948  001088  502B               	movf	__doprnt@c,w,c
   949  00108A  0012               	return		;indir
   950  00108C                     l2065:
   951  00108C  C01C  FFD9         	movff	__doprnt@pb,fsr2l
   952  001090  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
   953  001094  CFDE F022          	movff	postinc2,??__doprnt
   954  001098  CFDD F023          	movff	postdec2,??__doprnt+1
   955  00109C  C022  FFD9         	movff	??__doprnt,fsr2l
   956  0010A0  C023  FFDA         	movff	??__doprnt+1,fsr2h
   957  0010A4  C02B  FFDF         	movff	__doprnt@c,indf2
   958  0010A8  C01C  FFD9         	movff	__doprnt@pb,fsr2l
   959  0010AC  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
   960  0010B0  2ADE               	incf	postinc2,f,c
   961  0010B2  0E00               	movlw	0
   962  0010B4  22DD               	addwfc	postdec2,f,c
   963                           
   964                           ;doprnt.c: 542: continue;
   965  0010B6  D174               	goto	l2141
   966  0010B8                     l2069:
   967                           
   968                           ;doprnt.c: 543: }
   969                           ;doprnt.c: 548: flag = 0;
   970  0010B8  0E00               	movlw	0
   971  0010BA  6E25               	movwf	__doprnt@flag,c
   972                           
   973                           ;doprnt.c: 635: switch(c = *f++) {
   974  0010BC  D08A               	goto	l2093
   975  0010BE                     l2071:
   976                           
   977                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
   978  0010BE  C020  FFD9         	movff	__doprnt@ap,fsr2l
   979  0010C2  C021  FFDA         	movff	__doprnt@ap+1,fsr2h
   980  0010C6  CFDF F022          	movff	indf2,??__doprnt
   981  0010CA  0E02               	movlw	2
   982  0010CC  26DE               	addwf	postinc2,f,c
   983  0010CE  CFDF F023          	movff	indf2,??__doprnt+1
   984  0010D2  0E00               	movlw	0
   985  0010D4  22DD               	addwfc	postdec2,f,c
   986  0010D6  C022  FFD9         	movff	??__doprnt,fsr2l
   987  0010DA  C023  FFDA         	movff	??__doprnt+1,fsr2h
   988  0010DE  CFDE F029          	movff	postinc2,__doprnt@cp
   989  0010E2  CFDD F02A          	movff	postdec2,__doprnt@cp+1
   990                           
   991                           ;doprnt.c: 740: if(!cp)
   992  0010E6  5029               	movf	__doprnt@cp,w,c
   993  0010E8  102A               	iorwf	__doprnt@cp+1,w,c
   994  0010EA  A4D8               	btfss	status,2,c
   995  0010EC  D05D               	goto	l2089
   996                           
   997                           ;doprnt.c: 741: cp = "(null)";
   998  0010EE  0E39               	movlw	low STR_6
   999  0010F0  6E29               	movwf	__doprnt@cp,c
  1000  0010F2  0E10               	movlw	high STR_6
  1001  0010F4  6E2A               	movwf	__doprnt@cp+1,c
  1002                           
  1003                           ;doprnt.c: 777: while(*cp)
  1004  0010F6  D058               	goto	l2089
  1005  0010F8                     l2077:
  1006                           
  1007                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  1008  0010F8  EE20 F002          	lfsr	2,2
  1009  0010FC  501C               	movf	__doprnt@pb,w,c
  1010  0010FE  26D9               	addwf	fsr2l,f,c
  1011  001100  501D               	movf	__doprnt@pb+1,w,c
  1012  001102  22DA               	addwfc	fsr2h,f,c
  1013  001104  50DE               	movf	postinc2,w,c
  1014  001106  10DE               	iorwf	postinc2,w,c
  1015  001108  10DE               	iorwf	postinc2,w,c
  1016  00110A  B4D8               	btfsc	status,2,c
  1017  00110C  D026               	goto	l2083
  1018  00110E  EE20 F002          	lfsr	2,2
  1019  001112  501C               	movf	__doprnt@pb,w,c
  1020  001114  26D9               	addwf	fsr2l,f,c
  1021  001116  501D               	movf	__doprnt@pb+1,w,c
  1022  001118  22DA               	addwfc	fsr2h,f,c
  1023  00111A  D801               	call	u1528
  1024  00111C  D01B               	goto	l2081
  1025  00111E                     u1528:
  1026  00111E  0005               	push	
  1027  001120  6EFA               	movwf	pclath,c
  1028  001122  50DE               	movf	postinc2,w,c
  1029  001124  6EFD               	movwf	tosl,c
  1030  001126  50DE               	movf	postinc2,w,c
  1031  001128  6EFE               	movwf	tosh,c
  1032  00112A  50DE               	movf	postinc2,w,c
  1033  00112C  6EFF               	movwf	tosu,c
  1034  00112E  50FA               	movf	pclath,w,c
  1035  001130  C029  FFF6         	movff	__doprnt@cp,tblptrl
  1036  001134  C02A  FFF7         	movff	__doprnt@cp+1,tblptrh
  1037  001138  0E00               	movlw	low (__smallconst shr (0+16))
  1038  00113A  6EF8               	movwf	tblptru,c
  1039  00113C  0E0F               	movlw	(high __ramtop+-1)
  1040  00113E  64F7               	cpfsgt	tblptrh,c
  1041  001140  D003               	bra	u1537
  1042  001142  0008               	tblrd		*
  1043  001144  50F5               	movf	tablat,w,c
  1044  001146  D005               	bra	u1530
  1045  001148                     u1537:
  1046  001148  CFF6 FFE9          	movff	tblptrl,fsr0l
  1047  00114C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1048  001150  50EF               	movf	indf0,w,c
  1049  001152                     u1530:
  1050  001152  0012               	return		;indir
  1051  001154                     l2081:
  1052  001154  4A29               	infsnz	__doprnt@cp,f,c
  1053  001156  2A2A               	incf	__doprnt@cp+1,f,c
  1054  001158  D027               	goto	l2089
  1055  00115A                     l2083:
  1056  00115A  C029  FFF6         	movff	__doprnt@cp,tblptrl
  1057  00115E  C02A  FFF7         	movff	__doprnt@cp+1,tblptrh
  1058  001162  0E00               	movlw	low (__smallconst shr (0+16))
  1059  001164  6EF8               	movwf	tblptru,c
  1060  001166  C01C  FFD9         	movff	__doprnt@pb,fsr2l
  1061  00116A  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
  1062  00116E  CFDE F022          	movff	postinc2,??__doprnt
  1063  001172  CFDD F023          	movff	postdec2,??__doprnt+1
  1064  001176  C022  FFD9         	movff	??__doprnt,fsr2l
  1065  00117A  C023  FFDA         	movff	??__doprnt+1,fsr2h
  1066  00117E  0E0F               	movlw	(high __ramtop+-1)
  1067  001180  64F7               	cpfsgt	tblptrh,c
  1068  001182  D003               	bra	u1547
  1069  001184  0008               	tblrd		*
  1070  001186  50F5               	movf	tablat,w,c
  1071  001188  D005               	bra	u1540
  1072  00118A                     u1547:
  1073  00118A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1074  00118E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1075  001192  50EF               	movf	indf0,w,c
  1076  001194                     u1540:
  1077  001194  6EDF               	movwf	indf2,c
  1078  001196  4A29               	infsnz	__doprnt@cp,f,c
  1079  001198  2A2A               	incf	__doprnt@cp+1,f,c
  1080  00119A  C01C  FFD9         	movff	__doprnt@pb,fsr2l
  1081  00119E  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
  1082  0011A2  2ADE               	incf	postinc2,f,c
  1083  0011A4  0E00               	movlw	0
  1084  0011A6  22DD               	addwfc	postdec2,f,c
  1085  0011A8                     l2089:
  1086  0011A8  C029  FFF6         	movff	__doprnt@cp,tblptrl
  1087  0011AC  C02A  FFF7         	movff	__doprnt@cp+1,tblptrh
  1088  0011B0  0E00               	movlw	low (__smallconst shr (0+16))
  1089  0011B2  6EF8               	movwf	tblptru,c
  1090  0011B4  0E0F               	movlw	(high __ramtop+-1)
  1091  0011B6  64F7               	cpfsgt	tblptrh,c
  1092  0011B8  D003               	bra	u1557
  1093  0011BA  0008               	tblrd		*
  1094  0011BC  50F5               	movf	tablat,w,c
  1095  0011BE  D005               	bra	u1550
  1096  0011C0                     u1557:
  1097  0011C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1098  0011C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1099  0011C8  50EF               	movf	indf0,w,c
  1100  0011CA                     u1550:
  1101  0011CA  0900               	iorlw	0
  1102  0011CC  B4D8               	btfsc	status,2,c
  1103  0011CE  D0E8               	goto	l2141
  1104  0011D0  D793               	goto	l2077
  1105  0011D2                     l2093:
  1106  0011D2  C01E  FFF6         	movff	__doprnt@f,tblptrl
  1107  0011D6  C01F  FFF7         	movff	__doprnt@f+1,tblptrh
  1108  0011DA  4A1E               	infsnz	__doprnt@f,f,c
  1109  0011DC  2A1F               	incf	__doprnt@f+1,f,c
  1110  0011DE                     	if	0	;tblptru may be non-zero
  1111  0011DE                     	endif
  1112  0011DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1113  0011DE  0E00               	movlw	low (__mediumconst shr (0+16))
  1114  0011E0  6EF8               	movwf	tblptru,c
  1115  0011E2                     	endif
  1116  0011E2  0008               	tblrd		*
  1117  0011E4  CFF5 F02B          	movff	tablat,__doprnt@c
  1118  0011E8  502B               	movf	__doprnt@c,w,c
  1119                           
  1120                           ; Switch size 1, requested type "space"
  1121                           ; Number of cases is 4, Range of values is 0 to 115
  1122                           ; switch strategies available:
  1123                           ; Name         Instructions Cycles
  1124                           ; simple_byte           13     7 (average)
  1125                           ;	Chosen strategy is simple_byte
  1126  0011EA  0A00               	xorlw	0	; case 0
  1127  0011EC  B4D8               	btfsc	status,2,c
  1128  0011EE  D0E6               	goto	l2143
  1129  0011F0  0A64               	xorlw	100	; case 100
  1130  0011F2  B4D8               	btfsc	status,2,c
  1131  0011F4  D007               	goto	l2095
  1132  0011F6  0A0D               	xorlw	13	; case 105
  1133  0011F8  B4D8               	btfsc	status,2,c
  1134  0011FA  D004               	goto	l2095
  1135  0011FC  0A1A               	xorlw	26	; case 115
  1136  0011FE  B4D8               	btfsc	status,2,c
  1137  001200  D75E               	goto	l2071
  1138  001202  D0CE               	goto	l2141
  1139  001204                     l2095:
  1140                           
  1141                           ;doprnt.c: 1253: {
  1142                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1143  001204  C020  FFD9         	movff	__doprnt@ap,fsr2l
  1144  001208  C021  FFDA         	movff	__doprnt@ap+1,fsr2h
  1145  00120C  CFDF F022          	movff	indf2,??__doprnt
  1146  001210  0E02               	movlw	2
  1147  001212  26DE               	addwf	postinc2,f,c
  1148  001214  CFDF F023          	movff	indf2,??__doprnt+1
  1149  001218  0E00               	movlw	0
  1150  00121A  22DD               	addwfc	postdec2,f,c
  1151  00121C  C022  FFD9         	movff	??__doprnt,fsr2l
  1152  001220  C023  FFDA         	movff	??__doprnt+1,fsr2h
  1153  001224  CFDE F027          	movff	postinc2,__doprnt@val
  1154  001228  CFDD F028          	movff	postdec2,__doprnt@val+1
  1155                           
  1156                           ;doprnt.c: 1261: if((int)val < 0) {
  1157  00122C  AE28               	btfss	__doprnt@val+1,7,c
  1158  00122E  D006               	goto	l2103
  1159                           
  1160                           ;doprnt.c: 1262: flag |= 0x03;
  1161  001230  0E03               	movlw	3
  1162  001232  1225               	iorwf	__doprnt@flag,f,c
  1163                           
  1164                           ;doprnt.c: 1263: val = -val;
  1165  001234  6C27               	negf	__doprnt@val,c
  1166  001236  1E28               	comf	__doprnt@val+1,f,c
  1167  001238  B0D8               	btfsc	status,0,c
  1168  00123A  2A28               	incf	__doprnt@val+1,f,c
  1169  00123C                     l2103:
  1170                           
  1171                           ;doprnt.c: 1264: }
  1172                           ;doprnt.c: 1266: }
  1173                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1174  00123C  0E01               	movlw	1
  1175  00123E  6E2B               	movwf	__doprnt@c,c
  1176  001240                     l2105:
  1177  001240  0E05               	movlw	5
  1178  001242  182B               	xorwf	__doprnt@c,w,c
  1179  001244  B4D8               	btfsc	status,2,c
  1180  001246  D015               	goto	l2117
  1181                           
  1182                           ;doprnt.c: 1306: if(val < dpowers[c])
  1183  001248  502B               	movf	__doprnt@c,w,c
  1184  00124A  0D02               	mullw	2
  1185  00124C  0E01               	movlw	low _dpowers
  1186  00124E  24F3               	addwf	prodl,w,c
  1187  001250  6EF6               	movwf	tblptrl,c
  1188  001252  0E10               	movlw	high _dpowers
  1189  001254  20F4               	addwfc	prodh,w,c
  1190  001256  6EF7               	movwf	tblptrh,c
  1191  001258                     	if	1	;There are 3 active tblptr bytes
  1192  001258  6AF8               	clrf	tblptru,c
  1193  00125A  0E00               	movlw	low (__mediumconst shr (0+16))
  1194  00125C  22F8               	addwfc	tblptru,f,c
  1195  00125E                     	endif
  1196  00125E  0009               	tblrd		*+
  1197  001260  50F5               	movf	tablat,w,c
  1198  001262  5C27               	subwf	__doprnt@val,w,c
  1199  001264  0009               	tblrd		*+
  1200  001266  50F5               	movf	tablat,w,c
  1201  001268  5828               	subwfb	__doprnt@val+1,w,c
  1202  00126A  A0D8               	btfss	status,0,c
  1203  00126C  D002               	goto	l2117
  1204                           
  1205                           ;doprnt.c: 1307: break;
  1206  00126E  2A2B               	incf	__doprnt@c,f,c
  1207  001270  D7E7               	goto	l2105
  1208  001272                     l2117:
  1209                           
  1210                           ;doprnt.c: 1422: {
  1211                           ;doprnt.c: 1438: if(flag & 0x03)
  1212  001272  C025  F022         	movff	__doprnt@flag,??__doprnt
  1213  001276  0E03               	movlw	3
  1214  001278  1622               	andwf	??__doprnt,f,c
  1215  00127A  B4D8               	btfsc	status,2,c
  1216  00127C  D033               	goto	l2127
  1217                           
  1218                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  1219  00127E  EE20 F002          	lfsr	2,2
  1220  001282  501C               	movf	__doprnt@pb,w,c
  1221  001284  26D9               	addwf	fsr2l,f,c
  1222  001286  501D               	movf	__doprnt@pb+1,w,c
  1223  001288  22DA               	addwfc	fsr2h,f,c
  1224  00128A  50DE               	movf	postinc2,w,c
  1225  00128C  10DE               	iorwf	postinc2,w,c
  1226  00128E  10DE               	iorwf	postinc2,w,c
  1227  001290  B4D8               	btfsc	status,2,c
  1228  001292  D013               	goto	l2123
  1229  001294  EE20 F002          	lfsr	2,2
  1230  001298  501C               	movf	__doprnt@pb,w,c
  1231  00129A  26D9               	addwf	fsr2l,f,c
  1232  00129C  501D               	movf	__doprnt@pb+1,w,c
  1233  00129E  22DA               	addwfc	fsr2h,f,c
  1234  0012A0  D801               	call	u1638
  1235  0012A2  D020               	goto	l2127
  1236  0012A4                     u1638:
  1237  0012A4  0005               	push	
  1238  0012A6  6EFA               	movwf	pclath,c
  1239  0012A8  50DE               	movf	postinc2,w,c
  1240  0012AA  6EFD               	movwf	tosl,c
  1241  0012AC  50DE               	movf	postinc2,w,c
  1242  0012AE  6EFE               	movwf	tosh,c
  1243  0012B0  50DE               	movf	postinc2,w,c
  1244  0012B2  6EFF               	movwf	tosu,c
  1245  0012B4  50FA               	movf	pclath,w,c
  1246  0012B6  0E2D               	movlw	45
  1247  0012B8  0012               	return		;indir
  1248  0012BA                     l2123:
  1249  0012BA  C01C  FFD9         	movff	__doprnt@pb,fsr2l
  1250  0012BE  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
  1251  0012C2  CFDE F022          	movff	postinc2,??__doprnt
  1252  0012C6  CFDD F023          	movff	postdec2,??__doprnt+1
  1253  0012CA  C022  FFD9         	movff	??__doprnt,fsr2l
  1254  0012CE  C023  FFDA         	movff	??__doprnt+1,fsr2h
  1255  0012D2  0E2D               	movlw	45
  1256  0012D4  6EDF               	movwf	indf2,c
  1257  0012D6  C01C  FFD9         	movff	__doprnt@pb,fsr2l
  1258  0012DA  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
  1259  0012DE  2ADE               	incf	postinc2,f,c
  1260  0012E0  0E00               	movlw	0
  1261  0012E2  22DD               	addwfc	postdec2,f,c
  1262  0012E4                     l2127:
  1263                           
  1264                           ;doprnt.c: 1469: }
  1265                           ;doprnt.c: 1472: prec = c;
  1266  0012E4  C02B  F026         	movff	__doprnt@c,__doprnt@prec
  1267                           
  1268                           ;doprnt.c: 1474: while(prec--) {
  1269  0012E8  D057               	goto	l2139
  1270  0012EA                     l2129:
  1271                           
  1272                           ;doprnt.c: 1478: {
  1273                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1274  0012EA  5026               	movf	__doprnt@prec,w,c
  1275  0012EC  0D02               	mullw	2
  1276  0012EE  0E01               	movlw	low _dpowers
  1277  0012F0  24F3               	addwf	prodl,w,c
  1278  0012F2  6EF6               	movwf	tblptrl,c
  1279  0012F4  0E10               	movlw	high _dpowers
  1280  0012F6  20F4               	addwfc	prodh,w,c
  1281  0012F8  6EF7               	movwf	tblptrh,c
  1282  0012FA                     	if	1	;There are 3 active tblptr bytes
  1283  0012FA  6AF8               	clrf	tblptru,c
  1284  0012FC  0E00               	movlw	low (__mediumconst shr (0+16))
  1285  0012FE  22F8               	addwfc	tblptru,f,c
  1286  001300                     	endif
  1287  001300  0009               	tblrd		*+
  1288  001302  CFF5 F012          	movff	tablat,___lwdiv@divisor
  1289  001306  000A               	tblrd		*-
  1290  001308  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  1291  00130C  C027  F010         	movff	__doprnt@val,___lwdiv@dividend
  1292  001310  C028  F011         	movff	__doprnt@val+1,___lwdiv@dividend+1
  1293  001314  ECF2  F00A         	call	___lwdiv
  1294  001318  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  1295  00131C  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  1296  001320  0E00               	movlw	0
  1297  001322  6E1A               	movwf	___lwmod@divisor+1,c
  1298  001324  0E0A               	movlw	10
  1299  001326  6E19               	movwf	___lwmod@divisor,c
  1300  001328  EC61  F00B         	call	___lwmod	;wreg free
  1301  00132C  5017               	movf	?___lwmod,w,c
  1302  00132E  0F30               	addlw	48
  1303  001330  6E2B               	movwf	__doprnt@c,c
  1304                           
  1305                           ;doprnt.c: 1523: }
  1306                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  1307  001332  EE20 F002          	lfsr	2,2
  1308  001336  501C               	movf	__doprnt@pb,w,c
  1309  001338  26D9               	addwf	fsr2l,f,c
  1310  00133A  501D               	movf	__doprnt@pb+1,w,c
  1311  00133C  22DA               	addwfc	fsr2h,f,c
  1312  00133E  50DE               	movf	postinc2,w,c
  1313  001340  10DE               	iorwf	postinc2,w,c
  1314  001342  10DE               	iorwf	postinc2,w,c
  1315  001344  B4D8               	btfsc	status,2,c
  1316  001346  D013               	goto	l2135
  1317  001348  EE20 F002          	lfsr	2,2
  1318  00134C  501C               	movf	__doprnt@pb,w,c
  1319  00134E  26D9               	addwf	fsr2l,f,c
  1320  001350  501D               	movf	__doprnt@pb+1,w,c
  1321  001352  22DA               	addwfc	fsr2h,f,c
  1322  001354  D801               	call	u1658
  1323  001356  D020               	goto	l2139
  1324  001358                     u1658:
  1325  001358  0005               	push	
  1326  00135A  6EFA               	movwf	pclath,c
  1327  00135C  50DE               	movf	postinc2,w,c
  1328  00135E  6EFD               	movwf	tosl,c
  1329  001360  50DE               	movf	postinc2,w,c
  1330  001362  6EFE               	movwf	tosh,c
  1331  001364  50DE               	movf	postinc2,w,c
  1332  001366  6EFF               	movwf	tosu,c
  1333  001368  50FA               	movf	pclath,w,c
  1334  00136A  502B               	movf	__doprnt@c,w,c
  1335  00136C  0012               	return		;indir
  1336  00136E                     l2135:
  1337  00136E  C01C  FFD9         	movff	__doprnt@pb,fsr2l
  1338  001372  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
  1339  001376  CFDE F022          	movff	postinc2,??__doprnt
  1340  00137A  CFDD F023          	movff	postdec2,??__doprnt+1
  1341  00137E  C022  FFD9         	movff	??__doprnt,fsr2l
  1342  001382  C023  FFDA         	movff	??__doprnt+1,fsr2h
  1343  001386  C02B  FFDF         	movff	__doprnt@c,indf2
  1344  00138A  C01C  FFD9         	movff	__doprnt@pb,fsr2l
  1345  00138E  C01D  FFDA         	movff	__doprnt@pb+1,fsr2h
  1346  001392  2ADE               	incf	postinc2,f,c
  1347  001394  0E00               	movlw	0
  1348  001396  22DD               	addwfc	postdec2,f,c
  1349  001398                     l2139:
  1350  001398  0626               	decf	__doprnt@prec,f,c
  1351  00139A  2826               	incf	__doprnt@prec,w,c
  1352  00139C  A4D8               	btfss	status,2,c
  1353  00139E  D7A5               	goto	l2129
  1354  0013A0                     l2141:
  1355  0013A0  C01E  FFF6         	movff	__doprnt@f,tblptrl
  1356  0013A4  C01F  FFF7         	movff	__doprnt@f+1,tblptrh
  1357  0013A8  4A1E               	infsnz	__doprnt@f,f,c
  1358  0013AA  2A1F               	incf	__doprnt@f+1,f,c
  1359  0013AC                     	if	0	;tblptru may be non-zero
  1360  0013AC                     	endif
  1361  0013AC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1362  0013AC  0E00               	movlw	low (__mediumconst shr (0+16))
  1363  0013AE  6EF8               	movwf	tblptru,c
  1364  0013B0                     	endif
  1365  0013B0  0008               	tblrd		*
  1366  0013B2  CFF5 F02B          	movff	tablat,__doprnt@c
  1367  0013B6  502B               	movf	__doprnt@c,w,c
  1368  0013B8  A4D8               	btfss	status,2,c
  1369  0013BA  D646               	goto	l2059
  1370  0013BC                     l2143:
  1371                           
  1372                           ;doprnt.c: 1540: return 0;
  1373  0013BC  0E00               	movlw	0
  1374  0013BE  6E1D               	movwf	?__doprnt+1,c
  1375  0013C0  0E00               	movlw	0
  1376  0013C2  6E1C               	movwf	?__doprnt,c
  1377  0013C4  0012               	return	
  1378  0013C6                     __end_of__doprnt:
  1379                           	opt stack 0
  1380                           tosu	equ	0xFFF
  1381                           tosh	equ	0xFFE
  1382                           tosl	equ	0xFFD
  1383                           pclath	equ	0xFFA
  1384                           tblptru	equ	0xFF8
  1385                           tblptrh	equ	0xFF7
  1386                           tblptrl	equ	0xFF6
  1387                           tablat	equ	0xFF5
  1388                           prodh	equ	0xFF4
  1389                           prodl	equ	0xFF3
  1390                           indf0	equ	0xFEF
  1391                           postinc0	equ	0xFEE
  1392                           fsr0h	equ	0xFEA
  1393                           fsr0l	equ	0xFE9
  1394                           wreg	equ	0xFE8
  1395                           indf2	equ	0xFDF
  1396                           postinc2	equ	0xFDE
  1397                           postdec2	equ	0xFDD
  1398                           fsr2h	equ	0xFDA
  1399                           fsr2l	equ	0xFD9
  1400                           status	equ	0xFD8
  1401                           
  1402 ;; *************** function _putch *****************
  1403 ;; Defined at:
  1404 ;;		line 123 in file "Lab0.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  c               1    wreg     unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  c               1   15[COMRAM] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;		None               void
  1411 ;; Registers used:
  1412 ;;		wreg
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;Total ram usage:        1 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    1
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_printf
  1429 ;;		__doprnt
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           	psect	text4
  1434  0018C2                     __ptext4:
  1435                           	opt stack 0
  1436  0018C2                     _putch:
  1437                           	opt stack 27
  1438                           
  1439                           ;incstack = 0
  1440                           ;putch@c stored from wreg
  1441  0018C2  6E10               	movwf	putch@c,c
  1442  0018C4                     l273:
  1443  0018C4  A89E               	btfss	3998,4,c	;volatile
  1444  0018C6  D7FE               	goto	l273
  1445                           
  1446                           ;Lab0.c: 125: TXREG1 = c;
  1447  0018C8  C010  FFAE         	movff	putch@c,4014	;volatile
  1448  0018CC  0012               	return		;funcret
  1449  0018CE                     __end_of_putch:
  1450                           	opt stack 0
  1451                           tosu	equ	0xFFF
  1452                           tosh	equ	0xFFE
  1453                           tosl	equ	0xFFD
  1454                           pclath	equ	0xFFA
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           prodh	equ	0xFF4
  1460                           prodl	equ	0xFF3
  1461                           indf0	equ	0xFEF
  1462                           postinc0	equ	0xFEE
  1463                           fsr0h	equ	0xFEA
  1464                           fsr0l	equ	0xFE9
  1465                           wreg	equ	0xFE8
  1466                           indf2	equ	0xFDF
  1467                           postinc2	equ	0xFDE
  1468                           postdec2	equ	0xFDD
  1469                           fsr2h	equ	0xFDA
  1470                           fsr2l	equ	0xFD9
  1471                           status	equ	0xFD8
  1472                           
  1473 ;; *************** function ___lwmod *****************
  1474 ;; Defined at:
  1475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  dividend        2   22[COMRAM] unsigned int 
  1478 ;;  divisor         2   24[COMRAM] unsigned int 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  counter         1   26[COMRAM] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  2   22[COMRAM] unsigned int 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;Total ram usage:        5 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    1
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		__doprnt
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text5
  1505  0016C2                     __ptext5:
  1506                           	opt stack 0
  1507  0016C2                     ___lwmod:
  1508                           	opt stack 27
  1509                           
  1510                           ;incstack = 0
  1511  0016C2  5019               	movf	___lwmod@divisor,w,c
  1512  0016C4  101A               	iorwf	___lwmod@divisor+1,w,c
  1513  0016C6  B4D8               	btfsc	status,2,c
  1514  0016C8  D018               	goto	l728
  1515  0016CA  0E01               	movlw	1
  1516  0016CC  6E1B               	movwf	___lwmod@counter,c
  1517  0016CE  D004               	goto	l2011
  1518  0016D0                     l2009:
  1519  0016D0  90D8               	bcf	status,0,c
  1520  0016D2  3619               	rlcf	___lwmod@divisor,f,c
  1521  0016D4  361A               	rlcf	___lwmod@divisor+1,f,c
  1522  0016D6  2A1B               	incf	___lwmod@counter,f,c
  1523  0016D8                     l2011:
  1524  0016D8  AE1A               	btfss	___lwmod@divisor+1,7,c
  1525  0016DA  D7FA               	goto	l2009
  1526  0016DC                     l2013:
  1527  0016DC  5019               	movf	___lwmod@divisor,w,c
  1528  0016DE  5C17               	subwf	___lwmod@dividend,w,c
  1529  0016E0  501A               	movf	___lwmod@divisor+1,w,c
  1530  0016E2  5818               	subwfb	___lwmod@dividend+1,w,c
  1531  0016E4  A0D8               	btfss	status,0,c
  1532  0016E6  D004               	goto	l2017
  1533  0016E8  5019               	movf	___lwmod@divisor,w,c
  1534  0016EA  5E17               	subwf	___lwmod@dividend,f,c
  1535  0016EC  501A               	movf	___lwmod@divisor+1,w,c
  1536  0016EE  5A18               	subwfb	___lwmod@dividend+1,f,c
  1537  0016F0                     l2017:
  1538  0016F0  90D8               	bcf	status,0,c
  1539  0016F2  321A               	rrcf	___lwmod@divisor+1,f,c
  1540  0016F4  3219               	rrcf	___lwmod@divisor,f,c
  1541  0016F6  2E1B               	decfsz	___lwmod@counter,f,c
  1542  0016F8  D7F1               	goto	l2013
  1543  0016FA                     l728:
  1544  0016FA  C017  F017         	movff	___lwmod@dividend,?___lwmod
  1545  0016FE  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  1546  001702  0012               	return		;funcret
  1547  001704                     __end_of___lwmod:
  1548                           	opt stack 0
  1549                           tosu	equ	0xFFF
  1550                           tosh	equ	0xFFE
  1551                           tosl	equ	0xFFD
  1552                           pclath	equ	0xFFA
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           prodh	equ	0xFF4
  1558                           prodl	equ	0xFF3
  1559                           indf0	equ	0xFEF
  1560                           postinc0	equ	0xFEE
  1561                           fsr0h	equ	0xFEA
  1562                           fsr0l	equ	0xFE9
  1563                           wreg	equ	0xFE8
  1564                           indf2	equ	0xFDF
  1565                           postinc2	equ	0xFDE
  1566                           postdec2	equ	0xFDD
  1567                           fsr2h	equ	0xFDA
  1568                           fsr2l	equ	0xFD9
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function ___lwdiv *****************
  1572 ;; Defined at:
  1573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  dividend        2   15[COMRAM] unsigned int 
  1576 ;;  divisor         2   17[COMRAM] unsigned int 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  quotient        2   20[COMRAM] unsigned int 
  1579 ;;  counter         1   19[COMRAM] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  2   15[COMRAM] unsigned int 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;Total ram usage:        7 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    1
  1596 ;; This function calls:
  1597 ;;		Nothing
  1598 ;; This function is called by:
  1599 ;;		__doprnt
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text6
  1604  0015E4                     __ptext6:
  1605                           	opt stack 0
  1606  0015E4                     ___lwdiv:
  1607                           	opt stack 27
  1608                           
  1609                           ;incstack = 0
  1610  0015E4  0E00               	movlw	0
  1611  0015E6  6E16               	movwf	___lwdiv@quotient+1,c
  1612  0015E8  0E00               	movlw	0
  1613  0015EA  6E15               	movwf	___lwdiv@quotient,c
  1614  0015EC  5012               	movf	___lwdiv@divisor,w,c
  1615  0015EE  1013               	iorwf	___lwdiv@divisor+1,w,c
  1616  0015F0  B4D8               	btfsc	status,2,c
  1617  0015F2  D01C               	goto	l718
  1618  0015F4  0E01               	movlw	1
  1619  0015F6  6E14               	movwf	___lwdiv@counter,c
  1620  0015F8  D004               	goto	l1991
  1621  0015FA                     l1989:
  1622  0015FA  90D8               	bcf	status,0,c
  1623  0015FC  3612               	rlcf	___lwdiv@divisor,f,c
  1624  0015FE  3613               	rlcf	___lwdiv@divisor+1,f,c
  1625  001600  2A14               	incf	___lwdiv@counter,f,c
  1626  001602                     l1991:
  1627  001602  AE13               	btfss	___lwdiv@divisor+1,7,c
  1628  001604  D7FA               	goto	l1989
  1629  001606                     l1993:
  1630  001606  90D8               	bcf	status,0,c
  1631  001608  3615               	rlcf	___lwdiv@quotient,f,c
  1632  00160A  3616               	rlcf	___lwdiv@quotient+1,f,c
  1633  00160C  5012               	movf	___lwdiv@divisor,w,c
  1634  00160E  5C10               	subwf	___lwdiv@dividend,w,c
  1635  001610  5013               	movf	___lwdiv@divisor+1,w,c
  1636  001612  5811               	subwfb	___lwdiv@dividend+1,w,c
  1637  001614  A0D8               	btfss	status,0,c
  1638  001616  D005               	goto	l2001
  1639  001618  5012               	movf	___lwdiv@divisor,w,c
  1640  00161A  5E10               	subwf	___lwdiv@dividend,f,c
  1641  00161C  5013               	movf	___lwdiv@divisor+1,w,c
  1642  00161E  5A11               	subwfb	___lwdiv@dividend+1,f,c
  1643  001620  8015               	bsf	___lwdiv@quotient,0,c
  1644  001622                     l2001:
  1645  001622  90D8               	bcf	status,0,c
  1646  001624  3213               	rrcf	___lwdiv@divisor+1,f,c
  1647  001626  3212               	rrcf	___lwdiv@divisor,f,c
  1648  001628  2E14               	decfsz	___lwdiv@counter,f,c
  1649  00162A  D7ED               	goto	l1993
  1650  00162C                     l718:
  1651  00162C  C015  F010         	movff	___lwdiv@quotient,?___lwdiv
  1652  001630  C016  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1653  001634  0012               	return		;funcret
  1654  001636                     __end_of___lwdiv:
  1655                           	opt stack 0
  1656                           tosu	equ	0xFFF
  1657                           tosh	equ	0xFFE
  1658                           tosl	equ	0xFFD
  1659                           pclath	equ	0xFFA
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           prodh	equ	0xFF4
  1665                           prodl	equ	0xFF3
  1666                           indf0	equ	0xFEF
  1667                           postinc0	equ	0xFEE
  1668                           fsr0h	equ	0xFEA
  1669                           fsr0l	equ	0xFE9
  1670                           wreg	equ	0xFE8
  1671                           indf2	equ	0xFDF
  1672                           postinc2	equ	0xFDE
  1673                           postdec2	equ	0xFDD
  1674                           fsr2h	equ	0xFDA
  1675                           fsr2l	equ	0xFD9
  1676                           status	equ	0xFD8
  1677                           
  1678 ;; *************** function _LCDWriteLine *****************
  1679 ;; Defined at:
  1680 ;;		line 59 in file "LCD.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  str             2   28[COMRAM] PTR const unsigned char 
  1683 ;;		 -> line1str(17), line2str(17), LCDScroll@str(17), 
  1684 ;;  line            1   30[COMRAM] unsigned char 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;		None
  1687 ;; Return value:  Size  Location     Type
  1688 ;;		None               void
  1689 ;; Registers used:
  1690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1696 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1700 ;;Total ram usage:        4 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    5
  1703 ;; This function calls:
  1704 ;;		_LCDSetPos
  1705 ;;		_LCDWriteData
  1706 ;; This function is called by:
  1707 ;;		_main
  1708 ;;		_LCDScroll
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text7
  1713  0014FC                     __ptext7:
  1714                           	opt stack 0
  1715  0014FC                     _LCDWriteLine:
  1716                           	opt stack 25
  1717                           
  1718                           ;LCD.c: 60: if (line >= 2) {
  1719                           
  1720                           ;incstack = 0
  1721  0014FC  0E01               	movlw	1
  1722  0014FE  641F               	cpfsgt	LCDWriteLine@line,c
  1723  001500  D001               	goto	l2177
  1724  001502  0012               	return	
  1725  001504                     l2177:
  1726                           
  1727                           ;LCD.c: 62: }
  1728                           ;LCD.c: 63: LCDSetPos(line, 0);
  1729  001504  C01F  F016         	movff	LCDWriteLine@line,LCDSetPos@row
  1730  001508  6A17               	clrf	LCDSetPos@row+1,c
  1731  00150A  0E00               	movlw	0
  1732  00150C  6E19               	movwf	LCDSetPos@col+1,c
  1733  00150E  0E00               	movlw	0
  1734  001510  6E18               	movwf	LCDSetPos@col,c
  1735  001512  EC3E  F00B         	call	_LCDSetPos
  1736                           
  1737                           ;LCD.c: 64: while (*str) {
  1738  001516  D032               	goto	l2197
  1739  001518                     l2179:
  1740                           
  1741                           ;LCD.c: 65: if (*str == '\n') {
  1742  001518  C01D  FFD9         	movff	LCDWriteLine@str,fsr2l
  1743  00151C  C01E  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1744  001520  0E0A               	movlw	10
  1745  001522  18DE               	xorwf	postinc2,w,c
  1746  001524  A4D8               	btfss	status,2,c
  1747  001526  D007               	goto	l2187
  1748                           
  1749                           ;LCD.c: 66: ++line;
  1750  001528  2A1F               	incf	LCDWriteLine@line,f,c
  1751                           
  1752                           ;LCD.c: 67: if (line == 2) {
  1753  00152A  0E02               	movlw	2
  1754  00152C  181F               	xorwf	LCDWriteLine@line,w,c
  1755  00152E  A4D8               	btfss	status,2,c
  1756  001530  D002               	goto	l2187
  1757                           
  1758                           ;LCD.c: 68: line = 0;
  1759  001532  0E00               	movlw	0
  1760  001534  6E1F               	movwf	LCDWriteLine@line,c
  1761  001536                     l2187:
  1762                           
  1763                           ;LCD.c: 69: }
  1764                           ;LCD.c: 70: }
  1765                           ;LCD.c: 71: if (*str == '\r' || *str == '\n') {
  1766  001536  C01D  FFD9         	movff	LCDWriteLine@str,fsr2l
  1767  00153A  C01E  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1768  00153E  0E0D               	movlw	13
  1769  001540  18DE               	xorwf	postinc2,w,c
  1770  001542  B4D8               	btfsc	status,2,c
  1771  001544  D008               	goto	l2191
  1772  001546  C01D  FFD9         	movff	LCDWriteLine@str,fsr2l
  1773  00154A  C01E  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1774  00154E  0E0A               	movlw	10
  1775  001550  18DE               	xorwf	postinc2,w,c
  1776  001552  A4D8               	btfss	status,2,c
  1777  001554  D00A               	goto	l2193
  1778  001556                     l2191:
  1779                           
  1780                           ;LCD.c: 72: LCDSetPos(line, 0);
  1781  001556  C01F  F016         	movff	LCDWriteLine@line,LCDSetPos@row
  1782  00155A  6A17               	clrf	LCDSetPos@row+1,c
  1783  00155C  0E00               	movlw	0
  1784  00155E  6E19               	movwf	LCDSetPos@col+1,c
  1785  001560  0E00               	movlw	0
  1786  001562  6E18               	movwf	LCDSetPos@col,c
  1787  001564  EC3E  F00B         	call	_LCDSetPos	;wreg free
  1788                           
  1789                           ;LCD.c: 73: } else {
  1790  001568  D007               	goto	l2195
  1791  00156A                     l2193:
  1792                           
  1793                           ;LCD.c: 74: LCDWriteData(*str);
  1794  00156A  C01D  FFD9         	movff	LCDWriteLine@str,fsr2l
  1795  00156E  C01E  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1796  001572  50DF               	movf	indf2,w,c
  1797  001574  EC21  F00C         	call	_LCDWriteData
  1798  001578                     l2195:
  1799                           
  1800                           ;LCD.c: 75: }
  1801                           ;LCD.c: 76: ++str;
  1802  001578  4A1D               	infsnz	LCDWriteLine@str,f,c
  1803  00157A  2A1E               	incf	LCDWriteLine@str+1,f,c
  1804  00157C                     l2197:
  1805  00157C  C01D  FFD9         	movff	LCDWriteLine@str,fsr2l
  1806  001580  C01E  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1807  001584  50DF               	movf	indf2,w,c
  1808  001586  B4D8               	btfsc	status,2,c
  1809  001588  0012               	return	
  1810  00158A  D7C6               	goto	l2179
  1811  00158C                     __end_of_LCDWriteLine:
  1812                           	opt stack 0
  1813                           tosu	equ	0xFFF
  1814                           tosh	equ	0xFFE
  1815                           tosl	equ	0xFFD
  1816                           pclath	equ	0xFFA
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           prodh	equ	0xFF4
  1822                           prodl	equ	0xFF3
  1823                           indf0	equ	0xFEF
  1824                           postinc0	equ	0xFEE
  1825                           fsr0h	equ	0xFEA
  1826                           fsr0l	equ	0xFE9
  1827                           wreg	equ	0xFE8
  1828                           indf2	equ	0xFDF
  1829                           postinc2	equ	0xFDE
  1830                           postdec2	equ	0xFDD
  1831                           fsr2h	equ	0xFDA
  1832                           fsr2l	equ	0xFD9
  1833                           status	equ	0xFD8
  1834                           
  1835 ;; *************** function _LCDInit *****************
  1836 ;; Defined at:
  1837 ;;		line 24 in file "LCD.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  functionSet     1   22[COMRAM] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;		None               void
  1844 ;; Registers used:
  1845 ;;		wreg, status,2, status,0, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;Total ram usage:        2 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    4
  1858 ;; This function calls:
  1859 ;;		_LCDInitCommand
  1860 ;;		_LCDInitPort
  1861 ;; This function is called by:
  1862 ;;		_main
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text8
  1867  00158C                     __ptext8:
  1868                           	opt stack 0
  1869  00158C                     _LCDInit:
  1870                           	opt stack 26
  1871                           
  1872                           ;LCD.c: 25: char functionSet = 0b00111000;
  1873                           
  1874                           ;incstack = 0
  1875  00158C  0E38               	movlw	56
  1876  00158E  6E17               	movwf	LCDInit@functionSet,c
  1877                           
  1878                           ;LCD.c: 26: LCDInitPort();
  1879  001590  ECD6  F00B         	call	_LCDInitPort	;wreg free
  1880                           
  1881                           ;LCD.c: 27: _delay((unsigned long)((10)*(40000000L/4000.0)));
  1882  001594  0E82               	movlw	130
  1883  001596  6E16               	movwf	??_LCDInit& (0+255),c
  1884  001598  0EDE               	movlw	222
  1885  00159A                     u1957:
  1886  00159A  2EE8               	decfsz	wreg,f,c
  1887  00159C  D7FE               	goto	u1957
  1888  00159E  2E16               	decfsz	??_LCDInit& (0+255),f,c
  1889  0015A0  D7FC               	goto	u1957
  1890                           
  1891                           ;LCD.c: 37: LCDInitCommand(functionSet);
  1892  0015A2  5017               	movf	LCDInit@functionSet,w,c
  1893  0015A4  EC53  F00C         	call	_LCDInitCommand
  1894                           
  1895                           ;LCD.c: 38: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  1896  0015A8  0E85               	movlw	133
  1897  0015AA                     u1967:
  1898  0015AA  2EE8               	decfsz	wreg,f,c
  1899  0015AC  D7FE               	goto	u1967
  1900  0015AE  F000               	nop	
  1901                           
  1902                           ;LCD.c: 39: LCDInitCommand(0b00001100);
  1903  0015B0  0E0C               	movlw	12
  1904  0015B2  EC53  F00C         	call	_LCDInitCommand
  1905                           
  1906                           ;LCD.c: 40: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  1907  0015B6  0E85               	movlw	133
  1908  0015B8                     u1977:
  1909  0015B8  2EE8               	decfsz	wreg,f,c
  1910  0015BA  D7FE               	goto	u1977
  1911  0015BC  F000               	nop	
  1912                           
  1913                           ;LCD.c: 41: LCDInitCommand(0b00000001);
  1914  0015BE  0E01               	movlw	1
  1915  0015C0  EC53  F00C         	call	_LCDInitCommand
  1916                           
  1917                           ;LCD.c: 42: _delay((unsigned long)((1700)*(40000000L/4000000.0)));
  1918  0015C4  0E17               	movlw	23
  1919  0015C6  6E16               	movwf	??_LCDInit& (0+255),c
  1920  0015C8  0E12               	movlw	18
  1921  0015CA                     u1987:
  1922  0015CA  2EE8               	decfsz	wreg,f,c
  1923  0015CC  D7FE               	goto	u1987
  1924  0015CE  2E16               	decfsz	??_LCDInit& (0+255),f,c
  1925  0015D0  D7FC               	goto	u1987
  1926  0015D2  D000               	nop2	
  1927                           
  1928                           ;LCD.c: 43: LCDInitCommand(0b00000110);
  1929  0015D4  0E06               	movlw	6
  1930  0015D6  EC53  F00C         	call	_LCDInitCommand
  1931                           
  1932                           ;LCD.c: 44: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  1933  0015DA  0E85               	movlw	133
  1934  0015DC                     u1997:
  1935  0015DC  2EE8               	decfsz	wreg,f,c
  1936  0015DE  D7FE               	goto	u1997
  1937  0015E0  F000               	nop	
  1938  0015E2  0012               	return		;funcret
  1939  0015E4                     __end_of_LCDInit:
  1940                           	opt stack 0
  1941                           tosu	equ	0xFFF
  1942                           tosh	equ	0xFFE
  1943                           tosl	equ	0xFFD
  1944                           pclath	equ	0xFFA
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           prodh	equ	0xFF4
  1950                           prodl	equ	0xFF3
  1951                           indf0	equ	0xFEF
  1952                           postinc0	equ	0xFEE
  1953                           fsr0h	equ	0xFEA
  1954                           fsr0l	equ	0xFE9
  1955                           wreg	equ	0xFE8
  1956                           indf2	equ	0xFDF
  1957                           postinc2	equ	0xFDE
  1958                           postdec2	equ	0xFDD
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _LCDInitPort *****************
  1964 ;; Defined at:
  1965 ;;		line 287 in file "LCD.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;		None
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;		None               void
  1972 ;; Registers used:
  1973 ;;		wreg, status,2, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;Total ram usage:        0 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    2
  1986 ;; This function calls:
  1987 ;;		_WriteRegister
  1988 ;; This function is called by:
  1989 ;;		_LCDInit
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text9
  1994  0017AC                     __ptext9:
  1995                           	opt stack 0
  1996  0017AC                     _LCDInitPort:
  1997                           	opt stack 27
  1998                           
  1999                           ;LCD.c: 288: TRISAbits.TRISA2 = 0;
  2000                           
  2001                           ;incstack = 0
  2002  0017AC  9492               	bcf	3986,2,c	;volatile
  2003                           
  2004                           ;LCD.c: 289: LATAbits.LATA2 = 1;
  2005  0017AE  8489               	bsf	3977,2,c	;volatile
  2006                           
  2007                           ;LCD.c: 304: TRISCbits.TRISC3 = 0;
  2008  0017B0  9694               	bcf	3988,3,c	;volatile
  2009                           
  2010                           ;LCD.c: 305: TRISCbits.TRISC5 = 0;
  2011  0017B2  9A94               	bcf	3988,5,c	;volatile
  2012                           
  2013                           ;LCD.c: 307: SSPCON1 = 0x21;
  2014  0017B4  0E21               	movlw	33
  2015  0017B6  6EC6               	movwf	4038,c	;volatile
  2016                           
  2017                           ;LCD.c: 308: SSPSTATbits.CKE = 1;
  2018  0017B8  8CC7               	bsf	4039,6,c	;volatile
  2019                           
  2020                           ;LCD.c: 309: SSPIF = 0;
  2021  0017BA  969E               	bcf	3998,3,c	;volatile
  2022                           
  2023                           ;LCD.c: 310: WriteRegister(0, 0);
  2024  0017BC  0E00               	movlw	0
  2025  0017BE  6E10               	movwf	WriteRegister@b,c
  2026  0017C0  0E00               	movlw	0
  2027  0017C2  ECEE  F00B         	call	_WriteRegister
  2028                           
  2029                           ;LCD.c: 311: WriteRegister(1, 0);
  2030  0017C6  0E00               	movlw	0
  2031  0017C8  6E10               	movwf	WriteRegister@b,c
  2032  0017CA  0E01               	movlw	1
  2033  0017CC  ECEE  F00B         	call	_WriteRegister
  2034                           
  2035                           ;LCD.c: 312: WriteRegister(0x12, 0);
  2036  0017D0  0E00               	movlw	0
  2037  0017D2  6E10               	movwf	WriteRegister@b,c
  2038  0017D4  0E12               	movlw	18
  2039  0017D6  ECEE  F00B         	call	_WriteRegister
  2040  0017DA  0012               	return		;funcret
  2041  0017DC                     __end_of_LCDInitPort:
  2042                           	opt stack 0
  2043                           tosu	equ	0xFFF
  2044                           tosh	equ	0xFFE
  2045                           tosl	equ	0xFFD
  2046                           pclath	equ	0xFFA
  2047                           tblptru	equ	0xFF8
  2048                           tblptrh	equ	0xFF7
  2049                           tblptrl	equ	0xFF6
  2050                           tablat	equ	0xFF5
  2051                           prodh	equ	0xFF4
  2052                           prodl	equ	0xFF3
  2053                           indf0	equ	0xFEF
  2054                           postinc0	equ	0xFEE
  2055                           fsr0h	equ	0xFEA
  2056                           fsr0l	equ	0xFE9
  2057                           wreg	equ	0xFE8
  2058                           indf2	equ	0xFDF
  2059                           postinc2	equ	0xFDE
  2060                           postdec2	equ	0xFDD
  2061                           fsr2h	equ	0xFDA
  2062                           fsr2l	equ	0xFD9
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function _LCDInitCommand *****************
  2066 ;; Defined at:
  2067 ;;		line 193 in file "LCD.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  command         1    wreg     unsigned char 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  command         1   20[COMRAM] unsigned char 
  2072 ;; Return value:  Size  Location     Type
  2073 ;;		None               void
  2074 ;; Registers used:
  2075 ;;		wreg, status,2, status,0, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;Total ram usage:        1 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    3
  2088 ;; This function calls:
  2089 ;;		_LCDWriteByte
  2090 ;; This function is called by:
  2091 ;;		_LCDInit
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text10
  2096  0018A6                     __ptext10:
  2097                           	opt stack 0
  2098  0018A6                     _LCDInitCommand:
  2099                           	opt stack 26
  2100                           
  2101                           ;incstack = 0
  2102                           ;LCDInitCommand@command stored from wreg
  2103  0018A6  6E15               	movwf	LCDInitCommand@command,c
  2104                           
  2105                           ;LCD.c: 194: LCDWriteByte(command, 0);
  2106  0018A8  0E00               	movlw	0
  2107  0018AA  6E12               	movwf	LCDWriteByte@rs,c
  2108  0018AC  5015               	movf	LCDInitCommand@command,w,c
  2109  0018AE  EC82  F00B         	call	_LCDWriteByte
  2110  0018B2  0012               	return		;funcret
  2111  0018B4                     __end_of_LCDInitCommand:
  2112                           	opt stack 0
  2113                           tosu	equ	0xFFF
  2114                           tosh	equ	0xFFE
  2115                           tosl	equ	0xFFD
  2116                           pclath	equ	0xFFA
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           indf0	equ	0xFEF
  2124                           postinc0	equ	0xFEE
  2125                           fsr0h	equ	0xFEA
  2126                           fsr0l	equ	0xFE9
  2127                           wreg	equ	0xFE8
  2128                           indf2	equ	0xFDF
  2129                           postinc2	equ	0xFDE
  2130                           postdec2	equ	0xFDD
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _LCDClearLine *****************
  2136 ;; Defined at:
  2137 ;;		line 80 in file "LCD.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  line            1    wreg     unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  line            1   29[COMRAM] unsigned char 
  2142 ;;  c               1   28[COMRAM] unsigned char 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;		None               void
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;Total ram usage:        2 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    5
  2159 ;; This function calls:
  2160 ;;		_LCDSetPos
  2161 ;;		_LCDWriteData
  2162 ;; This function is called by:
  2163 ;;		_main
  2164 ;;		_LCDScroll
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text11
  2169  00177A                     __ptext11:
  2170                           	opt stack 0
  2171  00177A                     _LCDClearLine:
  2172                           	opt stack 25
  2173                           
  2174                           ;incstack = 0
  2175                           ;LCDClearLine@line stored from wreg
  2176  00177A  6E1E               	movwf	LCDClearLine@line,c
  2177                           
  2178                           ;LCD.c: 81: char c = 0;
  2179  00177C  0E00               	movlw	0
  2180  00177E  6E1D               	movwf	LCDClearLine@c,c
  2181                           
  2182                           ;LCD.c: 82: if (line >= 2) {
  2183  001780  0E01               	movlw	1
  2184  001782  641E               	cpfsgt	LCDClearLine@line,c
  2185  001784  D001               	goto	l2205
  2186  001786  0012               	return	
  2187  001788                     l2205:
  2188                           
  2189                           ;LCD.c: 84: }
  2190                           ;LCD.c: 85: LCDSetPos(line, 0);
  2191  001788  C01E  F016         	movff	LCDClearLine@line,LCDSetPos@row
  2192  00178C  6A17               	clrf	LCDSetPos@row+1,c
  2193  00178E  0E00               	movlw	0
  2194  001790  6E19               	movwf	LCDSetPos@col+1,c
  2195  001792  0E00               	movlw	0
  2196  001794  6E18               	movwf	LCDSetPos@col,c
  2197  001796  EC3E  F00B         	call	_LCDSetPos	;wreg free
  2198                           
  2199                           ;LCD.c: 86: while (c < 16) {
  2200  00179A  D004               	goto	l2211
  2201  00179C                     l2207:
  2202                           
  2203                           ;LCD.c: 87: LCDWriteData(' ');
  2204  00179C  0E20               	movlw	32
  2205  00179E  EC21  F00C         	call	_LCDWriteData
  2206                           
  2207                           ;LCD.c: 88: ++c;
  2208  0017A2  2A1D               	incf	LCDClearLine@c,f,c
  2209  0017A4                     l2211:
  2210  0017A4  0E0F               	movlw	15
  2211  0017A6  641D               	cpfsgt	LCDClearLine@c,c
  2212  0017A8  D7F9               	goto	l2207
  2213  0017AA  0012               	return	
  2214  0017AC                     __end_of_LCDClearLine:
  2215                           	opt stack 0
  2216                           tosu	equ	0xFFF
  2217                           tosh	equ	0xFFE
  2218                           tosl	equ	0xFFD
  2219                           pclath	equ	0xFFA
  2220                           tblptru	equ	0xFF8
  2221                           tblptrh	equ	0xFF7
  2222                           tblptrl	equ	0xFF6
  2223                           tablat	equ	0xFF5
  2224                           prodh	equ	0xFF4
  2225                           prodl	equ	0xFF3
  2226                           indf0	equ	0xFEF
  2227                           postinc0	equ	0xFEE
  2228                           fsr0h	equ	0xFEA
  2229                           fsr0l	equ	0xFE9
  2230                           wreg	equ	0xFE8
  2231                           indf2	equ	0xFDF
  2232                           postinc2	equ	0xFDE
  2233                           postdec2	equ	0xFDD
  2234                           fsr2h	equ	0xFDA
  2235                           fsr2l	equ	0xFD9
  2236                           status	equ	0xFD8
  2237                           
  2238 ;; *************** function _LCDWriteData *****************
  2239 ;; Defined at:
  2240 ;;		line 197 in file "LCD.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  c               1    wreg     unsigned char 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  c               1   20[COMRAM] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;		None               void
  2247 ;; Registers used:
  2248 ;;		wreg, status,2, status,0, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;Total ram usage:        1 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    3
  2261 ;; This function calls:
  2262 ;;		_LCDWriteByte
  2263 ;;		_shortDelay
  2264 ;;		_wait
  2265 ;; This function is called by:
  2266 ;;		_LCDWriteLine
  2267 ;;		_LCDClearLine
  2268 ;;		_LCDPutStr
  2269 ;;		_LCDPutChar
  2270 ;;		_LCDLoadCustomChar
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text12
  2275  001842                     __ptext12:
  2276                           	opt stack 0
  2277  001842                     _LCDWriteData:
  2278                           	opt stack 26
  2279                           
  2280                           ;incstack = 0
  2281                           ;LCDWriteData@c stored from wreg
  2282  001842  6E15               	movwf	LCDWriteData@c,c
  2283                           
  2284                           ;LCD.c: 198: wait();
  2285  001844  EC72  F00C         	call	_wait	;wreg free
  2286                           
  2287                           ;LCD.c: 199: LCDWriteByte(c, 1);
  2288  001848  0E01               	movlw	1
  2289  00184A  6E12               	movwf	LCDWriteByte@rs,c
  2290  00184C  5015               	movf	LCDWriteData@c,w,c
  2291  00184E  EC82  F00B         	call	_LCDWriteByte
  2292                           
  2293                           ;LCD.c: 200: shortDelay();
  2294  001852  EC6D  F00C         	call	_shortDelay	;wreg free
  2295  001856  0012               	return		;funcret
  2296  001858                     __end_of_LCDWriteData:
  2297                           	opt stack 0
  2298                           tosu	equ	0xFFF
  2299                           tosh	equ	0xFFE
  2300                           tosl	equ	0xFFD
  2301                           pclath	equ	0xFFA
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           indf0	equ	0xFEF
  2309                           postinc0	equ	0xFEE
  2310                           fsr0h	equ	0xFEA
  2311                           fsr0l	equ	0xFE9
  2312                           wreg	equ	0xFE8
  2313                           indf2	equ	0xFDF
  2314                           postinc2	equ	0xFDE
  2315                           postdec2	equ	0xFDD
  2316                           fsr2h	equ	0xFDA
  2317                           fsr2l	equ	0xFD9
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _LCDSetPos *****************
  2321 ;; Defined at:
  2322 ;;		line 96 in file "LCD.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  row             2   21[COMRAM] int 
  2325 ;;  col             2   23[COMRAM] int 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  pos             2   26[COMRAM] int 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2337 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;Total ram usage:        7 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    4
  2344 ;; This function calls:
  2345 ;;		_LCDCommand
  2346 ;;		_calculateBase
  2347 ;; This function is called by:
  2348 ;;		_LCDWriteLine
  2349 ;;		_LCDClearLine
  2350 ;;		_LCDReadLine
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text13
  2355  00167C                     __ptext13:
  2356                           	opt stack 0
  2357  00167C                     _LCDSetPos:
  2358                           	opt stack 25
  2359                           
  2360                           ;LCD.c: 97: int pos;
  2361                           ;LCD.c: 98: if (row < 0 || col < 0 || row >= 2 || col >= 16) {
  2362                           
  2363                           ;incstack = 0
  2364  00167C  BE17               	btfsc	LCDSetPos@row+1,7,c
  2365  00167E  0012               	return	
  2366  001680  BE19               	btfsc	LCDSetPos@col+1,7,c
  2367  001682  0012               	return	
  2368  001684  BE17               	btfsc	LCDSetPos@row+1,7,c
  2369  001686  D006               	goto	l2051
  2370  001688  5017               	movf	LCDSetPos@row+1,w,c
  2371  00168A  E11A               	bnz	l85
  2372  00168C  0E02               	movlw	2
  2373  00168E  5C16               	subwf	LCDSetPos@row,w,c
  2374  001690  B0D8               	btfsc	status,0,c
  2375  001692  0012               	return	
  2376  001694                     l2051:
  2377  001694  BE19               	btfsc	LCDSetPos@col+1,7,c
  2378  001696  D006               	goto	l2053
  2379  001698  5019               	movf	LCDSetPos@col+1,w,c
  2380  00169A  E112               	bnz	l85
  2381  00169C  0E10               	movlw	16
  2382  00169E  5C18               	subwf	LCDSetPos@col,w,c
  2383  0016A0  B0D8               	btfsc	status,0,c
  2384  0016A2  0012               	return	
  2385  0016A4                     l2053:
  2386                           
  2387                           ;LCD.c: 100: }
  2388                           ;LCD.c: 101: pos = calculateBase(row) + col;
  2389  0016A4  5016               	movf	LCDSetPos@row,w,c
  2390  0016A6  EC12  F00C         	call	_calculateBase
  2391  0016AA  6E1A               	movwf	??_LCDSetPos& (0+255),c
  2392  0016AC  501A               	movf	??_LCDSetPos,w,c
  2393  0016AE  2418               	addwf	LCDSetPos@col,w,c
  2394  0016B0  6E1B               	movwf	LCDSetPos@pos,c
  2395  0016B2  0E00               	movlw	0
  2396  0016B4  2019               	addwfc	LCDSetPos@col+1,w,c
  2397  0016B6  6E1C               	movwf	LCDSetPos@pos+1,c
  2398                           
  2399                           ;LCD.c: 102: LCDCommand(128 + pos);
  2400  0016B8  501B               	movf	LCDSetPos@pos,w,c
  2401  0016BA  0F80               	addlw	128
  2402  0016BC  EC2C  F00C         	call	_LCDCommand
  2403  0016C0                     l85:
  2404  0016C0  0012               	return		;funcret
  2405  0016C2                     __end_of_LCDSetPos:
  2406                           	opt stack 0
  2407                           tosu	equ	0xFFF
  2408                           tosh	equ	0xFFE
  2409                           tosl	equ	0xFFD
  2410                           pclath	equ	0xFFA
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           prodh	equ	0xFF4
  2416                           prodl	equ	0xFF3
  2417                           indf0	equ	0xFEF
  2418                           postinc0	equ	0xFEE
  2419                           fsr0h	equ	0xFEA
  2420                           fsr0l	equ	0xFE9
  2421                           wreg	equ	0xFE8
  2422                           indf2	equ	0xFDF
  2423                           postinc2	equ	0xFDE
  2424                           postdec2	equ	0xFDD
  2425                           fsr2h	equ	0xFDA
  2426                           fsr2l	equ	0xFD9
  2427                           status	equ	0xFD8
  2428                           
  2429 ;; *************** function _calculateBase *****************
  2430 ;; Defined at:
  2431 ;;		line 225 in file "LCD.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  line            1    wreg     unsigned char 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  line            1   16[COMRAM] unsigned char 
  2436 ;;  base            1   15[COMRAM] unsigned char 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      unsigned char 
  2439 ;; Registers used:
  2440 ;;		wreg, status,2, status,0, prodl, prodh
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;Total ram usage:        2 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    1
  2453 ;; This function calls:
  2454 ;;		Nothing
  2455 ;; This function is called by:
  2456 ;;		_LCDSetPos
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text14
  2461  001824                     __ptext14:
  2462                           	opt stack 0
  2463  001824                     _calculateBase:
  2464                           	opt stack 27
  2465                           
  2466                           ;incstack = 0
  2467                           ;calculateBase@line stored from wreg
  2468  001824  6E11               	movwf	calculateBase@line,c
  2469                           
  2470                           ;LCD.c: 226: char base;
  2471                           ;LCD.c: 227: if (line % 2 == 0) {
  2472  001826  B011               	btfsc	calculateBase@line,0,c
  2473  001828  D005               	goto	l1973
  2474                           
  2475                           ;LCD.c: 228: base = line * 10;
  2476  00182A  5011               	movf	calculateBase@line,w,c
  2477  00182C  0D0A               	mullw	10
  2478  00182E  CFF3 F010          	movff	prodl,calculateBase@base
  2479                           
  2480                           ;LCD.c: 229: } else {
  2481  001832  D005               	goto	l1975
  2482  001834                     l1973:
  2483                           
  2484                           ;LCD.c: 230: base = 54 + line * 10;
  2485  001834  5011               	movf	calculateBase@line,w,c
  2486  001836  0D0A               	mullw	10
  2487  001838  50F3               	movf	prodl,w,c
  2488  00183A  0F36               	addlw	54
  2489  00183C  6E10               	movwf	calculateBase@base,c
  2490  00183E                     l1975:
  2491                           
  2492                           ;LCD.c: 231: }
  2493                           ;LCD.c: 232: return base;
  2494  00183E  5010               	movf	calculateBase@base,w,c
  2495  001840  0012               	return	
  2496  001842                     __end_of_calculateBase:
  2497                           	opt stack 0
  2498                           tosu	equ	0xFFF
  2499                           tosh	equ	0xFFE
  2500                           tosl	equ	0xFFD
  2501                           pclath	equ	0xFFA
  2502                           tblptru	equ	0xFF8
  2503                           tblptrh	equ	0xFF7
  2504                           tblptrl	equ	0xFF6
  2505                           tablat	equ	0xFF5
  2506                           prodh	equ	0xFF4
  2507                           prodl	equ	0xFF3
  2508                           indf0	equ	0xFEF
  2509                           postinc0	equ	0xFEE
  2510                           fsr0h	equ	0xFEA
  2511                           fsr0l	equ	0xFE9
  2512                           wreg	equ	0xFE8
  2513                           indf2	equ	0xFDF
  2514                           postinc2	equ	0xFDE
  2515                           postdec2	equ	0xFDD
  2516                           fsr2h	equ	0xFDA
  2517                           fsr2l	equ	0xFD9
  2518                           status	equ	0xFD8
  2519                           
  2520 ;; *************** function _LCDClear *****************
  2521 ;; Defined at:
  2522 ;;		line 47 in file "LCD.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;		None
  2527 ;; Return value:  Size  Location     Type
  2528 ;;		None               void
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, status,0, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;Total ram usage:        0 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    4
  2543 ;; This function calls:
  2544 ;;		_LCDCommand
  2545 ;;		_longDelay
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text15
  2552  0018CE                     __ptext15:
  2553                           	opt stack 0
  2554  0018CE                     _LCDClear:
  2555                           	opt stack 26
  2556                           
  2557                           ;LCD.c: 48: LCDCommand(0b00000001);
  2558                           
  2559                           ;incstack = 0
  2560  0018CE  0E01               	movlw	1
  2561  0018D0  EC2C  F00C         	call	_LCDCommand
  2562                           
  2563                           ;LCD.c: 49: longDelay();
  2564  0018D4  EC4B  F00C         	call	_longDelay	;wreg free
  2565  0018D8  0012               	return		;funcret
  2566  0018DA                     __end_of_LCDClear:
  2567                           	opt stack 0
  2568                           tosu	equ	0xFFF
  2569                           tosh	equ	0xFFE
  2570                           tosl	equ	0xFFD
  2571                           pclath	equ	0xFFA
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           indf0	equ	0xFEF
  2579                           postinc0	equ	0xFEE
  2580                           fsr0h	equ	0xFEA
  2581                           fsr0l	equ	0xFE9
  2582                           wreg	equ	0xFE8
  2583                           indf2	equ	0xFDF
  2584                           postinc2	equ	0xFDE
  2585                           postdec2	equ	0xFDD
  2586                           fsr2h	equ	0xFDA
  2587                           fsr2l	equ	0xFD9
  2588                           status	equ	0xFD8
  2589                           
  2590 ;; *************** function _longDelay *****************
  2591 ;; Defined at:
  2592 ;;		line 241 in file "LCD.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;		None               void
  2599 ;; Registers used:
  2600 ;;		wreg
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;Total ram usage:        1 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    1
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_LCDClear
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text16
  2621  001896                     __ptext16:
  2622                           	opt stack 0
  2623  001896                     _longDelay:
  2624                           	opt stack 28
  2625                           
  2626                           ;LCD.c: 243: _delay((unsigned long)((1660)*(40000000L/4000000.0)));
  2627                           
  2628                           ;incstack = 0
  2629  001896  0E16               	movlw	22
  2630  001898  6E10               	movwf	??_longDelay& (0+255),c
  2631  00189A  0E8E               	movlw	142
  2632  00189C                     u2007:
  2633  00189C  2EE8               	decfsz	wreg,f,c
  2634  00189E  D7FE               	goto	u2007
  2635  0018A0  2E10               	decfsz	??_longDelay& (0+255),f,c
  2636  0018A2  D7FC               	goto	u2007
  2637  0018A4  0012               	return		;funcret
  2638  0018A6                     __end_of_longDelay:
  2639                           	opt stack 0
  2640                           tosu	equ	0xFFF
  2641                           tosh	equ	0xFFE
  2642                           tosl	equ	0xFFD
  2643                           pclath	equ	0xFFA
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           prodh	equ	0xFF4
  2649                           prodl	equ	0xFF3
  2650                           indf0	equ	0xFEF
  2651                           postinc0	equ	0xFEE
  2652                           fsr0h	equ	0xFEA
  2653                           fsr0l	equ	0xFE9
  2654                           wreg	equ	0xFE8
  2655                           indf2	equ	0xFDF
  2656                           postinc2	equ	0xFDE
  2657                           postdec2	equ	0xFDD
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _LCDCommand *****************
  2663 ;; Defined at:
  2664 ;;		line 187 in file "LCD.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  command         1    wreg     unsigned char 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  command         1   20[COMRAM] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;		None               void
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;Total ram usage:        1 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    3
  2685 ;; This function calls:
  2686 ;;		_LCDWriteByte
  2687 ;;		_shortDelay
  2688 ;;		_wait
  2689 ;; This function is called by:
  2690 ;;		_LCDClear
  2691 ;;		_LCDSetPos
  2692 ;;		_LCDLoadCustomChar
  2693 ;;		_LCDScroll
  2694 ;;		_LCDDisplay
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text17
  2699  001858                     __ptext17:
  2700                           	opt stack 0
  2701  001858                     _LCDCommand:
  2702                           	opt stack 25
  2703                           
  2704                           ;incstack = 0
  2705                           ;LCDCommand@command stored from wreg
  2706  001858  6E15               	movwf	LCDCommand@command,c
  2707                           
  2708                           ;LCD.c: 188: wait();
  2709  00185A  EC72  F00C         	call	_wait	;wreg free
  2710                           
  2711                           ;LCD.c: 189: LCDWriteByte(command, 0);
  2712  00185E  0E00               	movlw	0
  2713  001860  6E12               	movwf	LCDWriteByte@rs,c
  2714  001862  5015               	movf	LCDCommand@command,w,c
  2715  001864  EC82  F00B         	call	_LCDWriteByte
  2716                           
  2717                           ;LCD.c: 190: shortDelay();
  2718  001868  EC6D  F00C         	call	_shortDelay	;wreg free
  2719  00186C  0012               	return		;funcret
  2720  00186E                     __end_of_LCDCommand:
  2721                           	opt stack 0
  2722                           tosu	equ	0xFFF
  2723                           tosh	equ	0xFFE
  2724                           tosl	equ	0xFFD
  2725                           pclath	equ	0xFFA
  2726                           tblptru	equ	0xFF8
  2727                           tblptrh	equ	0xFF7
  2728                           tblptrl	equ	0xFF6
  2729                           tablat	equ	0xFF5
  2730                           prodh	equ	0xFF4
  2731                           prodl	equ	0xFF3
  2732                           indf0	equ	0xFEF
  2733                           postinc0	equ	0xFEE
  2734                           fsr0h	equ	0xFEA
  2735                           fsr0l	equ	0xFE9
  2736                           wreg	equ	0xFE8
  2737                           indf2	equ	0xFDF
  2738                           postinc2	equ	0xFDE
  2739                           postdec2	equ	0xFDD
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _wait *****************
  2745 ;; Defined at:
  2746 ;;		line 235 in file "LCD.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;		None               void
  2753 ;; Registers used:
  2754 ;;		None
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    1
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_LCDCommand
  2771 ;;		_LCDWriteData
  2772 ;;		_LCDReadData
  2773 ;;		_LCDGetAC
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text18
  2778  0018E4                     __ptext18:
  2779                           	opt stack 0
  2780  0018E4                     _wait:
  2781                           	opt stack 27
  2782                           
  2783                           ;incstack = 0
  2784  0018E4  0012               	return		;funcret
  2785  0018E6                     __end_of_wait:
  2786                           	opt stack 0
  2787                           tosu	equ	0xFFF
  2788                           tosh	equ	0xFFE
  2789                           tosl	equ	0xFFD
  2790                           pclath	equ	0xFFA
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           prodh	equ	0xFF4
  2796                           prodl	equ	0xFF3
  2797                           indf0	equ	0xFEF
  2798                           postinc0	equ	0xFEE
  2799                           fsr0h	equ	0xFEA
  2800                           fsr0l	equ	0xFE9
  2801                           wreg	equ	0xFE8
  2802                           indf2	equ	0xFDF
  2803                           postinc2	equ	0xFDE
  2804                           postdec2	equ	0xFDD
  2805                           fsr2h	equ	0xFDA
  2806                           fsr2l	equ	0xFD9
  2807                           status	equ	0xFD8
  2808                           
  2809 ;; *************** function _shortDelay *****************
  2810 ;; Defined at:
  2811 ;;		line 247 in file "LCD.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;		None               void
  2818 ;; Registers used:
  2819 ;;		wreg
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;Total ram usage:        0 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    1
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_LCDCommand
  2836 ;;		_LCDWriteData
  2837 ;;		_LCDReadData
  2838 ;;		_LCDGetAC
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           	psect	text19
  2843  0018DA                     __ptext19:
  2844                           	opt stack 0
  2845  0018DA                     _shortDelay:
  2846                           	opt stack 27
  2847                           
  2848                           ;LCD.c: 249: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2849                           
  2850                           ;incstack = 0
  2851  0018DA  0E85               	movlw	133
  2852  0018DC                     u2017:
  2853  0018DC  2EE8               	decfsz	wreg,f,c
  2854  0018DE  D7FE               	goto	u2017
  2855  0018E0  F000               	nop	
  2856  0018E2  0012               	return		;funcret
  2857  0018E4                     __end_of_shortDelay:
  2858                           	opt stack 0
  2859                           tosu	equ	0xFFF
  2860                           tosh	equ	0xFFE
  2861                           tosl	equ	0xFFD
  2862                           pclath	equ	0xFFA
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           indf0	equ	0xFEF
  2870                           postinc0	equ	0xFEE
  2871                           fsr0h	equ	0xFEA
  2872                           fsr0l	equ	0xFE9
  2873                           wreg	equ	0xFE8
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function _LCDWriteByte *****************
  2882 ;; Defined at:
  2883 ;;		line 260 in file "LCD.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  c               1    wreg     unsigned char 
  2886 ;;  rs              1   17[COMRAM] unsigned char 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  c               1   18[COMRAM] unsigned char 
  2889 ;;  comFlags        1   19[COMRAM] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;		None               void
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2899 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;Total ram usage:        3 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    2
  2906 ;; This function calls:
  2907 ;;		_WriteRegister
  2908 ;; This function is called by:
  2909 ;;		_LCDCommand
  2910 ;;		_LCDInitCommand
  2911 ;;		_LCDWriteData
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text20
  2916  001704                     __ptext20:
  2917                           	opt stack 0
  2918  001704                     _LCDWriteByte:
  2919                           	opt stack 26
  2920                           
  2921                           ;incstack = 0
  2922                           ;LCDWriteByte@c stored from wreg
  2923  001704  6E13               	movwf	LCDWriteByte@c,c
  2924                           
  2925                           ;LCD.c: 261: unsigned char comFlags = 0;
  2926  001706  0E00               	movlw	0
  2927  001708  6E14               	movwf	LCDWriteByte@comFlags,c
  2928                           
  2929                           ;LCD.c: 262: if (rs) {
  2930  00170A  5012               	movf	LCDWriteByte@rs,w,c
  2931  00170C  B4D8               	btfsc	status,2,c
  2932  00170E  D002               	goto	l1953
  2933                           
  2934                           ;LCD.c: 263: comFlags = 0b10000000;
  2935  001710  0E80               	movlw	128
  2936  001712  6E14               	movwf	LCDWriteByte@comFlags,c
  2937  001714                     l1953:
  2938                           
  2939                           ;LCD.c: 264: }
  2940                           ;LCD.c: 265: WriteRegister(0x12, comFlags);
  2941  001714  C014  F010         	movff	LCDWriteByte@comFlags,WriteRegister@b
  2942  001718  0E12               	movlw	18
  2943  00171A  ECEE  F00B         	call	_WriteRegister
  2944                           
  2945                           ;LCD.c: 266: WriteRegister(0x13, c);
  2946  00171E  C013  F010         	movff	LCDWriteByte@c,WriteRegister@b
  2947  001722  0E13               	movlw	19
  2948  001724  ECEE  F00B         	call	_WriteRegister
  2949                           
  2950                           ;LCD.c: 267: WriteRegister(0x12, comFlags | 0b01000000);
  2951  001728  5014               	movf	LCDWriteByte@comFlags,w,c
  2952  00172A  0940               	iorlw	64
  2953  00172C  6E10               	movwf	WriteRegister@b,c
  2954  00172E  0E12               	movlw	18
  2955  001730  ECEE  F00B         	call	_WriteRegister
  2956                           
  2957                           ;LCD.c: 268: WriteRegister(0x12, comFlags);
  2958  001734  C014  F010         	movff	LCDWriteByte@comFlags,WriteRegister@b
  2959  001738  0E12               	movlw	18
  2960  00173A  ECEE  F00B         	call	_WriteRegister
  2961  00173E  0012               	return		;funcret
  2962  001740                     __end_of_LCDWriteByte:
  2963                           	opt stack 0
  2964                           tosu	equ	0xFFF
  2965                           tosh	equ	0xFFE
  2966                           tosl	equ	0xFFD
  2967                           pclath	equ	0xFFA
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           indf0	equ	0xFEF
  2975                           postinc0	equ	0xFEE
  2976                           fsr0h	equ	0xFEA
  2977                           fsr0l	equ	0xFE9
  2978                           wreg	equ	0xFE8
  2979                           indf2	equ	0xFDF
  2980                           postinc2	equ	0xFDE
  2981                           postdec2	equ	0xFDD
  2982                           fsr2h	equ	0xFDA
  2983                           fsr2l	equ	0xFD9
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _WriteRegister *****************
  2987 ;; Defined at:
  2988 ;;		line 320 in file "LCD.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  reg             1    wreg     unsigned char 
  2991 ;;  b               1   15[COMRAM] unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  reg             1   16[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;		None               void
  2996 ;; Registers used:
  2997 ;;		wreg, status,2
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        2 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    1
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_LCDWriteByte
  3014 ;;		_LCDInitPort
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text21
  3019  0017DC                     __ptext21:
  3020                           	opt stack 0
  3021  0017DC                     _WriteRegister:
  3022                           	opt stack 26
  3023                           
  3024                           ;incstack = 0
  3025                           ;WriteRegister@reg stored from wreg
  3026  0017DC  6E11               	movwf	WriteRegister@reg,c
  3027                           
  3028                           ;LCD.c: 321: LATAbits.LATA2 = 0;
  3029  0017DE  9489               	bcf	3977,2,c	;volatile
  3030                           
  3031                           ;LCD.c: 322: SSPBUF = 0x40;
  3032  0017E0  0E40               	movlw	64
  3033  0017E2  6EC9               	movwf	4041,c	;volatile
  3034  0017E4                     l166:
  3035  0017E4  A69E               	btfss	3998,3,c	;volatile
  3036  0017E6  D7FE               	goto	l166
  3037                           
  3038                           ;LCD.c: 324: SSPIF = 0;
  3039  0017E8  969E               	bcf	3998,3,c	;volatile
  3040                           
  3041                           ;LCD.c: 325: SSPBUF = reg;
  3042  0017EA  C011  FFC9         	movff	WriteRegister@reg,4041	;volatile
  3043  0017EE                     l169:
  3044  0017EE  A69E               	btfss	3998,3,c	;volatile
  3045  0017F0  D7FE               	goto	l169
  3046                           
  3047                           ;LCD.c: 327: SSPIF = 0;
  3048  0017F2  969E               	bcf	3998,3,c	;volatile
  3049                           
  3050                           ;LCD.c: 328: SSPBUF = b;
  3051  0017F4  C010  FFC9         	movff	WriteRegister@b,4041	;volatile
  3052  0017F8                     l172:
  3053  0017F8  A69E               	btfss	3998,3,c	;volatile
  3054  0017FA  D7FE               	goto	l172
  3055                           
  3056                           ;LCD.c: 330: SSPIF = 0;
  3057  0017FC  969E               	bcf	3998,3,c	;volatile
  3058                           
  3059                           ;LCD.c: 331: LATAbits.LATA2 = 1;
  3060  0017FE  8489               	bsf	3977,2,c	;volatile
  3061  001800  0012               	return		;funcret
  3062  001802                     __end_of_WriteRegister:
  3063                           	opt stack 0
  3064                           tosu	equ	0xFFF
  3065                           tosh	equ	0xFFE
  3066                           tosl	equ	0xFFD
  3067                           pclath	equ	0xFFA
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           prodh	equ	0xFF4
  3073                           prodl	equ	0xFF3
  3074                           indf0	equ	0xFEF
  3075                           postinc0	equ	0xFEE
  3076                           fsr0h	equ	0xFEA
  3077                           fsr0l	equ	0xFE9
  3078                           wreg	equ	0xFE8
  3079                           indf2	equ	0xFDF
  3080                           postinc2	equ	0xFDE
  3081                           postdec2	equ	0xFDD
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _InitPins *****************
  3087 ;; Defined at:
  3088 ;;		line 71 in file "Lab0.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;		None
  3093 ;; Return value:  Size  Location     Type
  3094 ;;		None               void
  3095 ;; Registers used:
  3096 ;;		wreg, status,2
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;Total ram usage:        0 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    1
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_main
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text22
  3117  00186E                     __ptext22:
  3118                           	opt stack 0
  3119  00186E                     _InitPins:
  3120                           	opt stack 29
  3121                           
  3122                           ;Lab0.c: 72: LATD = 0;
  3123                           
  3124                           ;incstack = 0
  3125  00186E  0E00               	movlw	0
  3126  001870  6E8C               	movwf	3980,c	;volatile
  3127                           
  3128                           ;Lab0.c: 73: TRISD = 0;
  3129  001872  0E00               	movlw	0
  3130  001874  6E95               	movwf	3989,c	;volatile
  3131                           
  3132                           ;Lab0.c: 75: TRISB = 0b00000001;
  3133  001876  0E01               	movlw	1
  3134  001878  6E93               	movwf	3987,c	;volatile
  3135                           
  3136                           ;Lab0.c: 76: RBPU = 0;
  3137  00187A  9EF1               	bcf	intcon2,7,c	;volatile
  3138                           
  3139                           ;Lab0.c: 79: TRISC = 0b10000000;
  3140  00187C  0E80               	movlw	128
  3141  00187E  6E94               	movwf	3988,c	;volatile
  3142  001880  0012               	return		;funcret
  3143  001882                     __end_of_InitPins:
  3144                           	opt stack 0
  3145                           tosu	equ	0xFFF
  3146                           tosh	equ	0xFFE
  3147                           tosl	equ	0xFFD
  3148                           pclath	equ	0xFFA
  3149                           tblptru	equ	0xFF8
  3150                           tblptrh	equ	0xFF7
  3151                           tblptrl	equ	0xFF6
  3152                           tablat	equ	0xFF5
  3153                           prodh	equ	0xFF4
  3154                           prodl	equ	0xFF3
  3155                           intcon2	equ	0xFF1
  3156                           indf0	equ	0xFEF
  3157                           postinc0	equ	0xFEE
  3158                           fsr0h	equ	0xFEA
  3159                           fsr0l	equ	0xFE9
  3160                           wreg	equ	0xFE8
  3161                           indf2	equ	0xFDF
  3162                           postinc2	equ	0xFDE
  3163                           postdec2	equ	0xFDD
  3164                           fsr2h	equ	0xFDA
  3165                           fsr2l	equ	0xFD9
  3166                           status	equ	0xFD8
  3167                           
  3168 ;; *************** function _ConfigPeriph *****************
  3169 ;; Defined at:
  3170 ;;		line 99 in file "Lab0.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;		None
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;		None
  3175 ;; Return value:  Size  Location     Type
  3176 ;;		None               void
  3177 ;; Registers used:
  3178 ;;		wreg, status,2
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;Total ram usage:        0 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:    1
  3191 ;; This function calls:
  3192 ;;		Nothing
  3193 ;; This function is called by:
  3194 ;;		_main
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text23
  3199  001882                     __ptext23:
  3200                           	opt stack 0
  3201  001882                     _ConfigPeriph:
  3202                           	opt stack 29
  3203                           
  3204                           ;Lab0.c: 104: SPBRG1 = 1040;
  3205                           
  3206                           ;incstack = 0
  3207  001882  0E10               	movlw	16
  3208  001884  6EB0               	movwf	4016,c	;volatile
  3209                           
  3210                           ;Lab0.c: 105: SPBRGH1 = 1040 >> 8;
  3211  001886  0E04               	movlw	4
  3212  001888  6E7F               	movwf	3967,c	;volatile
  3213                           
  3214                           ;Lab0.c: 106: TXSTA1bits.BRGH = 1;
  3215  00188A  84AD               	bsf	4013,2,c	;volatile
  3216                           
  3217                           ;Lab0.c: 107: BAUDCON1bits.BRG16 = 1;
  3218  00188C  867E               	bsf	3966,3,c	;volatile
  3219                           
  3220                           ;Lab0.c: 108: TXSTA1bits.SYNC = 0;
  3221  00188E  98AD               	bcf	4013,4,c	;volatile
  3222                           
  3223                           ;Lab0.c: 109: RCSTA1bits.SPEN = 1;
  3224  001890  8EAC               	bsf	4012,7,c	;volatile
  3225                           
  3226                           ;Lab0.c: 110: TXSTA1bits.TXEN = 1;
  3227  001892  8AAD               	bsf	4013,5,c	;volatile
  3228  001894  0012               	return		;funcret
  3229  001896                     __end_of_ConfigPeriph:
  3230                           	opt stack 0
  3231                           tosu	equ	0xFFF
  3232                           tosh	equ	0xFFE
  3233                           tosl	equ	0xFFD
  3234                           pclath	equ	0xFFA
  3235                           tblptru	equ	0xFF8
  3236                           tblptrh	equ	0xFF7
  3237                           tblptrl	equ	0xFF6
  3238                           tablat	equ	0xFF5
  3239                           prodh	equ	0xFF4
  3240                           prodl	equ	0xFF3
  3241                           intcon2	equ	0xFF1
  3242                           indf0	equ	0xFEF
  3243                           postinc0	equ	0xFEE
  3244                           fsr0h	equ	0xFEA
  3245                           fsr0l	equ	0xFE9
  3246                           wreg	equ	0xFE8
  3247                           indf2	equ	0xFDF
  3248                           postinc2	equ	0xFDE
  3249                           postdec2	equ	0xFDD
  3250                           fsr2h	equ	0xFDA
  3251                           fsr2l	equ	0xFD9
  3252                           status	equ	0xFD8
  3253                           
  3254 ;; *************** function _ConfigInterrupts *****************
  3255 ;; Defined at:
  3256 ;;		line 83 in file "Lab0.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;		None
  3261 ;; Return value:  Size  Location     Type
  3262 ;;		None               void
  3263 ;; Registers used:
  3264 ;;		None
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;Total ram usage:        0 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    1
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_main
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text24
  3285  0018B4                     __ptext24:
  3286                           	opt stack 0
  3287  0018B4                     _ConfigInterrupts:
  3288                           	opt stack 29
  3289                           
  3290                           ;Lab0.c: 85: RCONbits.IPEN = 0;
  3291                           
  3292                           ;incstack = 0
  3293  0018B4  9ED0               	bcf	4048,7,c	;volatile
  3294                           
  3295                           ;Lab0.c: 90: INTCON2bits.INTEDG0 = 0;
  3296  0018B6  9CF1               	bcf	intcon2,6,c	;volatile
  3297                           
  3298                           ;Lab0.c: 91: INTCONbits.INT0IE = 1;
  3299  0018B8  88F2               	bsf	intcon,4,c	;volatile
  3300                           
  3301                           ;Lab0.c: 93: INTCONbits.INT0IF = 0;
  3302  0018BA  92F2               	bcf	intcon,1,c	;volatile
  3303                           
  3304                           ;Lab0.c: 94: buttonState = 0xff;
  3305  0018BC  683B               	setf	_buttonState,c	;volatile
  3306                           
  3307                           ;Lab0.c: 96: INTCONbits.GIE = 1;
  3308  0018BE  8EF2               	bsf	intcon,7,c	;volatile
  3309  0018C0  0012               	return		;funcret
  3310  0018C2                     __end_of_ConfigInterrupts:
  3311                           	opt stack 0
  3312                           tosu	equ	0xFFF
  3313                           tosh	equ	0xFFE
  3314                           tosl	equ	0xFFD
  3315                           pclath	equ	0xFFA
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           prodh	equ	0xFF4
  3321                           prodl	equ	0xFF3
  3322                           intcon	equ	0xFF2
  3323                           intcon2	equ	0xFF1
  3324                           indf0	equ	0xFEF
  3325                           postinc0	equ	0xFEE
  3326                           fsr0h	equ	0xFEA
  3327                           fsr0l	equ	0xFE9
  3328                           wreg	equ	0xFE8
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _HighIsr *****************
  3337 ;; Defined at:
  3338 ;;		line 113 in file "Lab0.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;		None
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;		None               void
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;Total ram usage:       15 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		Interrupt level 2
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	intcode
  3366  000008                     __pintcode:
  3367                           	opt stack 0
  3368  000008                     _HighIsr:
  3369                           	opt stack 25
  3370                           
  3371                           ;incstack = 0
  3372  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3373  00000A  CFFA F002          	movff	pclath,??_HighIsr+1
  3374  00000E  CFFB F003          	movff	pclatu,??_HighIsr+2
  3375  000012  CFE9 F004          	movff	fsr0l,??_HighIsr+3
  3376  000016  CFEA F005          	movff	fsr0h,??_HighIsr+4
  3377  00001A  CFE1 F006          	movff	fsr1l,??_HighIsr+5
  3378  00001E  CFE2 F007          	movff	fsr1h,??_HighIsr+6
  3379  000022  CFD9 F008          	movff	fsr2l,??_HighIsr+7
  3380  000026  CFDA F009          	movff	fsr2h,??_HighIsr+8
  3381  00002A  CFF3 F00A          	movff	prodl,??_HighIsr+9
  3382  00002E  CFF4 F00B          	movff	prodh,??_HighIsr+10
  3383  000032  CFF6 F00C          	movff	tblptrl,??_HighIsr+11
  3384  000036  CFF7 F00D          	movff	tblptrh,??_HighIsr+12
  3385  00003A  CFF8 F00E          	movff	tblptru,??_HighIsr+13
  3386  00003E  CFF5 F00F          	movff	tablat,??_HighIsr+14
  3387                           
  3388                           ;Lab0.c: 115: if (INT0IF == 1) {
  3389  000042  A2F2               	btfss	intcon,1,c	;volatile
  3390  000044  D011               	goto	i2l270
  3391                           
  3392                           ;Lab0.c: 117: buttonState = ~buttonState;
  3393  000046  1E3B               	comf	_buttonState,f,c	;volatile
  3394                           
  3395                           ;Lab0.c: 118: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
  3396  000048  ACF1               	btfss	intcon2,6,c	;volatile
  3397  00004A  D002               	goto	i2u66_40
  3398  00004C  0E01               	movlw	1
  3399  00004E  D001               	goto	i2u66_46
  3400  000050                     i2u66_40:
  3401  000050  0E00               	movlw	0
  3402  000052                     i2u66_46:
  3403  000052  0AFF               	xorlw	255
  3404  000054  6E01               	movwf	??_HighIsr& (0+255),c
  3405  000056  3A01               	swapf	??_HighIsr,f,c
  3406  000058  4601               	rlncf	??_HighIsr,f,c
  3407  00005A  4601               	rlncf	??_HighIsr,f,c
  3408  00005C  50F1               	movf	intcon2,w,c	;volatile
  3409  00005E  1801               	xorwf	??_HighIsr,w,c
  3410  000060  0BBF               	andlw	-65
  3411  000062  1801               	xorwf	??_HighIsr,w,c
  3412  000064  6EF1               	movwf	intcon2,c	;volatile
  3413                           
  3414                           ;Lab0.c: 119: INT0IF = 0;
  3415  000066  92F2               	bcf	intcon,1,c	;volatile
  3416  000068                     i2l270:
  3417  000068  C00F  FFF5         	movff	??_HighIsr+14,tablat
  3418  00006C  C00E  FFF8         	movff	??_HighIsr+13,tblptru
  3419  000070  C00D  FFF7         	movff	??_HighIsr+12,tblptrh
  3420  000074  C00C  FFF6         	movff	??_HighIsr+11,tblptrl
  3421  000078  C00B  FFF4         	movff	??_HighIsr+10,prodh
  3422  00007C  C00A  FFF3         	movff	??_HighIsr+9,prodl
  3423  000080  C009  FFDA         	movff	??_HighIsr+8,fsr2h
  3424  000084  C008  FFD9         	movff	??_HighIsr+7,fsr2l
  3425  000088  C007  FFE2         	movff	??_HighIsr+6,fsr1h
  3426  00008C  C006  FFE1         	movff	??_HighIsr+5,fsr1l
  3427  000090  C005  FFEA         	movff	??_HighIsr+4,fsr0h
  3428  000094  C004  FFE9         	movff	??_HighIsr+3,fsr0l
  3429  000098  C003  FFFB         	movff	??_HighIsr+2,pclatu
  3430  00009C  C002  FFFA         	movff	??_HighIsr+1,pclath
  3431  0000A0  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3432  0000A2  0011               	retfie		f
  3433  0000A4                     __end_of_HighIsr:
  3434                           	opt stack 0
  3435                           tosu	equ	0xFFF
  3436                           tosh	equ	0xFFE
  3437                           tosl	equ	0xFFD
  3438                           pclatu	equ	0xFFB
  3439                           pclath	equ	0xFFA
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           intcon	equ	0xFF2
  3447                           intcon2	equ	0xFF1
  3448                           indf0	equ	0xFEF
  3449                           postinc0	equ	0xFEE
  3450                           fsr0h	equ	0xFEA
  3451                           fsr0l	equ	0xFE9
  3452                           wreg	equ	0xFE8
  3453                           fsr1h	equ	0xFE2
  3454                           fsr1l	equ	0xFE1
  3455                           indf2	equ	0xFDF
  3456                           postinc2	equ	0xFDE
  3457                           postdec2	equ	0xFDD
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8
  3461                           tosu	equ	0xFFF
  3462                           tosh	equ	0xFFE
  3463                           tosl	equ	0xFFD
  3464                           pclatu	equ	0xFFB
  3465                           pclath	equ	0xFFA
  3466                           tblptru	equ	0xFF8
  3467                           tblptrh	equ	0xFF7
  3468                           tblptrl	equ	0xFF6
  3469                           tablat	equ	0xFF5
  3470                           prodh	equ	0xFF4
  3471                           prodl	equ	0xFF3
  3472                           intcon	equ	0xFF2
  3473                           intcon2	equ	0xFF1
  3474                           indf0	equ	0xFEF
  3475                           postinc0	equ	0xFEE
  3476                           fsr0h	equ	0xFEA
  3477                           fsr0l	equ	0xFE9
  3478                           wreg	equ	0xFE8
  3479                           fsr1h	equ	0xFE2
  3480                           fsr1l	equ	0xFE1
  3481                           indf2	equ	0xFDF
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488                           	psect	rparam
  3489  0000                     tosu	equ	0xFFF
  3490                           tosh	equ	0xFFE
  3491                           tosl	equ	0xFFD
  3492                           pclatu	equ	0xFFB
  3493                           pclath	equ	0xFFA
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           intcon	equ	0xFF2
  3501                           intcon2	equ	0xFF1
  3502                           indf0	equ	0xFEF
  3503                           postinc0	equ	0xFEE
  3504                           fsr0h	equ	0xFEA
  3505                           fsr0l	equ	0xFE9
  3506                           wreg	equ	0xFE8
  3507                           fsr1h	equ	0xFE2
  3508                           fsr1l	equ	0xFE1
  3509                           indf2	equ	0xFDF
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516                           	psect	temp
  3517  00004D                     btemp:
  3518                           	opt stack 0
  3519  00004D                     	ds	1
  3520  0000                     int$flags	set	btemp
  3521                           tosu	equ	0xFFF
  3522                           tosh	equ	0xFFE
  3523                           tosl	equ	0xFFD
  3524                           pclatu	equ	0xFFB
  3525                           pclath	equ	0xFFA
  3526                           tblptru	equ	0xFF8
  3527                           tblptrh	equ	0xFF7
  3528                           tblptrl	equ	0xFF6
  3529                           tablat	equ	0xFF5
  3530                           prodh	equ	0xFF4
  3531                           prodl	equ	0xFF3
  3532                           intcon	equ	0xFF2
  3533                           intcon2	equ	0xFF1
  3534                           indf0	equ	0xFEF
  3535                           postinc0	equ	0xFEE
  3536                           fsr0h	equ	0xFEA
  3537                           fsr0l	equ	0xFE9
  3538                           wreg	equ	0xFE8
  3539                           fsr1h	equ	0xFE2
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8


Data Sizes:
    Strings     57
    Constant    10
    Data        0
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      76
    BANK0           160      6      40
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_4(CODE[11]), STR_2(CODE[9]), STR_1(CODE[14]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 17
		 -> line1str(BANK0[17]), line2str(COMRAM[17]), 

    pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), line1str(BANK0[17]), line2str(COMRAM[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[12]), STR_3(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), line1str(BANK0[17]), line2str(COMRAM[17]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_5(CODE[12]), STR_4(CODE[11]), STR_3(CODE[4]), STR_2(CODE[9]), 
		 -> STR_1(CODE[14]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), NULL(NULL[0]), STR_6(CODE[7]), 
		 -> line1str(BANK0[17]), line2str(COMRAM[17]), 

    S1244__prbuf$func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Absolute function(), putch(), 

    S1244__prbuf$ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), line1str(BANK0[17]), line2str(COMRAM[17]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), line1str(BANK0[17]), line2str(COMRAM[17]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 6
		 -> sprintf@pb(COMRAM[5]), printf@pb(COMRAM[5]), 

    LCDWriteLine@str	PTR const unsigned char  size(2) Largest target is 17
		 -> line1str(BANK0[17]), line2str(COMRAM[17]), LCDScroll@str(COMRAM[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _LCDWriteLine->_LCDSetPos
    _LCDInit->_LCDInitCommand
    _LCDInitPort->_WriteRegister
    _LCDInitCommand->_LCDWriteByte
    _LCDClearLine->_LCDSetPos
    _LCDWriteData->_LCDWriteByte
    _LCDSetPos->_LCDCommand
    _LCDClear->_LCDCommand
    _LCDCommand->_LCDWriteByte
    _LCDWriteByte->_WriteRegister

Critical Paths under _HighIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   16073
                                              0 BANK0      6     6      0
                   _ConfigInterrupts
                       _ConfigPeriph
                           _InitPins
                           _LCDClear
                       _LCDClearLine
                            _LCDInit
                       _LCDWriteLine
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             13     7      6    3302
                                             43 COMRAM    13     7      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _printf                                              11     7      4    2918
                                             43 COMRAM    11     7      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             22    16      6    2556
                                             27 COMRAM    16    10      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteLine                                         4     1      3    3918
                                             28 COMRAM     4     1      3
                          _LCDSetPos
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0    1659
                                             21 COMRAM     2     2      0
                     _LCDInitCommand
                        _LCDInitPort
 ---------------------------------------------------------------------------------
 (2) _LCDInitPort                                          0     0      0     601
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _LCDInitCommand                                       1     1      0    1024
                                             20 COMRAM     1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDClearLine                                         2     2      0    3113
                                             28 COMRAM     2     2      0
                          _LCDSetPos
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (2) _LCDWriteData                                         1     1      0    1024
                                             20 COMRAM     1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (2) _LCDSetPos                                            7     3      4    1990
                                             21 COMRAM     7     3      4
                         _LCDCommand
                      _calculateBase
 ---------------------------------------------------------------------------------
 (3) _calculateBase                                        2     2      0     130
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             0     0      0    1024
                         _LCDCommand
                          _longDelay
 ---------------------------------------------------------------------------------
 (2) _longDelay                                            1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCDCommand                                           1     1      0    1024
                                             20 COMRAM     1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (3) _wait                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _shortDelay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCDWriteByte                                         3     2      1     993
                                             17 COMRAM     3     2      1
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _WriteRegister                                        2     1      1     601
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigPeriph                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighIsr                                             15    15      0       0
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigInterrupts
   _ConfigPeriph
   _InitPins
   _LCDClear
     _LCDCommand
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
     _longDelay
   _LCDClearLine
     _LCDSetPos
       _LCDCommand
         _LCDWriteByte
           _WriteRegister
         _shortDelay
         _wait
       _calculateBase
     _LCDWriteData
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
   _LCDInit
     _LCDInitCommand
       _LCDWriteByte
         _WriteRegister
     _LCDInitPort
       _WriteRegister
   _LCDWriteLine
     _LCDSetPos
       _LCDCommand
         _LCDWriteByte
           _WriteRegister
         _shortDelay
         _wait
       _calculateBase
     _LCDWriteData
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *

 _HighIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0       0      37        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6      28       5       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4C       1       80.9%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74      12        0.0%
DATA                 0      0      74       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Jan 23 18:10:01 2017

             ?_LCDInitPort 0001                _SSPSTATbits 000FC7                         l85 16C0  
                      l172 17F8                        l166 17E4                        l246 13EA  
                      l169 17EE                        l273 18C4                        l718 162C  
                      l728 16FA              LCDClearLine@c 001D            ?_LCDInitCommand 0001  
                      tosl 000FFD                        wreg 000FE8                 _TXSTA1bits 000FAD  
           ??_LCDClearLine 001D            __end_of_LCDInit 15E4                       l2001 1622  
                     l2011 16D8                       l2013 16DC                       l2103 123C  
                     l2017 16F0                       l2009 16D0                       l2105 1240  
                     l2051 1694                       l2211 17A4                       l2123 12BA  
                     l2053 16A4                       l2205 1788                       l2117 1272  
                     l2141 13A0                       l2207 179C                       l2135 136E  
                     l2127 12E4                       l2071 10BE                       l2143 13BC  
                     l2129 12EA                       l2081 1154                       l2065 108C  
                     l2401 1426                       l2139 1398                       l2083 115A  
                     l2059 1048                       l2403 143A                       l2077 10F8  
                     l2093 11D2                       l2069 10B8                       l2421 14C0  
                     l2191 1556                       l2095 1204                       l2193 156A  
                     l2177 1504                       l2089 11A8                       l2425 14E2  
                     l2409 1464                       l2195 1578                       l2187 1536  
                     l2179 1518                       l2427 14F2                       l2197 157C  
                     l2393 13F8                       l1953 1714                       l1973 1834  
                     l1975 183E                       l1991 1602                       l1993 1606  
                     l1989 15FA                       STR_1 100B                       STR_2 1030  
                     STR_3 1040                       STR_4 1025                       STR_5 1019  
                     STR_6 1039                       u2007 189C                       u2017 18DC  
                     _LATD 000F8C                       u1530 1152                       u1540 1194  
                     u1550 11CA                       u1528 111E                       u1537 1148  
                     u1547 118A                       u1557 11C0                       u1638 12A4  
                     u1658 1358                       u1498 1076                       u1957 159A  
                     u1967 15AA                       u1977 15B8                       u1987 15CA  
                     u1997 15DC                       _RBPU 007F8F                       _main 13C6  
                     _wait 18E4                       fsr0h 000FEA                       fsr1h 000FE2  
                     indf0 000FEF                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
                     btemp 004D                       pclat 000FFA         __size_of_LCDSetPos 0046  
                     prodh 000FF4                       prodl 000FF3                       start 00A4  
          __end_of_HighIsr 00A4               ___param_bank 000010           __end_of_LCDClear 18DA  
            ?_LCDWriteData 0001              ?_LCDWriteByte 0012              ?_LCDWriteLine 001D  
             _BAUDCON1bits 000F7E                      ?_main 0001                      ?_wait 0001  
                    _CREN1 007D64            __end_of___lwdiv 1636            __end_of___lwmod 1704  
                    i2l270 0068                      _TX1IF 007CF4            __end_of__doprnt 13C6  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _SSPIF 007CF3     __size_of_WriteRegister 0026        __size_of_LCDCommand 0016  
          __end_of_dpowers 100B                      _count 0039                      _putch 18C2  
                    pclath 000FFA                      tablat 000FF5                      status 000FD8  
          __end_of_sprintf 167C            __initialization 1802       __end_of_ConfigPeriph 1896  
             LCDSetPos@col 0018               LCDSetPos@pos 001B               LCDSetPos@row 0016  
             __end_of_main 14FC               __end_of_wait 18E6             ??_LCDWriteData 0015  
           ??_LCDWriteByte 0013             ??_LCDWriteLine 0020           __end_of_InitPins 1882  
                   ??_main 0039                     ??_wait 0010              __activetblptr 000003  
        __end_of_LCDSetPos 16C2                  ??_LCDInit 0016   __end_of_ConfigInterrupts 18C2  
                   ?_putch 0001                     _INT0IF 007F91             __CFG_WDTEN$OFF 000000  
                   _RCREG1 000FAF                     _SPBRG1 000FB0                  ??_HighIsr 0001  
                   _SSPBUF 000FC9                     _TXREG1 000FAE              _WriteRegister 17DC  
           __CFG_XINST$OFF 000000       __end_of_LCDClearLine 17AC                  ??___lwdiv 0014  
                ??___lwmod 001B                     _buffer 0060                  ??__doprnt 0022  
                   clear_0 1808                     clear_1 1814       __size_of_LCDInitPort 0030  
         LCDClearLine@line 001E               __doprnt@flag 0025                     _printf 1740  
             __doprnt@prec 0026               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                     putch@c 0010  
                ??_sprintf 0032            __CFG_FOSC$HSPLL 000000                  ?_LCDClear 0001  
               __accesstop 0060    __end_of__initialization 181A             ?_WriteRegister 0010  
            ___rparam_used 000001               ??_LCDCommand 0015           WriteRegister@reg 0011  
           __pcstackCOMRAM 0001              __end_of_putch 18CE           ??_LCDInitCommand 0015  
               __doprnt@ap 0020                 __doprnt@cp 0029                 __doprnt@pb 001C  
       __end_of_LCDCommand 186E                    ??_putch 0010       __end_of_LCDWriteData 1858  
               __pbssBANK0 0060       __end_of_LCDWriteByte 1740       __end_of_LCDWriteLine 158C  
               ??_LCDClear 0016             WriteRegister@b 0010                  ?_InitPins 0001  
    __size_of_ConfigPeriph 0014         __size_of_longDelay 0010      LCDInitCommand@command 0015  
                  ?_printf 002C     __size_of_calculateBase 001E                    _LCDInit 158C  
                  i2u66_40 0050                    i2u66_46 0052                    _SPBRGH1 000F7F  
             _ConfigPeriph 1882                    _SSPCON1 000FC6            ??_WriteRegister 0011  
               ??_InitPins 0010         LCDInit@functionSet 0017                    _HighIsr 0008  
    __size_of_LCDClearLine 0032                    __Hparam 0000                    __Lparam 0000  
                  ___lwdiv 15E4                    ___lwmod 16C2               __psmallconst 1000  
                  __doprnt 1046                    __pcinit 1802                    __ramtop 1000  
                  __ptext0 13C6                    __ptext1 1636                    __ptext2 1740  
                  __ptext3 1046                    __ptext4 18C2                    __ptext5 16C2  
                  __ptext6 15E4                    __ptext7 14FC                    __ptext8 158C  
                  __ptext9 17AC            __size_of_printf 003A                    _dpowers 1001  
        __end_of_longDelay 18A6          ?_ConfigInterrupts 0001                  _LCDSetPos 167C  
             _LCDClearLine 177A                    _sprintf 1636       end_of_initialization 181A  
       ??_ConfigInterrupts 0010              LCDWriteData@c 0015              _calculateBase 1824  
            LCDWriteByte@c 0013                    printf@f 002C                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 _shortDelay 18DA  
    __size_of_LCDWriteData 0016      __size_of_LCDWriteByte 003C      __size_of_LCDWriteLine 0090  
                _TRISAbits 000F92                  _TRISCbits 000F94                 ?_LCDSetPos 0016  
           ?_calculateBase 0001           main@currentState 0087          __size_of_LCDClear 000C  
            ??_LCDInitPort 0012               _LCDWriteData 1842               _LCDWriteByte 1704  
             _LCDWriteLine 14FC             __end_of_printf 177A        start_initialization 1802  
        __size_of_InitPins 0014                __doprnt@val 0027                ?_shortDelay 0001  
                 ??_printf 0030        __end_of_LCDInitPort 17DC                   ?_LCDInit 0001  
              __pbssCOMRAM 0039              __pcstackBANK0 0082                ??_LCDSetPos 001A  
          ??_calculateBase 0010                  __doprnt@c 002B                  __doprnt@f 001E  
                 ?_HighIsr 0001           ___lwdiv@dividend 0010                  __pintcode 0008  
                 ?___lwdiv 0010                   ?___lwmod 0017           LCDWriteLine@line 001F  
                 ?__doprnt 001C                __smallconst 1000          LCDCommand@command 0015  
         ___lwdiv@quotient 0015    __size_of_LCDInitCommand 000E                   ?_sprintf 002C  
           __size_of_putch 000C                  _longDelay 1896                   _LCDClear 18CE  
                 _LATAbits 000F89        __size_of_shortDelay 000A      __end_of_WriteRegister 1802  
                 _PIR1bits 000F9E  __size_of_ConfigInterrupts 000E                   _RCONbits 000FD0  
              _LCDInitPort 17AC           __size_of_LCDInit 0058                _INTCON2bits 000FF1  
               ?_longDelay 0001                   _InitPins 186E           __size_of_HighIsr 009C  
                 __Hrparam 0000       LCDWriteByte@comFlags 0014                   __Lrparam 0000  
         __size_of___lwdiv 0052           __size_of___lwmod 0042           __size_of__doprnt 0380  
              _buttonState 003B            ___lwdiv@divisor 0012            ___lwdiv@counter 0014  
                 __ptext10 18A6                   __ptext11 177A                   __ptext20 1704  
                 __ptext12 1842                   __ptext21 17DC                   __ptext13 167C  
                 __ptext22 186E                   __ptext14 1824                   __ptext23 1882  
                 __ptext15 18CE                   __ptext24 18B4                   __ptext16 1896  
                 __ptext17 1858                   __ptext18 18E4                   __ptext19 18DA  
          LCDWriteLine@str 001D           __size_of_sprintf 0046                   _line1str 0071  
                 _line2str 003C              __size_of_main 0136              __size_of_wait 0002  
               _LCDCommand 1858          calculateBase@base 0010          calculateBase@line 0011  
                 int$flags 004D                   main@temp 0082                   main@time 0083  
             ??_shortDelay 0010                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
            ?_ConfigPeriph 0001             _LCDInitCommand 18A6                ??_longDelay 0010  
                 intlevel2 0000                  sprintf@ap 0032                  sprintf@pb 0034  
                sprintf@wh 002C           ___lwmod@dividend 0017             LCDWriteByte@rs 0012  
               _RCSTA1bits 000FAC         __end_of_shortDelay 18E4           _ConfigInterrupts 18B4  
                 printf@ap 0030                   printf@pb 0032                   sprintf@f 002E  
          ___lwmod@divisor 0019     __end_of_LCDInitCommand 18B4            ___lwmod@counter 001B  
           ??_ConfigPeriph 0010              ?_LCDClearLine 0001      __end_of_calculateBase 1842  
              ?_LCDCommand 0001  
