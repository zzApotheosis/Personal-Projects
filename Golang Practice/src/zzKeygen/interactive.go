/*
 * Created by Steven Jennings (zzApotheosis) on 15 August, 2019.
 */

package main

import (
	"bufio"
	"fmt"
	"github.com/atotto/clipboard" // For Linux/Unix-like systems, either xclip or xsel must be installed
	"jenningsUtil"
	"os"
	"strconv"
)

type dataset struct {
	input, output, offset, fullseed, charset string
	length, shift                            int
}

func interactive() {
	// Explain program
	explain()

	// Create variables
	scanner := bufio.NewScanner(os.Stdin)
	myData := dataset{}

	// Branch for seed source
	switch chooseSeedSource(scanner) {
	case "manual":
		manualSeedInput(&myData, scanner)
	case "systime":
		randSeedInput(&myData, scanner)
	default:
		fmt.Println("waow")
		os.Exit(1) // TODO: Write better error handling
	}

	// Wait for keyboard enter before program exit
	fmt.Print("\n\nPress enter to exit program.")
	scanner.Scan()
}

func explain() {
	fmt.Print("This program generates a relatively secure set of pseudorandom")
	fmt.Print(" characters for use in cryptographical applications.\n\n")
	fmt.Print("WARNING: The level of security and cryptography generated by")
	fmt.Print(" this application is not as powerful as it could be.\n")
	fmt.Print("Use at your own risk.\n\n")
}

func chooseSeedSource(s *bufio.Scanner) string {
	var inputText string

	for inputText != "1" && inputText != "2" {
		fmt.Print("Select seed source from the following options.\n")
		fmt.Print("1. Current system time (More secure)\n")
		fmt.Print("2. Custom seed (More convenient)\n\n")
		fmt.Print("Enter choice: ")
		s.Scan()
		inputText = s.Text()
	}

	switch inputText {
	case "1":
		return "systime"
	case "2":
		return "manual"
	default:
		return ""
	}
}

func makeFullSeed(n *dataset) {
	n.fullseed = n.input + n.offset
}

func manualSeedInput(n *dataset, scanner *bufio.Scanner) {
	// Fetch input
	// "Seed"
	fmt.Print("Enter seed: ")
	scanner.Scan()
	n.input = scanner.Text()

	// Exit program if no text was entered
	if n.input == "" {
		fmt.Println("No text entered. Exiting program.")
		os.Exit(1)
	}

	// Offset
	fmt.Print("Offset: ")
	scanner.Scan()
	n.offset = scanner.Text()

	// Combining "Seed" and Offset
	makeFullSeed(n)

	// Set seed (Took forever to figure this out... i am a stoopid)
	util.SetSeedAsString(n.fullseed)

	// Get the rest of the data
	getTertiaryData(n, scanner)
}

func randSeedInput(n *dataset, scanner *bufio.Scanner) {
	// Use system time as seed
	util.SetSeedAsSysTime()

	// Get the rest of the data
	getTertiaryData(n, scanner)
}

func getTertiaryData(n *dataset, scanner *bufio.Scanner) {
	// Sequence length
	fmt.Print("Sequence length: ")
	scanner.Scan()
	temp, err := strconv.ParseInt(scanner.Text(), 10, 64)
	n.length = int(temp)
	if err != nil {
		fmt.Println("Invalid sequence length.")
		return
	}
	if n.length <= 0 { // Exit if sequence length is invalid
		fmt.Println("Sequence length cannot be non-positive.")
		return
	}

	// Shift result (Must be non-negative integer)
	fmt.Print("Shift: ")
	scanner.Scan()
	temp, err = strconv.ParseInt(scanner.Text(), 10, 64)
	n.shift = int(temp)
	if err != nil {
		fmt.Println("Invalid shift value.")
		return
	}
	if n.shift < 0 {
		fmt.Println("Shift value cannot be negative.")
		return
	}

	// Character Set (Symbols, lowercase letters, uppercase letters, numbers)
	fmt.Print("\nEnter character set as a 4-bit binary number, where each bit ")
	fmt.Print("represents a boolean value for lowercase letters, ")
	fmt.Print("uppercase letters, numbers, and symbols in that order. ")
	fmt.Print("A value of 0000 will exit the program.")
	fmt.Print("\n\nEnter desired character set: ")
	scanner.Scan()
	n.charset = scanner.Text()

	// Process data
	processData(n)
}

func processData(n *dataset) {
	// Debug
	//printAll(n)

	// Process data
	n.output = util.RandomString(n.length, n.charset, n.shift)
	fmt.Print("\nOutput: ")
	fmt.Print(n.output)
	clipboard.WriteAll(n.output) // Copy to system clipboard
	fmt.Print("\nThe output has been copied to the clipboard.")
}
