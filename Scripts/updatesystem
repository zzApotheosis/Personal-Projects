#!/usr/bin/perl -w

# Check for non-root user
die("This must be run as root user") if $> != 0;

# Imports
use strict;
use warnings;
use File::Basename;

# Global variables
my $script_name = basename($0);
my $log_data_file = "/root/$script_name.log";
my $hostname = `hostname`; chomp($hostname);

# Main method
sub main {
    # Define method variables
    my $result;
    my $exit_code = 0;

    # Update system
    $result = system("pacman -Syu --noconfirm") >> 8;

    # Check for non-successful return code
    if ($result) {
        if (time_elapsed(604300)) { # 604800 is the number of seconds in a week, minus 500 for some lenience
            create_log_file();
            notify();
        }
        $exit_code = 1;
    }

    # Done
    return $exit_code;
}

# Create a log file from systemd journal
sub create_log_file {
    # Define method variables
    my $command = "journalctl --since \"1 day ago\" --identifier \"CROND\" > $log_data_file";
    
    # Get log data from systemd journal
    system($command);
}

# Time Elapsed
sub time_elapsed {
    # Define method variables
    my $current_time;
    my $compare_time;
    my $differential;
    my $fh;
    my $compare_file = "/var/tmp/$script_name.data";
    
    # Return early if no arguments were provided
    if (!scalar(@_)) {
        return;
    }
    
    # Fetch arguments
    ($differential) = @_;
    
    # Check for non-existent file (first run)
    if (! -f $compare_file) {
        # Write data to file
        open($fh, '>', $compare_file) or print(STDERR "Unable to open $compare_file\n");
        print($fh time());
        close($fh);
        
        # Assume it's the first run, so we can return true
        print(STDOUT "$compare_file: Timestamp file created!\n");
        return 1;
    }
    
    # Get epoch to compare
    open($fh, '<', $compare_file) or print(STDERR "Unable to open $compare_file\n");
    $compare_time = <$fh>;
    chomp($compare_time);
    close($fh);
    
    # Get current time
    $current_time = time();
    
    # Compare
    if ($current_time - $compare_time > $differential) {
        # Update the compare time
        open($fh, '>', $compare_file) or print(STDERR "Unable to open $compare_file\n");
        print($fh $current_time);
        close($fh);
        
        # Return true
        return 1;
    } else {
        # Print time information
        print(STDOUT "Not enough time elapsed to send email notification!\n");
        print(STDOUT "Desired differential: $differential\n");
        print(STDOUT "Current differential: " . ($current_time - $compare_time) . "\n");
        return 0;
    }
}

# Send notification by email
sub notify {
    # Define method variables
    my $executable = "/root/sendEmail";
    my $subject;
    my $message;
    my $result;
    
    # Populate data
    $subject = "$hostname: Unable to update system";
    $message = "Login to $hostname to investigate the issue. Check the attached log for details.\n";
    $message .= "\n";
    $message .= "Visit https://archlinux.org/news for a possible community solution.";
    
    # Determine if executable exists
    if (! -f $executable) {
        print(STDERR "$executable does not exist! Notification was not sent!\n");
    }
    
    # Send notification
    $result = system("$executable --subject \"$subject\" --message \"$message\" --attachment $log_data_file") >> 8;
}

# Execute
exit main();
