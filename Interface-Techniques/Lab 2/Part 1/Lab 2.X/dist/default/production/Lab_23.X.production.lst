

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Feb 06 18:44:07 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F87J11
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           	psect	idataCOMRAM
    58  001C6A                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _str
    62  001C6A  49                 	db	73
    63  001C6B  20                 	db	32
    64  001C6C  61                 	db	97
    65  001C6D  6D                 	db	109
    66  001C6E  20                 	db	32
    67  001C6F  47                 	db	71
    68  001C70  72                 	db	114
    69  001C71  6F                 	db	111
    70  001C72  6F                 	db	111
    71  001C73  74                 	db	116
    72  001C74  00                 	db	0
    73                           
    74                           	psect	idataBANK0
    75  001C32                     __pidataBANK0:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _rdStr
    79  001C32  49                 	db	73
    80  001C33  6E                 	db	110
    81  001C34  76                 	db	118
    82  001C35  61                 	db	97
    83  001C36  6C                 	db	108
    84  001C37  69                 	db	105
    85  001C38  64                 	db	100
    86  001C39  00                 	db	0
    87  001C3A  00                 	db	0
    88  001C3B  00                 	db	0
    89  001C3C  00                 	db	0
    90  001C3D  00                 	db	0
    91  001C3E  00                 	db	0
    92  001C3F  00                 	db	0
    93  001C40  00                 	db	0
    94  001C41  00                 	db	0
    95                           
    96                           	psect	smallconst
    97  001000                     __psmallconst:
    98                           	opt stack 0
    99  001000  00                 	db	0
   100  001001                     _dpowers:
   101                           	opt stack 0
   102  001001  0001               	dw	1
   103  001003  000A               	dw	10
   104  001005  0064               	dw	100
   105  001007  03E8               	dw	1000
   106  001009  2710               	dw	10000
   107  00100B                     __end_of_dpowers:
   108                           	opt stack 0
   109  0000                     _INTCON2bits	set	4081
   110  0000                     _INTCONbits	set	4082
   111  0000                     _LATAbits	set	3977
   112  0000                     _LATD	set	3980
   113  0000                     _OSCTUNEbits	set	3995
   114  0000                     _PIR1bits	set	3998
   115  0000                     _RCONbits	set	4048
   116  0000                     _SSP1BUF	set	4041
   117  0000                     _SSP1CON1bits	set	4038
   118  0000                     _SSP1STATbits	set	4039
   119  0000                     _SSPBUF	set	4041
   120  0000                     _SSPCON1	set	4038
   121  0000                     _SSPSTATbits	set	4039
   122  0000                     _TRISAbits	set	3986
   123  0000                     _TRISB	set	3987
   124  0000                     _TRISC	set	3988
   125  0000                     _TRISCbits	set	3988
   126  0000                     _TRISD	set	3989
   127  0000                     _SSPIF	set	31987
   128  00100B                     STR_3:
   129  00100B  57                 	db	87	;'W'
   130  00100C  72                 	db	114	;'r'
   131  00100D  6F                 	db	111	;'o'
   132  00100E  74                 	db	116	;'t'
   133  00100F  65                 	db	101	;'e'
   134  001010  20                 	db	32
   135  001011  25                 	db	37
   136  001012  73                 	db	115	;'s'
   137  001013  00                 	db	0
   138  001014                     STR_1:
   139  001014  52                 	db	82	;'R'
   140  001015  65                 	db	101	;'e'
   141  001016  61                 	db	97	;'a'
   142  001017  64                 	db	100	;'d'
   143  001018  20                 	db	32
   144  001019  25                 	db	37
   145  00101A  73                 	db	115	;'s'
   146  00101B  00                 	db	0
   147  00101C                     STR_4:
   148  00101C  28                 	db	40
   149  00101D  6E                 	db	110	;'n'
   150  00101E  75                 	db	117	;'u'
   151  00101F  6C                 	db	108	;'l'
   152  001020  6C                 	db	108	;'l'
   153  001021  29                 	db	41
   154  001022  00                 	db	0
   155  001023                     STR_2:
   156  001023  25                 	db	37
   157  001024  64                 	db	100	;'d'
   158  001025  00                 	db	0
   159                           
   160                           ; #config settings
   161  001026  00                 	db	0	; dummy byte at the end
   162  0000                     
   163                           	psect	cinit
   164  00186C                     __pcinit:
   165                           	opt stack 0
   166  00186C                     start_initialization:
   167                           	opt stack 0
   168  00186C                     __initialization:
   169                           	opt stack 0
   170                           
   171                           ; Clear objects allocated to BANK0 (36 bytes)
   172  00186C  EE00  F060         	lfsr	0,__pbssBANK0
   173  001870  0E24               	movlw	36
   174  001872                     clear_0:
   175  001872  6AEE               	clrf	postinc0,c
   176  001874  06E8               	decf	wreg,f,c
   177  001876  E1FD               	bnz	clear_0
   178                           
   179                           ; Clear objects allocated to COMRAM (3 bytes)
   180  001878  6A3B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   181  00187A  6A3A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   182  00187C  6A39               	clrf	__pbssCOMRAM& (0+255),c
   183                           
   184                           ; Initialize objects allocated to BANK0 (16 bytes)
   185                           ; load TBLPTR registers with __pidataBANK0
   186  00187E  0E32               	movlw	low __pidataBANK0
   187  001880  6EF6               	movwf	tblptrl,c
   188  001882  0E1C               	movlw	high __pidataBANK0
   189  001884  6EF7               	movwf	tblptrh,c
   190  001886  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   191  001888  6EF8               	movwf	tblptru,c
   192  00188A  EE00  F0A6         	lfsr	0,__pdataBANK0
   193  00188E  EE10 F010          	lfsr	1,16
   194  001892                     copy_data0:
   195  001892  0009               	tblrd		*+
   196  001894  CFF5 FFEE          	movff	tablat,postinc0
   197  001898  50E5               	movf	postdec1,w,c
   198  00189A  50E1               	movf	fsr1l,w,c
   199  00189C  E1FA               	bnz	copy_data0
   200                           
   201                           ; Initialize objects allocated to COMRAM (11 bytes)
   202                           ; load TBLPTR registers with __pidataCOMRAM
   203  00189E  0E6A               	movlw	low __pidataCOMRAM
   204  0018A0  6EF6               	movwf	tblptrl,c
   205  0018A2  0E1C               	movlw	high __pidataCOMRAM
   206  0018A4  6EF7               	movwf	tblptrh,c
   207  0018A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   208  0018A8  6EF8               	movwf	tblptru,c
   209  0018AA  EE00  F02E         	lfsr	0,__pdataCOMRAM
   210  0018AE  EE10 F00B          	lfsr	1,11
   211  0018B2                     copy_data1:
   212  0018B2  0009               	tblrd		*+
   213  0018B4  CFF5 FFEE          	movff	tablat,postinc0
   214  0018B8  50E5               	movf	postdec1,w,c
   215  0018BA  50E1               	movf	fsr1l,w,c
   216  0018BC  E1FA               	bnz	copy_data1
   217  0018BE                     end_of_initialization:
   218                           	opt stack 0
   219  0018BE                     __end_of__initialization:
   220                           	opt stack 0
   221  0018BE  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   222  0018C0  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   223  0018C2  0100               	movlb	0
   224  0018C4  EF25  F00A         	goto	_main	;jump to C main() function
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           tblptrl	equ	0xFF6
   228                           tablat	equ	0xFF5
   229                           postinc0	equ	0xFEE
   230                           wreg	equ	0xFE8
   231                           postdec1	equ	0xFE5
   232                           fsr1l	equ	0xFE1
   233                           
   234                           	psect	bssCOMRAM
   235  000039                     __pbssCOMRAM:
   236                           	opt stack 0
   237  000039                     _rx:
   238                           	opt stack 0
   239  000039                     	ds	2
   240  00003B                     _flag:
   241                           	opt stack 0
   242  00003B                     	ds	1
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           postdec1	equ	0xFE5
   250                           fsr1l	equ	0xFE1
   251                           
   252                           	psect	dataCOMRAM
   253  00002E                     __pdataCOMRAM:
   254                           	opt stack 0
   255  00002E                     _str:
   256                           	opt stack 0
   257  00002E                     	ds	11
   258                           tblptru	equ	0xFF8
   259                           tblptrh	equ	0xFF7
   260                           tblptrl	equ	0xFF6
   261                           tablat	equ	0xFF5
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           postdec1	equ	0xFE5
   265                           fsr1l	equ	0xFE1
   266                           
   267                           	psect	bssBANK0
   268  000060                     __pbssBANK0:
   269                           	opt stack 0
   270  000060                     _count:
   271                           	opt stack 0
   272  000060                     	ds	2
   273  000062                     _line1str:
   274                           	opt stack 0
   275  000062                     	ds	17
   276  000073                     _line2str:
   277                           	opt stack 0
   278  000073                     	ds	17
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           postdec1	equ	0xFE5
   286                           fsr1l	equ	0xFE1
   287                           
   288                           	psect	dataBANK0
   289  0000A6                     __pdataBANK0:
   290                           	opt stack 0
   291  0000A6                     _rdStr:
   292                           	opt stack 0
   293  0000A6                     	ds	16
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           postdec1	equ	0xFE5
   301                           fsr1l	equ	0xFE1
   302                           
   303                           	psect	cstackBANK0
   304  000084                     __pcstackBANK0:
   305                           	opt stack 0
   306  000084                     ??_longDelay:
   307  000084                     ?___lwdiv:
   308                           	opt stack 0
   309  000084                     calculateBase@base:
   310                           	opt stack 0
   311  000084                     WriteRegister@b:
   312                           	opt stack 0
   313  000084                     SPIReadWrite@byte:
   314                           	opt stack 0
   315  000084                     ___lwdiv@dividend:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x0
   319  000084                     	ds	1
   320  000085                     calculateBase@line:
   321                           	opt stack 0
   322  000085                     WriteRegister@reg:
   323                           	opt stack 0
   324  000085                     SPIReadWrite@r:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x1
   328  000085                     	ds	1
   329  000086                     LCDWriteByte@rs:
   330                           	opt stack 0
   331  000086                     ___lwdiv@divisor:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x2
   335  000086                     	ds	1
   336  000087                     LCDWriteByte@c:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x3
   340  000087                     	ds	1
   341  000088                     LCDWriteByte@comFlags:
   342                           	opt stack 0
   343  000088                     ___lwdiv@counter:
   344                           	opt stack 0
   345                           
   346                           ; 1 bytes @ 0x4
   347  000088                     	ds	1
   348  000089                     LCDCommand@command:
   349                           	opt stack 0
   350  000089                     LCDInitCommand@command:
   351                           	opt stack 0
   352  000089                     LCDWriteData@c:
   353                           	opt stack 0
   354  000089                     ___lwdiv@quotient:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x5
   358  000089                     	ds	1
   359  00008A                     ??_LCDInit:
   360  00008A                     LCDSetPos@row:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x6
   364  00008A                     	ds	1
   365  00008B                     ?___lwmod:
   366                           	opt stack 0
   367  00008B                     LCDInit@functionSet:
   368                           	opt stack 0
   369  00008B                     ___lwmod@dividend:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x7
   373  00008B                     	ds	1
   374  00008C                     LCDSetPos@col:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x8
   378  00008C                     	ds	1
   379  00008D                     ___lwmod@divisor:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x9
   383  00008D                     	ds	1
   384  00008E                     ??_LCDSetPos:
   385                           
   386                           ; 0 bytes @ 0xA
   387  00008E                     	ds	1
   388  00008F                     ___lwmod@counter:
   389                           	opt stack 0
   390  00008F                     LCDSetPos@pos:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0xB
   394  00008F                     	ds	1
   395  000090                     ?_sprintf:
   396                           	opt stack 0
   397  000090                     sprintf@sp:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0xC
   401  000090                     	ds	1
   402  000091                     LCDClearLine@c:
   403                           	opt stack 0
   404  000091                     LCDWriteLine@str:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0xD
   408  000091                     	ds	1
   409  000092                     LCDClearLine@line:
   410                           	opt stack 0
   411  000092                     sprintf@f:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xE
   415  000092                     	ds	1
   416  000093                     LCDWriteLine@line:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xF
   420  000093                     	ds	1
   421  000094                     
   422                           ; 0 bytes @ 0x10
   423  000094                     	ds	2
   424  000096                     ??_sprintf:
   425                           
   426                           ; 0 bytes @ 0x12
   427  000096                     	ds	1
   428  000097                     sprintf@flag:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x13
   432  000097                     	ds	1
   433  000098                     sprintf@prec:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x14
   437  000098                     	ds	1
   438  000099                     sprintf@ap:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x15
   442  000099                     	ds	2
   443  00009B                     sprintf@cp:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x17
   447  00009B                     	ds	2
   448  00009D                     sprintf@val:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x19
   452  00009D                     	ds	2
   453  00009F                     sprintf@c:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x1B
   457  00009F                     	ds	1
   458  0000A0                     main@i:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0x1C
   462  0000A0                     	ds	4
   463  0000A4                     main@i_1277:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x20
   467  0000A4                     	ds	2
   468                           tblptru	equ	0xFF8
   469                           tblptrh	equ	0xFF7
   470                           tblptrl	equ	0xFF6
   471                           tablat	equ	0xFF5
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           postdec1	equ	0xFE5
   475                           fsr1l	equ	0xFE1
   476                           
   477                           	psect	cstackCOMRAM
   478  000001                     __pcstackCOMRAM:
   479                           	opt stack 0
   480  000001                     ?i2___lwdiv:
   481                           	opt stack 0
   482  000001                     i2calculateBase@base:
   483                           	opt stack 0
   484  000001                     i2WriteRegister@b:
   485                           	opt stack 0
   486  000001                     i2SPIReadWrite@byte:
   487                           	opt stack 0
   488  000001                     i2___lwdiv@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x0
   492  000001                     	ds	1
   493  000002                     i2calculateBase@line:
   494                           	opt stack 0
   495  000002                     i2WriteRegister@reg:
   496                           	opt stack 0
   497  000002                     i2SPIReadWrite@r:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x1
   501  000002                     	ds	1
   502  000003                     i2LCDWriteByte@rs:
   503                           	opt stack 0
   504  000003                     i2___lwdiv@divisor:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2
   508  000003                     	ds	1
   509  000004                     i2LCDWriteByte@c:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x3
   513  000004                     	ds	1
   514  000005                     i2LCDWriteByte@comFlags:
   515                           	opt stack 0
   516  000005                     i2___lwdiv@quotient:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x4
   520  000005                     	ds	1
   521  000006                     i2LCDCommand@command:
   522                           	opt stack 0
   523  000006                     i2LCDWriteData@c:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x5
   527  000006                     	ds	1
   528  000007                     i2___lwdiv@counter:
   529                           	opt stack 0
   530  000007                     i2LCDSetPos@row:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x6
   534  000007                     	ds	1
   535  000008                     ?i2___lwmod:
   536                           	opt stack 0
   537  000008                     i2___lwmod@dividend:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x7
   541  000008                     	ds	1
   542  000009                     i2LCDSetPos@col:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x8
   546  000009                     	ds	1
   547  00000A                     i2___lwmod@divisor:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x9
   551  00000A                     	ds	1
   552  00000B                     ??i2_LCDSetPos:
   553                           
   554                           ; 0 bytes @ 0xA
   555  00000B                     	ds	1
   556  00000C                     i2___lwmod@counter:
   557                           	opt stack 0
   558  00000C                     i2LCDSetPos@pos:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0xB
   562  00000C                     	ds	1
   563  00000D                     ?i2_sprintf:
   564                           	opt stack 0
   565  00000D                     i2sprintf@sp:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0xC
   569  00000D                     	ds	1
   570  00000E                     i2LCDClearLine@line:
   571                           	opt stack 0
   572  00000E                     i2LCDWriteLine@str:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0xD
   576  00000E                     	ds	1
   577  00000F                     i2LCDClearLine@c:
   578                           	opt stack 0
   579  00000F                     i2sprintf@f:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0xE
   583  00000F                     	ds	1
   584  000010                     i2LCDWriteLine@line:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0xF
   588  000010                     	ds	1
   589  000011                     
   590                           ; 0 bytes @ 0x10
   591  000011                     	ds	2
   592  000013                     ??i2_sprintf:
   593                           
   594                           ; 0 bytes @ 0x12
   595  000013                     	ds	1
   596  000014                     i2sprintf@flag:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x13
   600  000014                     	ds	1
   601  000015                     i2sprintf@prec:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x14
   605  000015                     	ds	1
   606  000016                     i2sprintf@ap:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x15
   610  000016                     	ds	2
   611  000018                     i2sprintf@cp:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x17
   615  000018                     	ds	2
   616  00001A                     i2sprintf@val:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x19
   620  00001A                     	ds	2
   621  00001C                     i2sprintf@c:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x1B
   625  00001C                     	ds	1
   626  00001D                     ??_HighIsr:
   627                           
   628                           ; 0 bytes @ 0x1C
   629  00001D                     	ds	15
   630  00002C                     HighIsr@i:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x2B
   634  00002C                     	ds	2
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1l	equ	0xFE1
   643                           
   644 ;;
   645 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   646 ;;
   647 ;; *************** function _main *****************
   648 ;; Defined at:
   649 ;;		line 37 in file "SPI.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;  i               2   32[BANK0 ] int 
   654 ;;  i               4   28[BANK0 ] long 
   655 ;; Return value:  Size  Location     Type
   656 ;;		None               void
   657 ;; Registers used:
   658 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   668 ;;Total ram usage:        6 bytes
   669 ;; Hardware stack levels required when called:   11
   670 ;; This function calls:
   671 ;;		_ConfigInterrupts
   672 ;;		_ConfigPeriph
   673 ;;		_InitPins
   674 ;;		_LCDClear
   675 ;;		_LCDClearLine
   676 ;;		_LCDInit
   677 ;;		_LCDWriteLine
   678 ;;		_SPIReadWrite
   679 ;;		_sprintf
   680 ;; This function is called by:
   681 ;;		Startup code after reset
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           	psect	text0
   686  00144A                     __ptext0:
   687                           	opt stack 0
   688  00144A                     _main:
   689                           	opt stack 20
   690                           
   691                           ;SPI.c: 39: long i;
   692                           ;SPI.c: 40: count = 0;
   693                           
   694                           ;incstack = 0
   695  00144A  0E00               	movlw	0
   696  00144C  0100               	movlb	0	; () banked
   697  00144E  6F61               	movwf	(_count+1)& (0+255),b
   698  001450  0E00               	movlw	0
   699  001452  6F60               	movwf	_count& (0+255),b
   700                           
   701                           ; BSR set to: 0
   702                           ;SPI.c: 41: OSCTUNEbits.PLLEN = 1;
   703  001454  8C9B               	bsf	3995,6,c	;volatile
   704                           
   705                           ; BSR set to: 0
   706                           ;SPI.c: 42: LCDInit();
   707  001456  EC06  F00C         	call	_LCDInit	;wreg free
   708                           
   709                           ;SPI.c: 43: LCDClear();
   710  00145A  EC29  F00E         	call	_LCDClear	;wreg free
   711                           
   712                           ;SPI.c: 44: InitPins();
   713  00145E  ECDB  F00D         	call	_InitPins	;wreg free
   714                           
   715                           ;SPI.c: 45: ConfigPeriph();
   716  001462  EC21  F00E         	call	_ConfigPeriph	;wreg free
   717                           
   718                           ;SPI.c: 48: LATAbits.LATA3 = 0;
   719  001466  9689               	bcf	3977,3,c	;volatile
   720                           
   721                           ;SPI.c: 49: SPIReadWrite(0b00000011);
   722  001468  0E03               	movlw	3
   723  00146A  ECCF  F00D         	call	_SPIReadWrite
   724                           
   725                           ;SPI.c: 50: SPIReadWrite(0x03);
   726  00146E  0E03               	movlw	3
   727  001470  ECCF  F00D         	call	_SPIReadWrite
   728                           
   729                           ;SPI.c: 51: SPIReadWrite(0x00);
   730  001474  0E00               	movlw	0
   731  001476  ECCF  F00D         	call	_SPIReadWrite
   732                           
   733                           ;SPI.c: 52: for (int i = 0; i < 11; i++) {
   734  00147A  0E00               	movlw	0
   735  00147C  0100               	movlb	0	; () banked
   736  00147E  6FA5               	movwf	(main@i_1277+1)& (0+255),b
   737  001480  0E00               	movlw	0
   738  001482  6FA4               	movwf	main@i_1277& (0+255),b
   739                           
   740                           ; BSR set to: 0
   741  001484  0100               	movlb	0	; () banked
   742  001486  BFA5               	btfsc	(main@i_1277+1)& (0+255),7,b
   743  001488  D008               	goto	l2771
   744  00148A  0100               	movlb	0	; () banked
   745  00148C  51A5               	movf	(main@i_1277+1)& (0+255),w,b
   746  00148E  E11B               	bnz	l243
   747  001490  0E0B               	movlw	11
   748  001492  0100               	movlb	0	; () banked
   749  001494  5DA4               	subwf	main@i_1277& (0+255),w,b
   750  001496  B0D8               	btfsc	status,0,c
   751  001498  D016               	goto	l243
   752  00149A                     l2771:
   753                           
   754                           ; BSR set to: 0
   755                           ;SPI.c: 53: rdStr[i] = SPIReadWrite(0);
   756  00149A  0EA6               	movlw	low _rdStr
   757  00149C  0100               	movlb	0	; () banked
   758  00149E  25A4               	addwf	main@i_1277& (0+255),w,b
   759  0014A0  6ED9               	movwf	fsr2l,c
   760  0014A2  0E00               	movlw	high _rdStr
   761  0014A4  0100               	movlb	0	; () banked
   762  0014A6  21A5               	addwfc	(main@i_1277+1)& (0+255),w,b
   763  0014A8  6EDA               	movwf	fsr2h,c
   764  0014AA  0E00               	movlw	0
   765  0014AC  ECCF  F00D         	call	_SPIReadWrite
   766  0014B0  6EDF               	movwf	indf2,c
   767  0014B2  0100               	movlb	0	; () banked
   768  0014B4  4BA4               	infsnz	main@i_1277& (0+255),f,b
   769  0014B6  2BA5               	incf	(main@i_1277+1)& (0+255),f,b
   770                           
   771                           ; BSR set to: 0
   772  0014B8  0100               	movlb	0	; () banked
   773  0014BA  BFA5               	btfsc	(main@i_1277+1)& (0+255),7,b
   774  0014BC  D7EE               	goto	l2771
   775  0014BE  0100               	movlb	0	; () banked
   776  0014C0  51A5               	movf	(main@i_1277+1)& (0+255),w,b
   777  0014C2  E101               	bnz	u2380
   778  0014C4  D7E5               	goto	L1
   779  0014C6                     u2380:
   780  0014C6                     l243:
   781                           
   782                           ; BSR set to: 0
   783                           ;SPI.c: 54: }
   784                           ;SPI.c: 55: LATAbits.LATA3 = 1;
   785  0014C6  8689               	bsf	3977,3,c	;volatile
   786                           
   787                           ; BSR set to: 0
   788                           ;SPI.c: 65: sprintf(line2str, "Read %s", rdStr);
   789  0014C8  0E73               	movlw	low _line2str
   790  0014CA  0100               	movlb	0	; () banked
   791  0014CC  6F90               	movwf	sprintf@sp& (0+255),b
   792  0014CE  0E00               	movlw	high _line2str
   793  0014D0  0100               	movlb	0	; () banked
   794  0014D2  6F91               	movwf	(sprintf@sp+1)& (0+255),b
   795  0014D4  0E14               	movlw	low STR_1
   796  0014D6  0100               	movlb	0	; () banked
   797  0014D8  6F92               	movwf	sprintf@f& (0+255),b
   798  0014DA  0E10               	movlw	high STR_1
   799  0014DC  0100               	movlb	0	; () banked
   800  0014DE  6F93               	movwf	(sprintf@f+1)& (0+255),b
   801  0014E0  0EA6               	movlw	low _rdStr
   802  0014E2  0100               	movlb	0	; () banked
   803  0014E4  6F94               	movwf	(?_sprintf+4)& (0+255),b
   804  0014E6  0E00               	movlw	high _rdStr
   805  0014E8  0100               	movlb	0	; () banked
   806  0014EA  6F95               	movwf	(?_sprintf+5)& (0+255),b
   807  0014EC  EC14  F008         	call	_sprintf	;wreg free
   808                           
   809                           ;SPI.c: 66: LCDClearLine(1);
   810  0014F0  0E01               	movlw	1
   811  0014F2  ECF6  F00C         	call	_LCDClearLine
   812                           
   813                           ;SPI.c: 67: LCDWriteLine(line2str, 1);
   814  0014F6  0E73               	movlw	low _line2str
   815  0014F8  0100               	movlb	0	; () banked
   816  0014FA  6F91               	movwf	LCDWriteLine@str& (0+255),b
   817  0014FC  0E00               	movlw	high _line2str
   818  0014FE  0100               	movlb	0	; () banked
   819  001500  6F92               	movwf	(LCDWriteLine@str+1)& (0+255),b
   820  001502  0E01               	movlw	1
   821  001504  0100               	movlb	0	; () banked
   822  001506  6F93               	movwf	LCDWriteLine@line& (0+255),b
   823  001508  ECCD  F00A         	call	_LCDWriteLine	;wreg free
   824                           
   825                           ;SPI.c: 69: ConfigInterrupts();
   826  00150C  EC2F  F00E         	call	_ConfigInterrupts	;wreg free
   827  001510                     l2785:
   828                           
   829                           ;SPI.c: 72: {
   830                           ;SPI.c: 73: sprintf(line1str, "%d", count);
   831  001510  0E62               	movlw	low _line1str
   832  001512  0100               	movlb	0	; () banked
   833  001514  6F90               	movwf	sprintf@sp& (0+255),b
   834  001516  0E00               	movlw	high _line1str
   835  001518  0100               	movlb	0	; () banked
   836  00151A  6F91               	movwf	(sprintf@sp+1)& (0+255),b
   837  00151C  0E23               	movlw	low STR_2
   838  00151E  0100               	movlb	0	; () banked
   839  001520  6F92               	movwf	sprintf@f& (0+255),b
   840  001522  0E10               	movlw	high STR_2
   841  001524  0100               	movlb	0	; () banked
   842  001526  6F93               	movwf	(sprintf@f+1)& (0+255),b
   843  001528  C060  F094         	movff	_count,?_sprintf+4
   844  00152C  C061  F095         	movff	_count+1,?_sprintf+5
   845  001530  EC14  F008         	call	_sprintf	;wreg free
   846                           
   847                           ;SPI.c: 74: LCDClearLine(0);
   848  001534  0E00               	movlw	0
   849  001536  ECF6  F00C         	call	_LCDClearLine
   850                           
   851                           ;SPI.c: 75: LCDWriteLine(line1str, 0);
   852  00153A  0E62               	movlw	low _line1str
   853  00153C  0100               	movlb	0	; () banked
   854  00153E  6F91               	movwf	LCDWriteLine@str& (0+255),b
   855  001540  0E00               	movlw	high _line1str
   856  001542  0100               	movlb	0	; () banked
   857  001544  6F92               	movwf	(LCDWriteLine@str+1)& (0+255),b
   858  001546  0E00               	movlw	0
   859  001548  0100               	movlb	0	; () banked
   860  00154A  6F93               	movwf	LCDWriteLine@line& (0+255),b
   861  00154C  ECCD  F00A         	call	_LCDWriteLine	;wreg free
   862                           
   863                           ;SPI.c: 76: for (i = 0; i < 50000; ++i);
   864  001550  0E00               	movlw	0
   865  001552  0100               	movlb	0	; () banked
   866  001554  6FA0               	movwf	main@i& (0+255),b
   867  001556  0E00               	movlw	0
   868  001558  6FA1               	movwf	(main@i+1)& (0+255),b
   869  00155A  0E00               	movlw	0
   870  00155C  6FA2               	movwf	(main@i+2)& (0+255),b
   871  00155E  0E00               	movlw	0
   872  001560  6FA3               	movwf	(main@i+3)& (0+255),b
   873  001562                     l2793:
   874                           
   875                           ; BSR set to: 0
   876  001562  0100               	movlb	0	; () banked
   877  001564  BFA3               	btfsc	(main@i+3)& (0+255),7,b
   878  001566  D00D               	goto	l2797
   879  001568  0100               	movlb	0	; () banked
   880  00156A  51A3               	movf	(main@i+3)& (0+255),w,b
   881  00156C  0100               	movlb	0	; () banked
   882  00156E  11A2               	iorwf	(main@i+2)& (0+255),w,b
   883  001570  E110               	bnz	l2799
   884  001572  0E50               	movlw	80
   885  001574  0100               	movlb	0	; () banked
   886  001576  5DA0               	subwf	main@i& (0+255),w,b
   887  001578  0EC3               	movlw	195
   888  00157A  0100               	movlb	0	; () banked
   889  00157C  59A1               	subwfb	(main@i+1)& (0+255),w,b
   890  00157E  B0D8               	btfsc	status,0,c
   891  001580  D008               	goto	l2799
   892  001582                     l2797:
   893                           
   894                           ; BSR set to: 0
   895  001582  0E01               	movlw	1
   896  001584  0100               	movlb	0	; () banked
   897  001586  27A0               	addwf	main@i& (0+255),f,b
   898  001588  0E00               	movlw	0
   899  00158A  23A1               	addwfc	(main@i+1)& (0+255),f,b
   900  00158C  23A2               	addwfc	(main@i+2)& (0+255),f,b
   901  00158E  23A3               	addwfc	(main@i+3)& (0+255),f,b
   902  001590  D7E8               	goto	l2793
   903  001592                     l2799:
   904                           
   905                           ; BSR set to: 0
   906                           ;SPI.c: 77: ++count;
   907  001592  0100               	movlb	0	; () banked
   908  001594  4B60               	infsnz	_count& (0+255),f,b
   909  001596  2B61               	incf	(_count+1)& (0+255),f,b
   910                           
   911                           ; BSR set to: 0
   912  001598  D7BB               	goto	l2785
   913  00159A                     __end_of_main:
   914                           	opt stack 0
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           postdec1	equ	0xFE5
   922                           fsr1l	equ	0xFE1
   923                           indf2	equ	0xFDF
   924                           fsr2h	equ	0xFDA
   925                           fsr2l	equ	0xFD9
   926                           status	equ	0xFD8
   927                           
   928 ;; *************** function _sprintf *****************
   929 ;; Defined at:
   930 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  sp              2   12[BANK0 ] PTR unsigned char 
   933 ;;		 -> line1str(17), line2str(17), 
   934 ;;  f               2   14[BANK0 ] PTR const unsigned char 
   935 ;;		 -> STR_3(9), STR_2(3), STR_1(8), 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  tmpval          4    0        struct .
   938 ;;  val             2   25[BANK0 ] unsigned int 
   939 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
   940 ;;		 -> STR_4(7), str(11), rdStr(16), 
   941 ;;  ap              2   21[BANK0 ] PTR void [1]
   942 ;;		 -> ?i2_sprintf(2), ?_sprintf(2), 
   943 ;;  len             2    0        unsigned int 
   944 ;;  c               1   27[BANK0 ] char 
   945 ;;  prec            1   20[BANK0 ] char 
   946 ;;  flag            1   19[BANK0 ] unsigned char 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  2   12[BANK0 ] int 
   949 ;; Registers used:
   950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   956 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;Total ram usage:       16 bytes
   961 ;; Hardware stack levels used:    1
   962 ;; Hardware stack levels required when called:    7
   963 ;; This function calls:
   964 ;;		___lwdiv
   965 ;;		___lwmod
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text1
   972  001028                     __ptext1:
   973                           	opt stack 0
   974  001028                     _sprintf:
   975                           	opt stack 23
   976                           
   977                           ;doprnt.c: 494: va_list ap;
   978                           ;doprnt.c: 499: signed char c;
   979                           ;doprnt.c: 506: signed char prec;
   980                           ;doprnt.c: 508: unsigned char flag;
   981                           ;doprnt.c: 523: union {
   982                           ;doprnt.c: 524: unsigned long vd;
   983                           ;doprnt.c: 525: double integ;
   984                           ;doprnt.c: 526: } tmpval;
   985                           ;doprnt.c: 528: unsigned int val;
   986                           ;doprnt.c: 529: unsigned len;
   987                           ;doprnt.c: 530: const char * cp;
   988                           ;doprnt.c: 533: *ap = __va_start();
   989                           
   990                           ; BSR set to: 0
   991                           ;incstack = 0
   992  001028  0E94               	movlw	low (?_sprintf+4)
   993  00102A  0100               	movlb	0	; () banked
   994  00102C  6F99               	movwf	sprintf@ap& (0+255),b
   995  00102E  0E00               	movlw	high (?_sprintf+4)
   996  001030  0100               	movlb	0	; () banked
   997  001032  6F9A               	movwf	(sprintf@ap+1)& (0+255),b
   998                           
   999                           ;doprnt.c: 536: while(c = *f++) {
  1000  001034  D0FC               	goto	l2627
  1001  001036                     l2559:
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;doprnt.c: 538: if(c != '%')
  1005  001036  0E25               	movlw	37
  1006  001038  0100               	movlb	0	; () banked
  1007  00103A  199F               	xorwf	sprintf@c& (0+255),w,b
  1008  00103C  B4D8               	btfsc	status,2,c
  1009  00103E  D00A               	goto	l2565
  1010                           
  1011                           ; BSR set to: 0
  1012                           ;doprnt.c: 540: {
  1013                           ;doprnt.c: 541: ((*sp++ = (c)));
  1014  001040  C090  FFD9         	movff	sprintf@sp,fsr2l
  1015  001044  C091  FFDA         	movff	sprintf@sp+1,fsr2h
  1016  001048  C09F  FFDF         	movff	sprintf@c,indf2
  1017                           
  1018                           ; BSR set to: 0
  1019  00104C  0100               	movlb	0	; () banked
  1020  00104E  4B90               	infsnz	sprintf@sp& (0+255),f,b
  1021  001050  2B91               	incf	(sprintf@sp+1)& (0+255),f,b
  1022                           
  1023                           ;doprnt.c: 542: continue;
  1024  001052  D0ED               	goto	l2627
  1025  001054                     l2565:
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;doprnt.c: 543: }
  1029                           ;doprnt.c: 548: flag = 0;
  1030  001054  0E00               	movlw	0
  1031  001056  0100               	movlb	0	; () banked
  1032  001058  6F97               	movwf	sprintf@flag& (0+255),b
  1033                           
  1034                           ;doprnt.c: 635: switch(c = *f++) {
  1035  00105A  D04B               	goto	l2585
  1036  00105C                     l2567:
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1040  00105C  C099  FFD9         	movff	sprintf@ap,fsr2l
  1041  001060  C09A  FFDA         	movff	sprintf@ap+1,fsr2h
  1042  001064  CFDE F09B          	movff	postinc2,sprintf@cp
  1043  001068  CFDD F09C          	movff	postdec2,sprintf@cp+1
  1044                           
  1045                           ; BSR set to: 0
  1046  00106C  0E02               	movlw	2
  1047  00106E  0100               	movlb	0	; () banked
  1048  001070  2799               	addwf	sprintf@ap& (0+255),f,b
  1049  001072  0E00               	movlw	0
  1050  001074  239A               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;doprnt.c: 740: if(!cp)
  1054  001076  0100               	movlb	0	; () banked
  1055  001078  519B               	movf	sprintf@cp& (0+255),w,b
  1056  00107A  0100               	movlb	0	; () banked
  1057  00107C  119C               	iorwf	(sprintf@cp+1)& (0+255),w,b
  1058  00107E  A4D8               	btfss	status,2,c
  1059  001080  D023               	goto	l2581
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;doprnt.c: 741: cp = "(null)";
  1063  001082  0E1C               	movlw	low STR_4
  1064  001084  0100               	movlb	0	; () banked
  1065  001086  6F9B               	movwf	sprintf@cp& (0+255),b
  1066  001088  0E10               	movlw	high STR_4
  1067  00108A  0100               	movlb	0	; () banked
  1068  00108C  6F9C               	movwf	(sprintf@cp+1)& (0+255),b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;doprnt.c: 777: while(*cp)
  1072  00108E  D01C               	goto	l2581
  1073  001090                     l2575:
  1074                           
  1075                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  1076  001090  C09B  FFF6         	movff	sprintf@cp,tblptrl
  1077  001094  C09C  FFF7         	movff	sprintf@cp+1,tblptrh
  1078  001098  0E00               	movlw	low (__smallconst shr (0+16))
  1079  00109A  6EF8               	movwf	tblptru,c
  1080  00109C  C090  FFD9         	movff	sprintf@sp,fsr2l
  1081  0010A0  C091  FFDA         	movff	sprintf@sp+1,fsr2h
  1082  0010A4  0E0F               	movlw	(high __ramtop+-1)
  1083  0010A6  64F7               	cpfsgt	tblptrh,c
  1084  0010A8  D003               	bra	u2167
  1085  0010AA  0008               	tblrd		*
  1086  0010AC  50F5               	movf	tablat,w,c
  1087  0010AE  D005               	bra	u2160
  1088  0010B0                     u2167:
  1089  0010B0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1090  0010B4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1091  0010B8  50EF               	movf	indf0,w,c
  1092  0010BA                     u2160:
  1093  0010BA  6EDF               	movwf	indf2,c
  1094  0010BC  0100               	movlb	0	; () banked
  1095  0010BE  4B9B               	infsnz	sprintf@cp& (0+255),f,b
  1096  0010C0  2B9C               	incf	(sprintf@cp+1)& (0+255),f,b
  1097                           
  1098                           ; BSR set to: 0
  1099  0010C2  0100               	movlb	0	; () banked
  1100  0010C4  4B90               	infsnz	sprintf@sp& (0+255),f,b
  1101  0010C6  2B91               	incf	(sprintf@sp+1)& (0+255),f,b
  1102  0010C8                     l2581:
  1103                           
  1104                           ; BSR set to: 0
  1105  0010C8  C09B  FFF6         	movff	sprintf@cp,tblptrl
  1106  0010CC  C09C  FFF7         	movff	sprintf@cp+1,tblptrh
  1107  0010D0  0E00               	movlw	low (__smallconst shr (0+16))
  1108  0010D2  6EF8               	movwf	tblptru,c
  1109  0010D4  0E0F               	movlw	(high __ramtop+-1)
  1110  0010D6  64F7               	cpfsgt	tblptrh,c
  1111  0010D8  D003               	bra	u2177
  1112  0010DA  0008               	tblrd		*
  1113  0010DC  50F5               	movf	tablat,w,c
  1114  0010DE  D005               	bra	u2170
  1115  0010E0                     u2177:
  1116  0010E0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1117  0010E4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1118  0010E8  50EF               	movf	indf0,w,c
  1119  0010EA                     u2170:
  1120  0010EA  0900               	iorlw	0
  1121  0010EC  B4D8               	btfsc	status,2,c
  1122  0010EE  D09F               	goto	l2627
  1123  0010F0  D7CF               	goto	l2575
  1124  0010F2                     l2585:
  1125  0010F2  C092  FFF6         	movff	sprintf@f,tblptrl
  1126  0010F6  C093  FFF7         	movff	sprintf@f+1,tblptrh
  1127  0010FA  0100               	movlb	0	; () banked
  1128  0010FC  4B92               	infsnz	sprintf@f& (0+255),f,b
  1129  0010FE  2B93               	incf	(sprintf@f+1)& (0+255),f,b
  1130  001100                     	if	0	;tblptru may be non-zero
  1131  001100                     	endif
  1132  001100                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1133  001100  0E00               	movlw	low (__mediumconst shr (0+16))
  1134  001102  6EF8               	movwf	tblptru,c
  1135  001104                     	endif
  1136  001104  0008               	tblrd		*
  1137  001106  CFF5 F09F          	movff	tablat,sprintf@c
  1138  00110A  0100               	movlb	0	; () banked
  1139  00110C  519F               	movf	sprintf@c& (0+255),w,b
  1140                           
  1141                           ; Switch size 1, requested type "space"
  1142                           ; Number of cases is 4, Range of values is 0 to 115
  1143                           ; switch strategies available:
  1144                           ; Name         Instructions Cycles
  1145                           ; simple_byte           13     7 (average)
  1146                           ;	Chosen strategy is simple_byte
  1147  00110E  0A00               	xorlw	0	; case 0
  1148  001110  B4D8               	btfsc	status,2,c
  1149  001112  D09D               	goto	l2629
  1150  001114  0A64               	xorlw	100	; case 100
  1151  001116  B4D8               	btfsc	status,2,c
  1152  001118  D007               	goto	l2587
  1153  00111A  0A0D               	xorlw	13	; case 105
  1154  00111C  B4D8               	btfsc	status,2,c
  1155  00111E  D004               	goto	l2587
  1156  001120  0A1A               	xorlw	26	; case 115
  1157  001122  B4D8               	btfsc	status,2,c
  1158  001124  D79B               	goto	l2567
  1159  001126  D083               	goto	l2627
  1160  001128                     l2587:
  1161                           
  1162                           ;doprnt.c: 1253: {
  1163                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1164  001128  C099  FFD9         	movff	sprintf@ap,fsr2l
  1165  00112C  C09A  FFDA         	movff	sprintf@ap+1,fsr2h
  1166  001130  CFDE F09D          	movff	postinc2,sprintf@val
  1167  001134  CFDD F09E          	movff	postdec2,sprintf@val+1
  1168  001138  0E02               	movlw	2
  1169  00113A  0100               	movlb	0	; () banked
  1170  00113C  2799               	addwf	sprintf@ap& (0+255),f,b
  1171  00113E  0E00               	movlw	0
  1172  001140  239A               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;doprnt.c: 1261: if((int)val < 0) {
  1176  001142  0100               	movlb	0	; () banked
  1177  001144  AF9E               	btfss	(sprintf@val+1)& (0+255),7,b
  1178  001146  D008               	goto	l2597
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;doprnt.c: 1262: flag |= 0x03;
  1182  001148  0E03               	movlw	3
  1183  00114A  0100               	movlb	0	; () banked
  1184  00114C  1397               	iorwf	sprintf@flag& (0+255),f,b
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;doprnt.c: 1263: val = -val;
  1188  00114E  0100               	movlb	0	; () banked
  1189  001150  6D9D               	negf	sprintf@val& (0+255),b
  1190  001152  1F9E               	comf	(sprintf@val+1)& (0+255),f,b
  1191  001154  B0D8               	btfsc	status,0,c
  1192  001156  2B9E               	incf	(sprintf@val+1)& (0+255),f,b
  1193  001158                     l2597:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;doprnt.c: 1264: }
  1197                           ;doprnt.c: 1266: }
  1198                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1199  001158  0E01               	movlw	1
  1200  00115A  0100               	movlb	0	; () banked
  1201  00115C  6F9F               	movwf	sprintf@c& (0+255),b
  1202  00115E                     l2599:
  1203                           
  1204                           ; BSR set to: 0
  1205  00115E  0E05               	movlw	5
  1206  001160  0100               	movlb	0	; () banked
  1207  001162  199F               	xorwf	sprintf@c& (0+255),w,b
  1208  001164  B4D8               	btfsc	status,2,c
  1209  001166  D019               	goto	l2611
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;doprnt.c: 1306: if(val < dpowers[c])
  1213                           
  1214                           ; BSR set to: 0
  1215                           
  1216                           ; BSR set to: 0
  1217  001168  0100               	movlb	0	; () banked
  1218  00116A  519F               	movf	sprintf@c& (0+255),w,b
  1219  00116C  0D02               	mullw	2
  1220  00116E  0E01               	movlw	low _dpowers
  1221  001170  24F3               	addwf	prodl,w,c
  1222  001172  6EF6               	movwf	tblptrl,c
  1223  001174  0E10               	movlw	high _dpowers
  1224  001176  20F4               	addwfc	prodh,w,c
  1225  001178  6EF7               	movwf	tblptrh,c
  1226  00117A                     	if	1	;There are 3 active tblptr bytes
  1227  00117A  6AF8               	clrf	tblptru,c
  1228  00117C  0E00               	movlw	low (__mediumconst shr (0+16))
  1229  00117E  22F8               	addwfc	tblptru,f,c
  1230  001180                     	endif
  1231  001180  0009               	tblrd		*+
  1232  001182  50F5               	movf	tablat,w,c
  1233  001184  0100               	movlb	0	; () banked
  1234  001186  5D9D               	subwf	sprintf@val& (0+255),w,b
  1235  001188  0009               	tblrd		*+
  1236  00118A  50F5               	movf	tablat,w,c
  1237  00118C  0100               	movlb	0	; () banked
  1238  00118E  599E               	subwfb	(sprintf@val+1)& (0+255),w,b
  1239  001190  A0D8               	btfss	status,0,c
  1240  001192  D003               	goto	l2611
  1241                           
  1242                           ; BSR set to: 0
  1243                           
  1244                           ; BSR set to: 0
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;doprnt.c: 1307: break;
  1248  001194  0100               	movlb	0	; () banked
  1249  001196  2B9F               	incf	sprintf@c& (0+255),f,b
  1250  001198  D7E2               	goto	l2599
  1251  00119A                     l2611:
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;doprnt.c: 1422: {
  1255                           ;doprnt.c: 1438: if(flag & 0x03)
  1256  00119A  C097  F096         	movff	sprintf@flag,??_sprintf
  1257  00119E  0E03               	movlw	3
  1258  0011A0  0100               	movlb	0	; () banked
  1259  0011A2  1796               	andwf	??_sprintf& (0+255),f,b
  1260  0011A4  B4D8               	btfsc	status,2,c
  1261  0011A6  D009               	goto	l2617
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1265  0011A8  C090  FFD9         	movff	sprintf@sp,fsr2l
  1266  0011AC  C091  FFDA         	movff	sprintf@sp+1,fsr2h
  1267  0011B0  0E2D               	movlw	45
  1268  0011B2  6EDF               	movwf	indf2,c
  1269                           
  1270                           ; BSR set to: 0
  1271  0011B4  0100               	movlb	0	; () banked
  1272  0011B6  4B90               	infsnz	sprintf@sp& (0+255),f,b
  1273  0011B8  2B91               	incf	(sprintf@sp+1)& (0+255),f,b
  1274  0011BA                     l2617:
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;doprnt.c: 1469: }
  1278                           ;doprnt.c: 1472: prec = c;
  1279  0011BA  C09F  F098         	movff	sprintf@c,sprintf@prec
  1280                           
  1281                           ;doprnt.c: 1474: while(prec--) {
  1282  0011BE  D031               	goto	l2625
  1283  0011C0                     l2619:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 1478: {
  1287                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1288  0011C0  0100               	movlb	0	; () banked
  1289  0011C2  5198               	movf	sprintf@prec& (0+255),w,b
  1290  0011C4  0D02               	mullw	2
  1291  0011C6  0E01               	movlw	low _dpowers
  1292  0011C8  24F3               	addwf	prodl,w,c
  1293  0011CA  6EF6               	movwf	tblptrl,c
  1294  0011CC  0E10               	movlw	high _dpowers
  1295  0011CE  20F4               	addwfc	prodh,w,c
  1296  0011D0  6EF7               	movwf	tblptrh,c
  1297  0011D2                     	if	1	;There are 3 active tblptr bytes
  1298  0011D2  6AF8               	clrf	tblptru,c
  1299  0011D4  0E00               	movlw	low (__mediumconst shr (0+16))
  1300  0011D6  22F8               	addwfc	tblptru,f,c
  1301  0011D8                     	endif
  1302  0011D8  0009               	tblrd		*+
  1303  0011DA  CFF5 F086          	movff	tablat,___lwdiv@divisor
  1304  0011DE  000A               	tblrd		*-
  1305  0011E0  CFF5 F087          	movff	tablat,___lwdiv@divisor+1
  1306  0011E4  C09D  F084         	movff	sprintf@val,___lwdiv@dividend
  1307  0011E8  C09E  F085         	movff	sprintf@val+1,___lwdiv@dividend+1
  1308  0011EC  EC66  F00B         	call	___lwdiv	;wreg free
  1309  0011F0  C084  F08B         	movff	?___lwdiv,___lwmod@dividend
  1310  0011F4  C085  F08C         	movff	?___lwdiv+1,___lwmod@dividend+1
  1311  0011F8  0E00               	movlw	0
  1312  0011FA  0100               	movlb	0	; () banked
  1313  0011FC  6F8E               	movwf	(___lwmod@divisor+1)& (0+255),b
  1314  0011FE  0E0A               	movlw	10
  1315  001200  6F8D               	movwf	___lwmod@divisor& (0+255),b
  1316  001202  ECD5  F00B         	call	___lwmod	;wreg free
  1317  001206  0100               	movlb	0	; () banked
  1318  001208  518B               	movf	?___lwmod& (0+255),w,b
  1319  00120A  0F30               	addlw	48
  1320  00120C  0100               	movlb	0	; () banked
  1321  00120E  6F9F               	movwf	sprintf@c& (0+255),b
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;doprnt.c: 1523: }
  1325                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1326  001210  C090  FFD9         	movff	sprintf@sp,fsr2l
  1327  001214  C091  FFDA         	movff	sprintf@sp+1,fsr2h
  1328  001218  C09F  FFDF         	movff	sprintf@c,indf2
  1329                           
  1330                           ; BSR set to: 0
  1331  00121C  0100               	movlb	0	; () banked
  1332  00121E  4B90               	infsnz	sprintf@sp& (0+255),f,b
  1333  001220  2B91               	incf	(sprintf@sp+1)& (0+255),f,b
  1334  001222                     l2625:
  1335                           
  1336                           ; BSR set to: 0
  1337  001222  0100               	movlb	0	; () banked
  1338  001224  0798               	decf	sprintf@prec& (0+255),f,b
  1339  001226  0100               	movlb	0	; () banked
  1340  001228  2998               	incf	sprintf@prec& (0+255),w,b
  1341  00122A  A4D8               	btfss	status,2,c
  1342  00122C  D7C9               	goto	l2619
  1343  00122E                     l2627:
  1344  00122E  C092  FFF6         	movff	sprintf@f,tblptrl
  1345  001232  C093  FFF7         	movff	sprintf@f+1,tblptrh
  1346  001236  0100               	movlb	0	; () banked
  1347  001238  4B92               	infsnz	sprintf@f& (0+255),f,b
  1348  00123A  2B93               	incf	(sprintf@f+1)& (0+255),f,b
  1349  00123C                     	if	0	;tblptru may be non-zero
  1350  00123C                     	endif
  1351  00123C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1352  00123C  0E00               	movlw	low (__mediumconst shr (0+16))
  1353  00123E  6EF8               	movwf	tblptru,c
  1354  001240                     	endif
  1355  001240  0008               	tblrd		*
  1356  001242  CFF5 F09F          	movff	tablat,sprintf@c
  1357  001246  0100               	movlb	0	; () banked
  1358  001248  519F               	movf	sprintf@c& (0+255),w,b
  1359  00124A  A4D8               	btfss	status,2,c
  1360  00124C  D6F4               	goto	l2559
  1361  00124E                     l2629:
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;doprnt.c: 1538: *sp = 0;
  1365  00124E  C090  FFD9         	movff	sprintf@sp,fsr2l
  1366  001252  C091  FFDA         	movff	sprintf@sp+1,fsr2h
  1367  001256  0E00               	movlw	0
  1368  001258  6EDF               	movwf	indf2,c
  1369  00125A  0012               	return	
  1370  00125C                     __end_of_sprintf:
  1371                           	opt stack 0
  1372                           tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           prodh	equ	0xFF4
  1377                           prodl	equ	0xFF3
  1378                           indf0	equ	0xFEF
  1379                           postinc0	equ	0xFEE
  1380                           fsr0h	equ	0xFEA
  1381                           fsr0l	equ	0xFE9
  1382                           wreg	equ	0xFE8
  1383                           postdec1	equ	0xFE5
  1384                           fsr1l	equ	0xFE1
  1385                           indf2	equ	0xFDF
  1386                           postinc2	equ	0xFDE
  1387                           postdec2	equ	0xFDD
  1388                           fsr2h	equ	0xFDA
  1389                           fsr2l	equ	0xFD9
  1390                           status	equ	0xFD8
  1391                           
  1392 ;; *************** function ___lwmod *****************
  1393 ;; Defined at:
  1394 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  dividend        2    7[BANK0 ] unsigned int 
  1397 ;;  divisor         2    9[BANK0 ] unsigned int 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  counter         1   11[BANK0 ] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  2    7[BANK0 ] unsigned int 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1409 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;Total ram usage:        5 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    6
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_sprintf
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text2
  1424  0017AA                     __ptext2:
  1425                           	opt stack 0
  1426  0017AA                     ___lwmod:
  1427                           	opt stack 23
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;incstack = 0
  1431  0017AA  0100               	movlb	0	; () banked
  1432  0017AC  518D               	movf	___lwmod@divisor& (0+255),w,b
  1433  0017AE  0100               	movlb	0	; () banked
  1434  0017B0  118E               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1435  0017B2  B4D8               	btfsc	status,2,c
  1436  0017B4  D026               	goto	l716
  1437                           
  1438                           ; BSR set to: 0
  1439  0017B6  0E01               	movlw	1
  1440  0017B8  0100               	movlb	0	; () banked
  1441  0017BA  6F8F               	movwf	___lwmod@counter& (0+255),b
  1442  0017BC  D006               	goto	l2443
  1443  0017BE                     l2441:
  1444                           
  1445                           ; BSR set to: 0
  1446  0017BE  0100               	movlb	0	; () banked
  1447  0017C0  90D8               	bcf	status,0,c
  1448  0017C2  378D               	rlcf	___lwmod@divisor& (0+255),f,b
  1449  0017C4  378E               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1450  0017C6  0100               	movlb	0	; () banked
  1451  0017C8  2B8F               	incf	___lwmod@counter& (0+255),f,b
  1452  0017CA                     l2443:
  1453                           
  1454                           ; BSR set to: 0
  1455  0017CA  0100               	movlb	0	; () banked
  1456  0017CC  AF8E               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1457  0017CE  D7F7               	goto	l2441
  1458  0017D0                     l2445:
  1459                           
  1460                           ; BSR set to: 0
  1461  0017D0  0100               	movlb	0	; () banked
  1462  0017D2  518D               	movf	___lwmod@divisor& (0+255),w,b
  1463  0017D4  0100               	movlb	0	; () banked
  1464  0017D6  5D8B               	subwf	___lwmod@dividend& (0+255),w,b
  1465  0017D8  0100               	movlb	0	; () banked
  1466  0017DA  518E               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1467  0017DC  0100               	movlb	0	; () banked
  1468  0017DE  598C               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1469  0017E0  A0D8               	btfss	status,0,c
  1470  0017E2  D008               	goto	l2449
  1471                           
  1472                           ; BSR set to: 0
  1473  0017E4  0100               	movlb	0	; () banked
  1474  0017E6  518D               	movf	___lwmod@divisor& (0+255),w,b
  1475  0017E8  0100               	movlb	0	; () banked
  1476  0017EA  5F8B               	subwf	___lwmod@dividend& (0+255),f,b
  1477  0017EC  0100               	movlb	0	; () banked
  1478  0017EE  518E               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1479  0017F0  0100               	movlb	0	; () banked
  1480  0017F2  5B8C               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1481  0017F4                     l2449:
  1482                           
  1483                           ; BSR set to: 0
  1484  0017F4  0100               	movlb	0	; () banked
  1485  0017F6  90D8               	bcf	status,0,c
  1486  0017F8  338E               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1487  0017FA  338D               	rrcf	___lwmod@divisor& (0+255),f,b
  1488                           
  1489                           ; BSR set to: 0
  1490  0017FC  0100               	movlb	0	; () banked
  1491  0017FE  2F8F               	decfsz	___lwmod@counter& (0+255),f,b
  1492  001800  D7E7               	goto	l2445
  1493  001802                     l716:
  1494                           
  1495                           ; BSR set to: 0
  1496  001802  C08B  F08B         	movff	___lwmod@dividend,?___lwmod
  1497  001806  C08C  F08C         	movff	___lwmod@dividend+1,?___lwmod+1
  1498                           
  1499                           ; BSR set to: 0
  1500  00180A  0012               	return		;funcret
  1501  00180C                     __end_of___lwmod:
  1502                           	opt stack 0
  1503                           tblptru	equ	0xFF8
  1504                           tblptrh	equ	0xFF7
  1505                           tblptrl	equ	0xFF6
  1506                           tablat	equ	0xFF5
  1507                           prodh	equ	0xFF4
  1508                           prodl	equ	0xFF3
  1509                           indf0	equ	0xFEF
  1510                           postinc0	equ	0xFEE
  1511                           fsr0h	equ	0xFEA
  1512                           fsr0l	equ	0xFE9
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1l	equ	0xFE1
  1516                           indf2	equ	0xFDF
  1517                           postinc2	equ	0xFDE
  1518                           postdec2	equ	0xFDD
  1519                           fsr2h	equ	0xFDA
  1520                           fsr2l	equ	0xFD9
  1521                           status	equ	0xFD8
  1522                           
  1523 ;; *************** function ___lwdiv *****************
  1524 ;; Defined at:
  1525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;  dividend        2    0[BANK0 ] unsigned int 
  1528 ;;  divisor         2    2[BANK0 ] unsigned int 
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;  quotient        2    5[BANK0 ] unsigned int 
  1531 ;;  counter         1    4[BANK0 ] unsigned char 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  2    0[BANK0 ] unsigned int 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2, status,0
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;Total ram usage:        7 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    6
  1548 ;; This function calls:
  1549 ;;		Nothing
  1550 ;; This function is called by:
  1551 ;;		_sprintf
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text3
  1556  0016CC                     __ptext3:
  1557                           	opt stack 0
  1558  0016CC                     ___lwdiv:
  1559                           	opt stack 23
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;incstack = 0
  1563  0016CC  0E00               	movlw	0
  1564  0016CE  0100               	movlb	0	; () banked
  1565  0016D0  6F8A               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1566  0016D2  0E00               	movlw	0
  1567  0016D4  6F89               	movwf	___lwdiv@quotient& (0+255),b
  1568                           
  1569                           ; BSR set to: 0
  1570  0016D6  0100               	movlb	0	; () banked
  1571  0016D8  5186               	movf	___lwdiv@divisor& (0+255),w,b
  1572  0016DA  0100               	movlb	0	; () banked
  1573  0016DC  1187               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1574  0016DE  B4D8               	btfsc	status,2,c
  1575  0016E0  D02C               	goto	l706
  1576                           
  1577                           ; BSR set to: 0
  1578  0016E2  0E01               	movlw	1
  1579  0016E4  0100               	movlb	0	; () banked
  1580  0016E6  6F88               	movwf	___lwdiv@counter& (0+255),b
  1581  0016E8  D006               	goto	l2423
  1582  0016EA                     l2421:
  1583                           
  1584                           ; BSR set to: 0
  1585  0016EA  0100               	movlb	0	; () banked
  1586  0016EC  90D8               	bcf	status,0,c
  1587  0016EE  3786               	rlcf	___lwdiv@divisor& (0+255),f,b
  1588  0016F0  3787               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1589  0016F2  0100               	movlb	0	; () banked
  1590  0016F4  2B88               	incf	___lwdiv@counter& (0+255),f,b
  1591  0016F6                     l2423:
  1592                           
  1593                           ; BSR set to: 0
  1594  0016F6  0100               	movlb	0	; () banked
  1595  0016F8  AF87               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1596  0016FA  D7F7               	goto	l2421
  1597  0016FC                     l2425:
  1598                           
  1599                           ; BSR set to: 0
  1600  0016FC  0100               	movlb	0	; () banked
  1601  0016FE  90D8               	bcf	status,0,c
  1602  001700  3789               	rlcf	___lwdiv@quotient& (0+255),f,b
  1603  001702  378A               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1604                           
  1605                           ; BSR set to: 0
  1606  001704  0100               	movlb	0	; () banked
  1607  001706  5186               	movf	___lwdiv@divisor& (0+255),w,b
  1608  001708  0100               	movlb	0	; () banked
  1609  00170A  5D84               	subwf	___lwdiv@dividend& (0+255),w,b
  1610  00170C  0100               	movlb	0	; () banked
  1611  00170E  5187               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1612  001710  0100               	movlb	0	; () banked
  1613  001712  5985               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1614  001714  A0D8               	btfss	status,0,c
  1615  001716  D00A               	goto	l2433
  1616                           
  1617                           ; BSR set to: 0
  1618  001718  0100               	movlb	0	; () banked
  1619  00171A  5186               	movf	___lwdiv@divisor& (0+255),w,b
  1620  00171C  0100               	movlb	0	; () banked
  1621  00171E  5F84               	subwf	___lwdiv@dividend& (0+255),f,b
  1622  001720  0100               	movlb	0	; () banked
  1623  001722  5187               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1624  001724  0100               	movlb	0	; () banked
  1625  001726  5B85               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1626                           
  1627                           ; BSR set to: 0
  1628  001728  0100               	movlb	0	; () banked
  1629  00172A  8189               	bsf	___lwdiv@quotient& (0+255),0,b
  1630  00172C                     l2433:
  1631                           
  1632                           ; BSR set to: 0
  1633  00172C  0100               	movlb	0	; () banked
  1634  00172E  90D8               	bcf	status,0,c
  1635  001730  3387               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1636  001732  3386               	rrcf	___lwdiv@divisor& (0+255),f,b
  1637                           
  1638                           ; BSR set to: 0
  1639  001734  0100               	movlb	0	; () banked
  1640  001736  2F88               	decfsz	___lwdiv@counter& (0+255),f,b
  1641  001738  D7E1               	goto	l2425
  1642  00173A                     l706:
  1643                           
  1644                           ; BSR set to: 0
  1645  00173A  C089  F084         	movff	___lwdiv@quotient,?___lwdiv
  1646  00173E  C08A  F085         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1647                           
  1648                           ; BSR set to: 0
  1649  001742  0012               	return		;funcret
  1650  001744                     __end_of___lwdiv:
  1651                           	opt stack 0
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           prodh	equ	0xFF4
  1657                           prodl	equ	0xFF3
  1658                           indf0	equ	0xFEF
  1659                           postinc0	equ	0xFEE
  1660                           fsr0h	equ	0xFEA
  1661                           fsr0l	equ	0xFE9
  1662                           wreg	equ	0xFE8
  1663                           postdec1	equ	0xFE5
  1664                           fsr1l	equ	0xFE1
  1665                           indf2	equ	0xFDF
  1666                           postinc2	equ	0xFDE
  1667                           postdec2	equ	0xFDD
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _SPIReadWrite *****************
  1673 ;; Defined at:
  1674 ;;		line 81 in file "SPI.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  byte            1    wreg     unsigned char 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  byte            1    0[BANK0 ] unsigned char 
  1679 ;;  r               1    1[BANK0 ] unsigned char 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      unsigned char 
  1682 ;; Registers used:
  1683 ;;		wreg, status,2
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;Total ram usage:        2 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:    6
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text4
  1704  001B9E                     __ptext4:
  1705                           	opt stack 0
  1706  001B9E                     _SPIReadWrite:
  1707                           	opt stack 24
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;incstack = 0
  1711                           ;SPIReadWrite@byte stored from wreg
  1712  001B9E  0100               	movlb	0	; () banked
  1713  001BA0  6F84               	movwf	SPIReadWrite@byte& (0+255),b
  1714                           
  1715                           ;SPI.c: 83: unsigned char r;
  1716                           ;SPI.c: 84: SSP1BUF = byte;
  1717  001BA2  C084  FFC9         	movff	SPIReadWrite@byte,4041	;volatile
  1718  001BA6                     l252:
  1719  001BA6  A69E               	btfss	3998,3,c	;volatile
  1720  001BA8  D7FE               	goto	l252
  1721                           
  1722                           ;SPI.c: 86: PIR1bits.SSPIF = 0;
  1723  001BAA  969E               	bcf	3998,3,c	;volatile
  1724                           
  1725                           ;SPI.c: 87: r = SSP1BUF;
  1726  001BAC  CFC9 F085          	movff	4041,SPIReadWrite@r	;volatile
  1727                           
  1728                           ;SPI.c: 88: return r;
  1729  001BB0  0100               	movlb	0	; () banked
  1730  001BB2  5185               	movf	SPIReadWrite@r& (0+255),w,b
  1731                           
  1732                           ; BSR set to: 0
  1733  001BB4  0012               	return		;funcret
  1734  001BB6                     __end_of_SPIReadWrite:
  1735                           	opt stack 0
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           prodh	equ	0xFF4
  1741                           prodl	equ	0xFF3
  1742                           indf0	equ	0xFEF
  1743                           postinc0	equ	0xFEE
  1744                           fsr0h	equ	0xFEA
  1745                           fsr0l	equ	0xFE9
  1746                           wreg	equ	0xFE8
  1747                           postdec1	equ	0xFE5
  1748                           fsr1l	equ	0xFE1
  1749                           indf2	equ	0xFDF
  1750                           postinc2	equ	0xFDE
  1751                           postdec2	equ	0xFDD
  1752                           fsr2h	equ	0xFDA
  1753                           fsr2l	equ	0xFD9
  1754                           status	equ	0xFD8
  1755                           
  1756 ;; *************** function _LCDWriteLine *****************
  1757 ;; Defined at:
  1758 ;;		line 59 in file "LCD.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;  str             2   13[BANK0 ] PTR const unsigned char 
  1761 ;;		 -> line1str(17), line2str(17), LCDScroll@str(17), 
  1762 ;;  line            1   15[BANK0 ] unsigned char 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;		None
  1765 ;; Return value:  Size  Location     Type
  1766 ;;		None               void
  1767 ;; Registers used:
  1768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1774 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1777 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1778 ;;Total ram usage:        4 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:   10
  1781 ;; This function calls:
  1782 ;;		_LCDSetPos
  1783 ;;		_LCDWriteData
  1784 ;; This function is called by:
  1785 ;;		_main
  1786 ;;		_LCDScroll
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text5
  1791  00159A                     __ptext5:
  1792                           	opt stack 0
  1793  00159A                     _LCDWriteLine:
  1794                           	opt stack 20
  1795                           
  1796                           ;LCD.c: 60: if (line >= 2) {
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;incstack = 0
  1800  00159A  0E01               	movlw	1
  1801  00159C  0100               	movlb	0	; () banked
  1802  00159E  6593               	cpfsgt	LCDWriteLine@line& (0+255),b
  1803  0015A0  D001               	goto	l2483
  1804  0015A2  0012               	return	
  1805  0015A4                     l2483:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;LCD.c: 62: }
  1809                           ;LCD.c: 63: LCDSetPos(line, 0);
  1810  0015A4  C093  F08A         	movff	LCDWriteLine@line,LCDSetPos@row
  1811  0015A8  0100               	movlb	0	; () banked
  1812  0015AA  6B8B               	clrf	(LCDSetPos@row+1)& (0+255),b
  1813  0015AC  0E00               	movlw	0
  1814  0015AE  0100               	movlb	0	; () banked
  1815  0015B0  6F8D               	movwf	(LCDSetPos@col+1)& (0+255),b
  1816  0015B2  0E00               	movlw	0
  1817  0015B4  6F8C               	movwf	LCDSetPos@col& (0+255),b
  1818  0015B6  ECA2  F00B         	call	_LCDSetPos	;wreg free
  1819                           
  1820                           ;LCD.c: 64: while (*str) {
  1821  0015BA  D038               	goto	l2503
  1822  0015BC                     l2485:
  1823                           
  1824                           ;LCD.c: 65: if (*str == '\n') {
  1825  0015BC  C091  FFD9         	movff	LCDWriteLine@str,fsr2l
  1826  0015C0  C092  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1827  0015C4  0E0A               	movlw	10
  1828  0015C6  18DE               	xorwf	postinc2,w,c
  1829  0015C8  A4D8               	btfss	status,2,c
  1830  0015CA  D00A               	goto	l2493
  1831                           
  1832                           ;LCD.c: 66: ++line;
  1833  0015CC  0100               	movlb	0	; () banked
  1834  0015CE  2B93               	incf	LCDWriteLine@line& (0+255),f,b
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;LCD.c: 67: if (line == 2) {
  1838  0015D0  0E02               	movlw	2
  1839  0015D2  0100               	movlb	0	; () banked
  1840  0015D4  1993               	xorwf	LCDWriteLine@line& (0+255),w,b
  1841  0015D6  A4D8               	btfss	status,2,c
  1842  0015D8  D003               	goto	l2493
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;LCD.c: 68: line = 0;
  1846  0015DA  0E00               	movlw	0
  1847  0015DC  0100               	movlb	0	; () banked
  1848  0015DE  6F93               	movwf	LCDWriteLine@line& (0+255),b
  1849  0015E0                     l2493:
  1850                           
  1851                           ;LCD.c: 69: }
  1852                           ;LCD.c: 70: }
  1853                           ;LCD.c: 71: if (*str == '\r' || *str == '\n') {
  1854  0015E0  C091  FFD9         	movff	LCDWriteLine@str,fsr2l
  1855  0015E4  C092  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1856  0015E8  0E0D               	movlw	13
  1857  0015EA  18DE               	xorwf	postinc2,w,c
  1858  0015EC  B4D8               	btfsc	status,2,c
  1859  0015EE  D008               	goto	l2497
  1860  0015F0  C091  FFD9         	movff	LCDWriteLine@str,fsr2l
  1861  0015F4  C092  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1862  0015F8  0E0A               	movlw	10
  1863  0015FA  18DE               	xorwf	postinc2,w,c
  1864  0015FC  A4D8               	btfss	status,2,c
  1865  0015FE  D00C               	goto	l2499
  1866  001600                     l2497:
  1867                           
  1868                           ;LCD.c: 72: LCDSetPos(line, 0);
  1869  001600  C093  F08A         	movff	LCDWriteLine@line,LCDSetPos@row
  1870  001604  0100               	movlb	0	; () banked
  1871  001606  6B8B               	clrf	(LCDSetPos@row+1)& (0+255),b
  1872  001608  0E00               	movlw	0
  1873  00160A  0100               	movlb	0	; () banked
  1874  00160C  6F8D               	movwf	(LCDSetPos@col+1)& (0+255),b
  1875  00160E  0E00               	movlw	0
  1876  001610  6F8C               	movwf	LCDSetPos@col& (0+255),b
  1877  001612  ECA2  F00B         	call	_LCDSetPos	;wreg free
  1878                           
  1879                           ;LCD.c: 73: } else {
  1880  001616  D007               	goto	l2501
  1881  001618                     l2499:
  1882                           
  1883                           ;LCD.c: 74: LCDWriteData(*str);
  1884  001618  C091  FFD9         	movff	LCDWriteLine@str,fsr2l
  1885  00161C  C092  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1886  001620  50DF               	movf	indf2,w,c
  1887  001622  ECB3  F00D         	call	_LCDWriteData
  1888  001626                     l2501:
  1889                           
  1890                           ;LCD.c: 75: }
  1891                           ;LCD.c: 76: ++str;
  1892  001626  0100               	movlb	0	; () banked
  1893  001628  4B91               	infsnz	LCDWriteLine@str& (0+255),f,b
  1894  00162A  2B92               	incf	(LCDWriteLine@str+1)& (0+255),f,b
  1895  00162C                     l2503:
  1896  00162C  C091  FFD9         	movff	LCDWriteLine@str,fsr2l
  1897  001630  C092  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  1898  001634  50DF               	movf	indf2,w,c
  1899  001636  B4D8               	btfsc	status,2,c
  1900  001638  0012               	return	
  1901  00163A  D7C0               	goto	l2485
  1902  00163C                     __end_of_LCDWriteLine:
  1903                           	opt stack 0
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           prodh	equ	0xFF4
  1909                           prodl	equ	0xFF3
  1910                           indf0	equ	0xFEF
  1911                           postinc0	equ	0xFEE
  1912                           fsr0h	equ	0xFEA
  1913                           fsr0l	equ	0xFE9
  1914                           wreg	equ	0xFE8
  1915                           postdec1	equ	0xFE5
  1916                           fsr1l	equ	0xFE1
  1917                           indf2	equ	0xFDF
  1918                           postinc2	equ	0xFDE
  1919                           postdec2	equ	0xFDD
  1920                           fsr2h	equ	0xFDA
  1921                           fsr2l	equ	0xFD9
  1922                           status	equ	0xFD8
  1923                           
  1924 ;; *************** function _LCDInit *****************
  1925 ;; Defined at:
  1926 ;;		line 24 in file "LCD.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;		None
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  functionSet     1    7[BANK0 ] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;		None               void
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;Total ram usage:        2 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    9
  1947 ;; This function calls:
  1948 ;;		_LCDInitCommand
  1949 ;;		_LCDInitPort
  1950 ;; This function is called by:
  1951 ;;		_main
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text6
  1956  00180C                     __ptext6:
  1957                           	opt stack 0
  1958  00180C                     _LCDInit:
  1959                           	opt stack 21
  1960                           
  1961                           ;LCD.c: 25: char functionSet = 0b00111000;
  1962                           
  1963                           ;incstack = 0
  1964  00180C  0E38               	movlw	56
  1965  00180E  0100               	movlb	0	; () banked
  1966  001810  6F8B               	movwf	LCDInit@functionSet& (0+255),b
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;LCD.c: 26: LCDInitPort();
  1970  001812  EC34  F00D         	call	_LCDInitPort	;wreg free
  1971                           
  1972                           ;LCD.c: 27: _delay((unsigned long)((10)*(40000000L/4000.0)));
  1973  001816  0E82               	movlw	130
  1974  001818  0100               	movlb	0	; () banked
  1975  00181A  6F8A               	movwf	??_LCDInit& (0+255),b
  1976  00181C  0EDE               	movlw	222
  1977  00181E                     u2417:
  1978  00181E  2EE8               	decfsz	wreg,f,c
  1979  001820  D7FE               	goto	u2417
  1980  001822  2F8A               	decfsz	??_LCDInit& (0+255),f,b
  1981  001824  D7FC               	goto	u2417
  1982                           
  1983                           ;LCD.c: 37: LCDInitCommand(functionSet);
  1984  001826  0100               	movlb	0	; () banked
  1985  001828  518B               	movf	LCDInit@functionSet& (0+255),w,b
  1986  00182A  ECFD  F00D         	call	_LCDInitCommand
  1987                           
  1988                           ;LCD.c: 38: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  1989  00182E  0E85               	movlw	133
  1990  001830                     u2427:
  1991  001830  2EE8               	decfsz	wreg,f,c
  1992  001832  D7FE               	goto	u2427
  1993  001834  F000               	nop	
  1994                           
  1995                           ;LCD.c: 39: LCDInitCommand(0b00001100);
  1996  001836  0E0C               	movlw	12
  1997  001838  ECFD  F00D         	call	_LCDInitCommand
  1998                           
  1999                           ;LCD.c: 40: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2000  00183C  0E85               	movlw	133
  2001  00183E                     u2437:
  2002  00183E  2EE8               	decfsz	wreg,f,c
  2003  001840  D7FE               	goto	u2437
  2004  001842  F000               	nop	
  2005                           
  2006                           ;LCD.c: 41: LCDInitCommand(0b00000001);
  2007  001844  0E01               	movlw	1
  2008  001846  ECFD  F00D         	call	_LCDInitCommand
  2009                           
  2010                           ;LCD.c: 42: _delay((unsigned long)((1700)*(40000000L/4000000.0)));
  2011  00184A  0E17               	movlw	23
  2012  00184C  0100               	movlb	0	; () banked
  2013  00184E  6F8A               	movwf	??_LCDInit& (0+255),b
  2014  001850  0E12               	movlw	18
  2015  001852                     u2447:
  2016  001852  2EE8               	decfsz	wreg,f,c
  2017  001854  D7FE               	goto	u2447
  2018  001856  2F8A               	decfsz	??_LCDInit& (0+255),f,b
  2019  001858  D7FC               	goto	u2447
  2020  00185A  D000               	nop2	
  2021                           
  2022                           ;LCD.c: 43: LCDInitCommand(0b00000110);
  2023  00185C  0E06               	movlw	6
  2024  00185E  ECFD  F00D         	call	_LCDInitCommand
  2025                           
  2026                           ;LCD.c: 44: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2027  001862  0E85               	movlw	133
  2028  001864                     u2457:
  2029  001864  2EE8               	decfsz	wreg,f,c
  2030  001866  D7FE               	goto	u2457
  2031  001868  F000               	nop	
  2032  00186A  0012               	return		;funcret
  2033  00186C                     __end_of_LCDInit:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           indf0	equ	0xFEF
  2042                           postinc0	equ	0xFEE
  2043                           fsr0h	equ	0xFEA
  2044                           fsr0l	equ	0xFE9
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           indf2	equ	0xFDF
  2049                           postinc2	equ	0xFDE
  2050                           postdec2	equ	0xFDD
  2051                           fsr2h	equ	0xFDA
  2052                           fsr2l	equ	0xFD9
  2053                           status	equ	0xFD8
  2054                           
  2055 ;; *************** function _LCDInitPort *****************
  2056 ;; Defined at:
  2057 ;;		line 287 in file "LCD.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;		None
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;		None
  2062 ;; Return value:  Size  Location     Type
  2063 ;;		None               void
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;Total ram usage:        0 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    7
  2078 ;; This function calls:
  2079 ;;		_WriteRegister
  2080 ;; This function is called by:
  2081 ;;		_LCDInit
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text7
  2086  001A68                     __ptext7:
  2087                           	opt stack 0
  2088  001A68                     _LCDInitPort:
  2089                           	opt stack 22
  2090                           
  2091                           ;LCD.c: 288: TRISAbits.TRISA2 = 0;
  2092                           
  2093                           ;incstack = 0
  2094  001A68  9492               	bcf	3986,2,c	;volatile
  2095                           
  2096                           ;LCD.c: 289: LATAbits.LATA2 = 1;
  2097  001A6A  8489               	bsf	3977,2,c	;volatile
  2098                           
  2099                           ;LCD.c: 304: TRISCbits.TRISC3 = 0;
  2100  001A6C  9694               	bcf	3988,3,c	;volatile
  2101                           
  2102                           ;LCD.c: 305: TRISCbits.TRISC5 = 0;
  2103  001A6E  9A94               	bcf	3988,5,c	;volatile
  2104                           
  2105                           ;LCD.c: 307: SSPCON1 = 0x21;
  2106  001A70  0E21               	movlw	33
  2107  001A72  6EC6               	movwf	4038,c	;volatile
  2108                           
  2109                           ;LCD.c: 308: SSPSTATbits.CKE = 1;
  2110  001A74  8CC7               	bsf	4039,6,c	;volatile
  2111                           
  2112                           ;LCD.c: 309: SSPIF = 0;
  2113  001A76  969E               	bcf	3998,3,c	;volatile
  2114                           
  2115                           ;LCD.c: 310: WriteRegister(0, 0);
  2116  001A78  0E00               	movlw	0
  2117  001A7A  0100               	movlb	0	; () banked
  2118  001A7C  6F84               	movwf	WriteRegister@b& (0+255),b
  2119  001A7E  0E00               	movlw	0
  2120  001A80  EC7D  F00D         	call	_WriteRegister
  2121                           
  2122                           ;LCD.c: 311: WriteRegister(1, 0);
  2123  001A84  0E00               	movlw	0
  2124  001A86  0100               	movlb	0	; () banked
  2125  001A88  6F84               	movwf	WriteRegister@b& (0+255),b
  2126  001A8A  0E01               	movlw	1
  2127  001A8C  EC7D  F00D         	call	_WriteRegister
  2128                           
  2129                           ;LCD.c: 312: WriteRegister(0x12, 0);
  2130  001A90  0E00               	movlw	0
  2131  001A92  0100               	movlb	0	; () banked
  2132  001A94  6F84               	movwf	WriteRegister@b& (0+255),b
  2133  001A96  0E12               	movlw	18
  2134  001A98  EC7D  F00D         	call	_WriteRegister
  2135  001A9C  0012               	return		;funcret
  2136  001A9E                     __end_of_LCDInitPort:
  2137                           	opt stack 0
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           prodh	equ	0xFF4
  2143                           prodl	equ	0xFF3
  2144                           indf0	equ	0xFEF
  2145                           postinc0	equ	0xFEE
  2146                           fsr0h	equ	0xFEA
  2147                           fsr0l	equ	0xFE9
  2148                           wreg	equ	0xFE8
  2149                           postdec1	equ	0xFE5
  2150                           fsr1l	equ	0xFE1
  2151                           indf2	equ	0xFDF
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8
  2157                           
  2158 ;; *************** function _LCDInitCommand *****************
  2159 ;; Defined at:
  2160 ;;		line 193 in file "LCD.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  command         1    wreg     unsigned char 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  command         1    5[BANK0 ] unsigned char 
  2165 ;; Return value:  Size  Location     Type
  2166 ;;		None               void
  2167 ;; Registers used:
  2168 ;;		wreg, status,2, status,0, cstack
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;Total ram usage:        1 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    8
  2181 ;; This function calls:
  2182 ;;		_LCDWriteByte
  2183 ;; This function is called by:
  2184 ;;		_LCDInit
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text8
  2189  001BFA                     __ptext8:
  2190                           	opt stack 0
  2191  001BFA                     _LCDInitCommand:
  2192                           	opt stack 21
  2193                           
  2194                           ;incstack = 0
  2195                           ;LCDInitCommand@command stored from wreg
  2196  001BFA  0100               	movlb	0	; () banked
  2197  001BFC  6F89               	movwf	LCDInitCommand@command& (0+255),b
  2198                           
  2199                           ;LCD.c: 194: LCDWriteByte(command, 0);
  2200  001BFE  0E00               	movlw	0
  2201  001C00  0100               	movlb	0	; () banked
  2202  001C02  6F86               	movwf	LCDWriteByte@rs& (0+255),b
  2203  001C04  0100               	movlb	0	; () banked
  2204  001C06  5189               	movf	LCDInitCommand@command& (0+255),w,b
  2205  001C08  EC8D  F00C         	call	_LCDWriteByte
  2206  001C0C  0012               	return		;funcret
  2207  001C0E                     __end_of_LCDInitCommand:
  2208                           	opt stack 0
  2209                           tblptru	equ	0xFF8
  2210                           tblptrh	equ	0xFF7
  2211                           tblptrl	equ	0xFF6
  2212                           tablat	equ	0xFF5
  2213                           prodh	equ	0xFF4
  2214                           prodl	equ	0xFF3
  2215                           indf0	equ	0xFEF
  2216                           postinc0	equ	0xFEE
  2217                           fsr0h	equ	0xFEA
  2218                           fsr0l	equ	0xFE9
  2219                           wreg	equ	0xFE8
  2220                           postdec1	equ	0xFE5
  2221                           fsr1l	equ	0xFE1
  2222                           indf2	equ	0xFDF
  2223                           postinc2	equ	0xFDE
  2224                           postdec2	equ	0xFDD
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _LCDClearLine *****************
  2230 ;; Defined at:
  2231 ;;		line 80 in file "LCD.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  line            1    wreg     unsigned char 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  line            1   14[BANK0 ] unsigned char 
  2236 ;;  c               1   13[BANK0 ] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;		None               void
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;Total ram usage:        2 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:   10
  2253 ;; This function calls:
  2254 ;;		_LCDSetPos
  2255 ;;		_LCDWriteData
  2256 ;; This function is called by:
  2257 ;;		_main
  2258 ;;		_LCDScroll
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text9
  2263  0019EC                     __ptext9:
  2264                           	opt stack 0
  2265  0019EC                     _LCDClearLine:
  2266                           	opt stack 20
  2267                           
  2268                           ;incstack = 0
  2269                           ;LCDClearLine@line stored from wreg
  2270  0019EC  0100               	movlb	0	; () banked
  2271  0019EE  6F92               	movwf	LCDClearLine@line& (0+255),b
  2272                           
  2273                           ;LCD.c: 81: char c = 0;
  2274  0019F0  0E00               	movlw	0
  2275  0019F2  0100               	movlb	0	; () banked
  2276  0019F4  6F91               	movwf	LCDClearLine@c& (0+255),b
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;LCD.c: 82: if (line >= 2) {
  2280  0019F6  0E01               	movlw	1
  2281  0019F8  0100               	movlb	0	; () banked
  2282  0019FA  6592               	cpfsgt	LCDClearLine@line& (0+255),b
  2283  0019FC  D001               	goto	l2511
  2284  0019FE  0012               	return	
  2285  001A00                     l2511:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;LCD.c: 84: }
  2289                           ;LCD.c: 85: LCDSetPos(line, 0);
  2290  001A00  C092  F08A         	movff	LCDClearLine@line,LCDSetPos@row
  2291  001A04  0100               	movlb	0	; () banked
  2292  001A06  6B8B               	clrf	(LCDSetPos@row+1)& (0+255),b
  2293  001A08  0E00               	movlw	0
  2294  001A0A  0100               	movlb	0	; () banked
  2295  001A0C  6F8D               	movwf	(LCDSetPos@col+1)& (0+255),b
  2296  001A0E  0E00               	movlw	0
  2297  001A10  6F8C               	movwf	LCDSetPos@col& (0+255),b
  2298  001A12  ECA2  F00B         	call	_LCDSetPos	;wreg free
  2299                           
  2300                           ;LCD.c: 86: while (c < 16) {
  2301  001A16  D005               	goto	l2517
  2302  001A18                     l2513:
  2303                           
  2304                           ;LCD.c: 87: LCDWriteData(' ');
  2305  001A18  0E20               	movlw	32
  2306  001A1A  ECB3  F00D         	call	_LCDWriteData
  2307                           
  2308                           ;LCD.c: 88: ++c;
  2309  001A1E  0100               	movlb	0	; () banked
  2310  001A20  2B91               	incf	LCDClearLine@c& (0+255),f,b
  2311  001A22                     l2517:
  2312  001A22  0E0F               	movlw	15
  2313  001A24  0100               	movlb	0	; () banked
  2314  001A26  6591               	cpfsgt	LCDClearLine@c& (0+255),b
  2315  001A28  D7F7               	goto	l2513
  2316  001A2A  0012               	return	
  2317  001A2C                     __end_of_LCDClearLine:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           indf0	equ	0xFEF
  2326                           postinc0	equ	0xFEE
  2327                           fsr0h	equ	0xFEA
  2328                           fsr0l	equ	0xFE9
  2329                           wreg	equ	0xFE8
  2330                           postdec1	equ	0xFE5
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _LCDWriteData *****************
  2340 ;; Defined at:
  2341 ;;		line 197 in file "LCD.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  c               1    wreg     unsigned char 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  c               1    5[BANK0 ] unsigned char 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;		None               void
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;Total ram usage:        1 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    8
  2362 ;; This function calls:
  2363 ;;		_LCDWriteByte
  2364 ;;		_shortDelay
  2365 ;;		_wait
  2366 ;; This function is called by:
  2367 ;;		_LCDWriteLine
  2368 ;;		_LCDClearLine
  2369 ;;		_LCDPutStr
  2370 ;;		_LCDPutChar
  2371 ;;		_LCDLoadCustomChar
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text10
  2376  001B66                     __ptext10:
  2377                           	opt stack 0
  2378  001B66                     _LCDWriteData:
  2379                           	opt stack 21
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;incstack = 0
  2383                           ;LCDWriteData@c stored from wreg
  2384  001B66  0100               	movlb	0	; () banked
  2385  001B68  6F89               	movwf	LCDWriteData@c& (0+255),b
  2386                           
  2387                           ;LCD.c: 198: wait();
  2388  001B6A  EC45  F00E         	call	_wait	;wreg free
  2389                           
  2390                           ;LCD.c: 199: LCDWriteByte(c, 1);
  2391  001B6E  0E01               	movlw	1
  2392  001B70  0100               	movlb	0	; () banked
  2393  001B72  6F86               	movwf	LCDWriteByte@rs& (0+255),b
  2394  001B74  0100               	movlb	0	; () banked
  2395  001B76  5189               	movf	LCDWriteData@c& (0+255),w,b
  2396  001B78  EC8D  F00C         	call	_LCDWriteByte
  2397                           
  2398                           ;LCD.c: 200: shortDelay();
  2399  001B7C  EC3B  F00E         	call	_shortDelay	;wreg free
  2400  001B80  0012               	return		;funcret
  2401  001B82                     __end_of_LCDWriteData:
  2402                           	opt stack 0
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           indf0	equ	0xFEF
  2410                           postinc0	equ	0xFEE
  2411                           fsr0h	equ	0xFEA
  2412                           fsr0l	equ	0xFE9
  2413                           wreg	equ	0xFE8
  2414                           postdec1	equ	0xFE5
  2415                           fsr1l	equ	0xFE1
  2416                           indf2	equ	0xFDF
  2417                           postinc2	equ	0xFDE
  2418                           postdec2	equ	0xFDD
  2419                           fsr2h	equ	0xFDA
  2420                           fsr2l	equ	0xFD9
  2421                           status	equ	0xFD8
  2422                           
  2423 ;; *************** function _LCDSetPos *****************
  2424 ;; Defined at:
  2425 ;;		line 96 in file "LCD.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;  row             2    6[BANK0 ] int 
  2428 ;;  col             2    8[BANK0 ] int 
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;  pos             2   11[BANK0 ] int 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;		None               void
  2433 ;; Registers used:
  2434 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2440 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;Total ram usage:        7 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    9
  2447 ;; This function calls:
  2448 ;;		_LCDCommand
  2449 ;;		_calculateBase
  2450 ;; This function is called by:
  2451 ;;		_LCDWriteLine
  2452 ;;		_LCDClearLine
  2453 ;;		_LCDReadLine
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text11
  2458  001744                     __ptext11:
  2459                           	opt stack 0
  2460  001744                     _LCDSetPos:
  2461                           	opt stack 20
  2462                           
  2463                           ;LCD.c: 97: int pos;
  2464                           ;LCD.c: 98: if (row < 0 || col < 0 || row >= 2 || col >= 16) {
  2465                           
  2466                           ;incstack = 0
  2467  001744  0100               	movlb	0	; () banked
  2468  001746  BF8B               	btfsc	(LCDSetPos@row+1)& (0+255),7,b
  2469  001748  0012               	return	
  2470                           
  2471                           ; BSR set to: 0
  2472  00174A  0100               	movlb	0	; () banked
  2473  00174C  BF8D               	btfsc	(LCDSetPos@col+1)& (0+255),7,b
  2474  00174E  0012               	return	
  2475                           
  2476                           ; BSR set to: 0
  2477  001750  0100               	movlb	0	; () banked
  2478  001752  BF8B               	btfsc	(LCDSetPos@row+1)& (0+255),7,b
  2479  001754  D008               	goto	l2409
  2480  001756  0100               	movlb	0	; () banked
  2481  001758  518B               	movf	(LCDSetPos@row+1)& (0+255),w,b
  2482  00175A  E126               	bnz	l85
  2483  00175C  0E02               	movlw	2
  2484  00175E  0100               	movlb	0	; () banked
  2485  001760  5D8A               	subwf	LCDSetPos@row& (0+255),w,b
  2486  001762  B0D8               	btfsc	status,0,c
  2487  001764  0012               	return	
  2488  001766                     l2409:
  2489                           
  2490                           ; BSR set to: 0
  2491  001766  0100               	movlb	0	; () banked
  2492  001768  BF8D               	btfsc	(LCDSetPos@col+1)& (0+255),7,b
  2493  00176A  D008               	goto	l2411
  2494  00176C  0100               	movlb	0	; () banked
  2495  00176E  518D               	movf	(LCDSetPos@col+1)& (0+255),w,b
  2496  001770  E11B               	bnz	l85
  2497  001772  0E10               	movlw	16
  2498  001774  0100               	movlb	0	; () banked
  2499  001776  5D8C               	subwf	LCDSetPos@col& (0+255),w,b
  2500  001778  B0D8               	btfsc	status,0,c
  2501  00177A  0012               	return	
  2502  00177C                     l2411:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;LCD.c: 100: }
  2506                           ;LCD.c: 101: pos = calculateBase(row) + col;
  2507  00177C  0100               	movlb	0	; () banked
  2508  00177E  518A               	movf	LCDSetPos@row& (0+255),w,b
  2509  001780  EC68  F00D         	call	_calculateBase
  2510  001784  0100               	movlb	0	; () banked
  2511  001786  6F8E               	movwf	??_LCDSetPos& (0+255),b
  2512  001788  0100               	movlb	0	; () banked
  2513  00178A  518E               	movf	??_LCDSetPos& (0+255),w,b
  2514  00178C  0100               	movlb	0	; () banked
  2515  00178E  258C               	addwf	LCDSetPos@col& (0+255),w,b
  2516  001790  0100               	movlb	0	; () banked
  2517  001792  6F8F               	movwf	LCDSetPos@pos& (0+255),b
  2518  001794  0E00               	movlw	0
  2519  001796  0100               	movlb	0	; () banked
  2520  001798  218D               	addwfc	(LCDSetPos@col+1)& (0+255),w,b
  2521  00179A  0100               	movlb	0	; () banked
  2522  00179C  6F90               	movwf	(LCDSetPos@pos+1)& (0+255),b
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;LCD.c: 102: LCDCommand(128 + pos);
  2526  00179E  0100               	movlb	0	; () banked
  2527  0017A0  518F               	movf	LCDSetPos@pos& (0+255),w,b
  2528  0017A2  0F80               	addlw	128
  2529  0017A4  ECC1  F00D         	call	_LCDCommand
  2530  0017A8                     l85:
  2531  0017A8  0012               	return		;funcret
  2532  0017AA                     __end_of_LCDSetPos:
  2533                           	opt stack 0
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           prodh	equ	0xFF4
  2539                           prodl	equ	0xFF3
  2540                           indf0	equ	0xFEF
  2541                           postinc0	equ	0xFEE
  2542                           fsr0h	equ	0xFEA
  2543                           fsr0l	equ	0xFE9
  2544                           wreg	equ	0xFE8
  2545                           postdec1	equ	0xFE5
  2546                           fsr1l	equ	0xFE1
  2547                           indf2	equ	0xFDF
  2548                           postinc2	equ	0xFDE
  2549                           postdec2	equ	0xFDD
  2550                           fsr2h	equ	0xFDA
  2551                           fsr2l	equ	0xFD9
  2552                           status	equ	0xFD8
  2553                           
  2554 ;; *************** function _calculateBase *****************
  2555 ;; Defined at:
  2556 ;;		line 225 in file "LCD.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  line            1    wreg     unsigned char 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  line            1    1[BANK0 ] unsigned char 
  2561 ;;  base            1    0[BANK0 ] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      unsigned char 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0, prodl, prodh
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;Total ram usage:        2 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; Hardware stack levels required when called:    6
  2578 ;; This function calls:
  2579 ;;		Nothing
  2580 ;; This function is called by:
  2581 ;;		_LCDSetPos
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           	psect	text12
  2586  001AD0                     __ptext12:
  2587                           	opt stack 0
  2588  001AD0                     _calculateBase:
  2589                           	opt stack 22
  2590                           
  2591                           ;incstack = 0
  2592                           ;calculateBase@line stored from wreg
  2593  001AD0  0100               	movlb	0	; () banked
  2594  001AD2  6F85               	movwf	calculateBase@line& (0+255),b
  2595                           
  2596                           ;LCD.c: 226: char base;
  2597                           ;LCD.c: 227: if (line % 2 == 0) {
  2598  001AD4  0100               	movlb	0	; () banked
  2599  001AD6  B185               	btfsc	calculateBase@line& (0+255),0,b
  2600  001AD8  D006               	goto	l2373
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;LCD.c: 228: base = line * 10;
  2604  001ADA  0100               	movlb	0	; () banked
  2605  001ADC  5185               	movf	calculateBase@line& (0+255),w,b
  2606  001ADE  0D0A               	mullw	10
  2607  001AE0  CFF3 F084          	movff	prodl,calculateBase@base
  2608                           
  2609                           ;LCD.c: 229: } else {
  2610  001AE4  D007               	goto	l2375
  2611  001AE6                     l2373:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;LCD.c: 230: base = 54 + line * 10;
  2615  001AE6  0100               	movlb	0	; () banked
  2616  001AE8  5185               	movf	calculateBase@line& (0+255),w,b
  2617  001AEA  0D0A               	mullw	10
  2618  001AEC  50F3               	movf	prodl,w,c
  2619  001AEE  0F36               	addlw	54
  2620  001AF0  0100               	movlb	0	; () banked
  2621  001AF2  6F84               	movwf	calculateBase@base& (0+255),b
  2622  001AF4                     l2375:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;LCD.c: 231: }
  2626                           ;LCD.c: 232: return base;
  2627  001AF4  0100               	movlb	0	; () banked
  2628  001AF6  5184               	movf	calculateBase@base& (0+255),w,b
  2629  001AF8  0012               	return	
  2630  001AFA                     __end_of_calculateBase:
  2631                           	opt stack 0
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           prodh	equ	0xFF4
  2637                           prodl	equ	0xFF3
  2638                           indf0	equ	0xFEF
  2639                           postinc0	equ	0xFEE
  2640                           fsr0h	equ	0xFEA
  2641                           fsr0l	equ	0xFE9
  2642                           wreg	equ	0xFE8
  2643                           postdec1	equ	0xFE5
  2644                           fsr1l	equ	0xFE1
  2645                           indf2	equ	0xFDF
  2646                           postinc2	equ	0xFDE
  2647                           postdec2	equ	0xFDD
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _LCDClear *****************
  2653 ;; Defined at:
  2654 ;;		line 47 in file "LCD.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;		None               void
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    9
  2675 ;; This function calls:
  2676 ;;		_LCDCommand
  2677 ;;		_longDelay
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text13
  2684  001C52                     __ptext13:
  2685                           	opt stack 0
  2686  001C52                     _LCDClear:
  2687                           	opt stack 21
  2688                           
  2689                           ;LCD.c: 48: LCDCommand(0b00000001);
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;incstack = 0
  2693  001C52  0E01               	movlw	1
  2694  001C54  ECC1  F00D         	call	_LCDCommand
  2695                           
  2696                           ;LCD.c: 49: longDelay();
  2697  001C58  EC07  F00E         	call	_longDelay	;wreg free
  2698  001C5C  0012               	return		;funcret
  2699  001C5E                     __end_of_LCDClear:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           indf0	equ	0xFEF
  2708                           postinc0	equ	0xFEE
  2709                           fsr0h	equ	0xFEA
  2710                           fsr0l	equ	0xFE9
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           postdec2	equ	0xFDD
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _longDelay *****************
  2722 ;; Defined at:
  2723 ;;		line 241 in file "LCD.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;		None               void
  2730 ;; Registers used:
  2731 ;;		wreg
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:        1 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    6
  2744 ;; This function calls:
  2745 ;;		Nothing
  2746 ;; This function is called by:
  2747 ;;		_LCDClear
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text14
  2752  001C0E                     __ptext14:
  2753                           	opt stack 0
  2754  001C0E                     _longDelay:
  2755                           	opt stack 23
  2756                           
  2757                           ;LCD.c: 243: _delay((unsigned long)((1660)*(40000000L/4000000.0)));
  2758                           
  2759                           ;incstack = 0
  2760  001C0E  0E16               	movlw	22
  2761  001C10  0100               	movlb	0	; () banked
  2762  001C12  6F84               	movwf	??_longDelay& (0+255),b
  2763  001C14  0E8E               	movlw	142
  2764  001C16                     u2467:
  2765  001C16  2EE8               	decfsz	wreg,f,c
  2766  001C18  D7FE               	goto	u2467
  2767  001C1A  2F84               	decfsz	??_longDelay& (0+255),f,b
  2768  001C1C  D7FC               	goto	u2467
  2769  001C1E  0012               	return		;funcret
  2770  001C20                     __end_of_longDelay:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           indf0	equ	0xFEF
  2779                           postinc0	equ	0xFEE
  2780                           fsr0h	equ	0xFEA
  2781                           fsr0l	equ	0xFE9
  2782                           wreg	equ	0xFE8
  2783                           postdec1	equ	0xFE5
  2784                           fsr1l	equ	0xFE1
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _LCDCommand *****************
  2793 ;; Defined at:
  2794 ;;		line 187 in file "LCD.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  command         1    wreg     unsigned char 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  command         1    5[BANK0 ] unsigned char 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;		None               void
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;Total ram usage:        1 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    8
  2815 ;; This function calls:
  2816 ;;		_LCDWriteByte
  2817 ;;		_shortDelay
  2818 ;;		_wait
  2819 ;; This function is called by:
  2820 ;;		_LCDClear
  2821 ;;		_LCDSetPos
  2822 ;;		_LCDLoadCustomChar
  2823 ;;		_LCDScroll
  2824 ;;		_LCDDisplay
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text15
  2829  001B82                     __ptext15:
  2830                           	opt stack 0
  2831  001B82                     _LCDCommand:
  2832                           	opt stack 20
  2833                           
  2834                           ;incstack = 0
  2835                           ;LCDCommand@command stored from wreg
  2836  001B82  0100               	movlb	0	; () banked
  2837  001B84  6F89               	movwf	LCDCommand@command& (0+255),b
  2838                           
  2839                           ;LCD.c: 188: wait();
  2840  001B86  EC45  F00E         	call	_wait	;wreg free
  2841                           
  2842                           ;LCD.c: 189: LCDWriteByte(command, 0);
  2843  001B8A  0E00               	movlw	0
  2844  001B8C  0100               	movlb	0	; () banked
  2845  001B8E  6F86               	movwf	LCDWriteByte@rs& (0+255),b
  2846  001B90  0100               	movlb	0	; () banked
  2847  001B92  5189               	movf	LCDCommand@command& (0+255),w,b
  2848  001B94  EC8D  F00C         	call	_LCDWriteByte
  2849                           
  2850                           ;LCD.c: 190: shortDelay();
  2851  001B98  EC3B  F00E         	call	_shortDelay	;wreg free
  2852  001B9C  0012               	return		;funcret
  2853  001B9E                     __end_of_LCDCommand:
  2854                           	opt stack 0
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           prodh	equ	0xFF4
  2860                           prodl	equ	0xFF3
  2861                           indf0	equ	0xFEF
  2862                           postinc0	equ	0xFEE
  2863                           fsr0h	equ	0xFEA
  2864                           fsr0l	equ	0xFE9
  2865                           wreg	equ	0xFE8
  2866                           postdec1	equ	0xFE5
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _wait *****************
  2876 ;; Defined at:
  2877 ;;		line 235 in file "LCD.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;		None               void
  2884 ;; Registers used:
  2885 ;;		None
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;Total ram usage:        0 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    6
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_LCDCommand
  2902 ;;		_LCDWriteData
  2903 ;;		_LCDReadData
  2904 ;;		_LCDGetAC
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text16
  2909  001C8A                     __ptext16:
  2910                           	opt stack 0
  2911  001C8A                     _wait:
  2912                           	opt stack 22
  2913                           
  2914                           ;incstack = 0
  2915  001C8A  0012               	return		;funcret
  2916  001C8C                     __end_of_wait:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           prodh	equ	0xFF4
  2923                           prodl	equ	0xFF3
  2924                           indf0	equ	0xFEF
  2925                           postinc0	equ	0xFEE
  2926                           fsr0h	equ	0xFEA
  2927                           fsr0l	equ	0xFE9
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1l	equ	0xFE1
  2931                           indf2	equ	0xFDF
  2932                           postinc2	equ	0xFDE
  2933                           postdec2	equ	0xFDD
  2934                           fsr2h	equ	0xFDA
  2935                           fsr2l	equ	0xFD9
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _shortDelay *****************
  2939 ;; Defined at:
  2940 ;;		line 247 in file "LCD.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;		None               void
  2947 ;; Registers used:
  2948 ;;		wreg
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;Total ram usage:        0 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    6
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_LCDCommand
  2965 ;;		_LCDWriteData
  2966 ;;		_LCDReadData
  2967 ;;		_LCDGetAC
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text17
  2972  001C76                     __ptext17:
  2973                           	opt stack 0
  2974  001C76                     _shortDelay:
  2975                           	opt stack 22
  2976                           
  2977                           ;LCD.c: 249: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2978                           
  2979                           ;incstack = 0
  2980  001C76  0E85               	movlw	133
  2981  001C78                     u2477:
  2982  001C78  2EE8               	decfsz	wreg,f,c
  2983  001C7A  D7FE               	goto	u2477
  2984  001C7C  F000               	nop	
  2985  001C7E  0012               	return		;funcret
  2986  001C80                     __end_of_shortDelay:
  2987                           	opt stack 0
  2988                           tblptru	equ	0xFF8
  2989                           tblptrh	equ	0xFF7
  2990                           tblptrl	equ	0xFF6
  2991                           tablat	equ	0xFF5
  2992                           prodh	equ	0xFF4
  2993                           prodl	equ	0xFF3
  2994                           indf0	equ	0xFEF
  2995                           postinc0	equ	0xFEE
  2996                           fsr0h	equ	0xFEA
  2997                           fsr0l	equ	0xFE9
  2998                           wreg	equ	0xFE8
  2999                           postdec1	equ	0xFE5
  3000                           fsr1l	equ	0xFE1
  3001                           indf2	equ	0xFDF
  3002                           postinc2	equ	0xFDE
  3003                           postdec2	equ	0xFDD
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _LCDWriteByte *****************
  3009 ;; Defined at:
  3010 ;;		line 260 in file "LCD.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  c               1    wreg     unsigned char 
  3013 ;;  rs              1    2[BANK0 ] unsigned char 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  c               1    3[BANK0 ] unsigned char 
  3016 ;;  comFlags        1    4[BANK0 ] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;		None               void
  3019 ;; Registers used:
  3020 ;;		wreg, status,2, status,0, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3026 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;Total ram usage:        3 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    7
  3033 ;; This function calls:
  3034 ;;		_WriteRegister
  3035 ;; This function is called by:
  3036 ;;		_LCDCommand
  3037 ;;		_LCDInitCommand
  3038 ;;		_LCDWriteData
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text18
  3043  00191A                     __ptext18:
  3044                           	opt stack 0
  3045  00191A                     _LCDWriteByte:
  3046                           	opt stack 21
  3047                           
  3048                           ;incstack = 0
  3049                           ;LCDWriteByte@c stored from wreg
  3050  00191A  0100               	movlb	0	; () banked
  3051  00191C  6F87               	movwf	LCDWriteByte@c& (0+255),b
  3052                           
  3053                           ;LCD.c: 261: unsigned char comFlags = 0;
  3054  00191E  0E00               	movlw	0
  3055  001920  0100               	movlb	0	; () banked
  3056  001922  6F88               	movwf	LCDWriteByte@comFlags& (0+255),b
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;LCD.c: 262: if (rs) {
  3060  001924  0100               	movlb	0	; () banked
  3061  001926  5186               	movf	LCDWriteByte@rs& (0+255),w,b
  3062  001928  0100               	movlb	0	; () banked
  3063  00192A  B4D8               	btfsc	status,2,c
  3064  00192C  D003               	goto	l2353
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;LCD.c: 263: comFlags = 0b10000000;
  3068  00192E  0E80               	movlw	128
  3069  001930  0100               	movlb	0	; () banked
  3070  001932  6F88               	movwf	LCDWriteByte@comFlags& (0+255),b
  3071  001934                     l2353:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;LCD.c: 264: }
  3075                           ;LCD.c: 265: WriteRegister(0x12, comFlags);
  3076  001934  C088  F084         	movff	LCDWriteByte@comFlags,WriteRegister@b
  3077  001938  0E12               	movlw	18
  3078  00193A  EC7D  F00D         	call	_WriteRegister
  3079                           
  3080                           ;LCD.c: 266: WriteRegister(0x13, c);
  3081  00193E  C087  F084         	movff	LCDWriteByte@c,WriteRegister@b
  3082  001942  0E13               	movlw	19
  3083  001944  EC7D  F00D         	call	_WriteRegister
  3084                           
  3085                           ;LCD.c: 267: WriteRegister(0x12, comFlags | 0b01000000);
  3086  001948  0100               	movlb	0	; () banked
  3087  00194A  5188               	movf	LCDWriteByte@comFlags& (0+255),w,b
  3088  00194C  0940               	iorlw	64
  3089  00194E  0100               	movlb	0	; () banked
  3090  001950  6F84               	movwf	WriteRegister@b& (0+255),b
  3091  001952  0E12               	movlw	18
  3092  001954  EC7D  F00D         	call	_WriteRegister
  3093                           
  3094                           ;LCD.c: 268: WriteRegister(0x12, comFlags);
  3095  001958  C088  F084         	movff	LCDWriteByte@comFlags,WriteRegister@b
  3096  00195C  0E12               	movlw	18
  3097  00195E  EC7D  F00D         	call	_WriteRegister
  3098  001962  0012               	return		;funcret
  3099  001964                     __end_of_LCDWriteByte:
  3100                           	opt stack 0
  3101                           tblptru	equ	0xFF8
  3102                           tblptrh	equ	0xFF7
  3103                           tblptrl	equ	0xFF6
  3104                           tablat	equ	0xFF5
  3105                           prodh	equ	0xFF4
  3106                           prodl	equ	0xFF3
  3107                           indf0	equ	0xFEF
  3108                           postinc0	equ	0xFEE
  3109                           fsr0h	equ	0xFEA
  3110                           fsr0l	equ	0xFE9
  3111                           wreg	equ	0xFE8
  3112                           postdec1	equ	0xFE5
  3113                           fsr1l	equ	0xFE1
  3114                           indf2	equ	0xFDF
  3115                           postinc2	equ	0xFDE
  3116                           postdec2	equ	0xFDD
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _WriteRegister *****************
  3122 ;; Defined at:
  3123 ;;		line 320 in file "LCD.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;  reg             1    wreg     unsigned char 
  3126 ;;  b               1    0[BANK0 ] unsigned char 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  reg             1    1[BANK0 ] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;		None               void
  3131 ;; Registers used:
  3132 ;;		wreg, status,2
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:        2 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    6
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_LCDWriteByte
  3149 ;;		_LCDInitPort
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text19
  3154  001AFA                     __ptext19:
  3155                           	opt stack 0
  3156  001AFA                     _WriteRegister:
  3157                           	opt stack 21
  3158                           
  3159                           ;incstack = 0
  3160                           ;WriteRegister@reg stored from wreg
  3161  001AFA  0100               	movlb	0	; () banked
  3162  001AFC  6F85               	movwf	WriteRegister@reg& (0+255),b
  3163                           
  3164                           ;LCD.c: 321: LATAbits.LATA2 = 0;
  3165  001AFE  9489               	bcf	3977,2,c	;volatile
  3166                           
  3167                           ;LCD.c: 322: SSPBUF = 0x40;
  3168  001B00  0E40               	movlw	64
  3169  001B02  6EC9               	movwf	4041,c	;volatile
  3170  001B04                     l166:
  3171  001B04  A69E               	btfss	3998,3,c	;volatile
  3172  001B06  D7FE               	goto	l166
  3173                           
  3174                           ;LCD.c: 324: SSPIF = 0;
  3175  001B08  969E               	bcf	3998,3,c	;volatile
  3176                           
  3177                           ;LCD.c: 325: SSPBUF = reg;
  3178  001B0A  C085  FFC9         	movff	WriteRegister@reg,4041	;volatile
  3179  001B0E                     l169:
  3180  001B0E  A69E               	btfss	3998,3,c	;volatile
  3181  001B10  D7FE               	goto	l169
  3182                           
  3183                           ;LCD.c: 327: SSPIF = 0;
  3184  001B12  969E               	bcf	3998,3,c	;volatile
  3185                           
  3186                           ;LCD.c: 328: SSPBUF = b;
  3187  001B14  C084  FFC9         	movff	WriteRegister@b,4041	;volatile
  3188  001B18                     l172:
  3189  001B18  A69E               	btfss	3998,3,c	;volatile
  3190  001B1A  D7FE               	goto	l172
  3191                           
  3192                           ;LCD.c: 330: SSPIF = 0;
  3193  001B1C  969E               	bcf	3998,3,c	;volatile
  3194                           
  3195                           ;LCD.c: 331: LATAbits.LATA2 = 1;
  3196  001B1E  8489               	bsf	3977,2,c	;volatile
  3197  001B20  0012               	return		;funcret
  3198  001B22                     __end_of_WriteRegister:
  3199                           	opt stack 0
  3200                           tblptru	equ	0xFF8
  3201                           tblptrh	equ	0xFF7
  3202                           tblptrl	equ	0xFF6
  3203                           tablat	equ	0xFF5
  3204                           prodh	equ	0xFF4
  3205                           prodl	equ	0xFF3
  3206                           indf0	equ	0xFEF
  3207                           postinc0	equ	0xFEE
  3208                           fsr0h	equ	0xFEA
  3209                           fsr0l	equ	0xFE9
  3210                           wreg	equ	0xFE8
  3211                           postdec1	equ	0xFE5
  3212                           fsr1l	equ	0xFE1
  3213                           indf2	equ	0xFDF
  3214                           postinc2	equ	0xFDE
  3215                           postdec2	equ	0xFDD
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _InitPins *****************
  3221 ;; Defined at:
  3222 ;;		line 91 in file "SPI.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;		None
  3227 ;; Return value:  Size  Location     Type
  3228 ;;		None               void
  3229 ;; Registers used:
  3230 ;;		wreg, status,2
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;Total ram usage:        0 bytes
  3241 ;; Hardware stack levels used:    1
  3242 ;; Hardware stack levels required when called:    6
  3243 ;; This function calls:
  3244 ;;		Nothing
  3245 ;; This function is called by:
  3246 ;;		_main
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text20
  3251  001BB6                     __ptext20:
  3252                           	opt stack 0
  3253  001BB6                     _InitPins:
  3254                           	opt stack 24
  3255                           
  3256                           ;SPI.c: 93: LATD = 0;
  3257                           
  3258                           ;incstack = 0
  3259  001BB6  0E00               	movlw	0
  3260  001BB8  6E8C               	movwf	3980,c	;volatile
  3261                           
  3262                           ;SPI.c: 94: TRISD = 0;
  3263  001BBA  0E00               	movlw	0
  3264  001BBC  6E95               	movwf	3989,c	;volatile
  3265                           
  3266                           ;SPI.c: 98: TRISB = 0b00000001;
  3267  001BBE  0E01               	movlw	1
  3268  001BC0  6E93               	movwf	3987,c	;volatile
  3269                           
  3270                           ;SPI.c: 99: INTCON2bits.RBPU = 0;
  3271  001BC2  9EF1               	bcf	intcon2,7,c	;volatile
  3272                           
  3273                           ;SPI.c: 101: TRISC = 0b00010000;
  3274  001BC4  0E10               	movlw	16
  3275  001BC6  6E94               	movwf	3988,c	;volatile
  3276                           
  3277                           ;SPI.c: 102: LATAbits.LATA3 = 1;
  3278  001BC8  8689               	bsf	3977,3,c	;volatile
  3279                           
  3280                           ;SPI.c: 103: TRISAbits.TRISA3 = 0;
  3281  001BCA  9692               	bcf	3986,3,c	;volatile
  3282  001BCC  0012               	return		;funcret
  3283  001BCE                     __end_of_InitPins:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           prodh	equ	0xFF4
  3290                           prodl	equ	0xFF3
  3291                           intcon2	equ	0xFF1
  3292                           indf0	equ	0xFEF
  3293                           postinc0	equ	0xFEE
  3294                           fsr0h	equ	0xFEA
  3295                           fsr0l	equ	0xFE9
  3296                           wreg	equ	0xFE8
  3297                           postdec1	equ	0xFE5
  3298                           fsr1l	equ	0xFE1
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _ConfigPeriph *****************
  3307 ;; Defined at:
  3308 ;;		line 124 in file "SPI.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;		None
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;		None
  3313 ;; Return value:  Size  Location     Type
  3314 ;;		None               void
  3315 ;; Registers used:
  3316 ;;		wreg, status,2
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;Total ram usage:        0 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    6
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_main
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text21
  3337  001C42                     __ptext21:
  3338                           	opt stack 0
  3339  001C42                     _ConfigPeriph:
  3340                           	opt stack 24
  3341                           
  3342                           ;SPI.c: 129: SSP1STATbits.CKE = 1;
  3343                           
  3344                           ;incstack = 0
  3345  001C42  8CC7               	bsf	4039,6,c	;volatile
  3346                           
  3347                           ;SPI.c: 130: SSP1CON1bits.CKP = 0;
  3348  001C44  98C6               	bcf	4038,4,c	;volatile
  3349                           
  3350                           ;SPI.c: 131: SSP1CON1bits.SSPM = 0b0001;
  3351  001C46  50C6               	movf	4038,w,c	;volatile
  3352  001C48  0BF0               	andlw	-16
  3353  001C4A  0901               	iorlw	1
  3354  001C4C  6EC6               	movwf	4038,c	;volatile
  3355                           
  3356                           ;SPI.c: 132: SSP1CON1bits.SSPEN = 1;
  3357  001C4E  8AC6               	bsf	4038,5,c	;volatile
  3358  001C50  0012               	return		;funcret
  3359  001C52                     __end_of_ConfigPeriph:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon2	equ	0xFF1
  3368                           indf0	equ	0xFEF
  3369                           postinc0	equ	0xFEE
  3370                           fsr0h	equ	0xFEA
  3371                           fsr0l	equ	0xFE9
  3372                           wreg	equ	0xFE8
  3373                           postdec1	equ	0xFE5
  3374                           fsr1l	equ	0xFE1
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _ConfigInterrupts *****************
  3383 ;; Defined at:
  3384 ;;		line 107 in file "SPI.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		None
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;Total ram usage:        0 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    6
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_main
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text22
  3413  001C5E                     __ptext22:
  3414                           	opt stack 0
  3415  001C5E                     _ConfigInterrupts:
  3416                           	opt stack 24
  3417                           
  3418                           ;SPI.c: 110: RCONbits.IPEN = 0;
  3419                           
  3420                           ;incstack = 0
  3421  001C5E  9ED0               	bcf	4048,7,c	;volatile
  3422                           
  3423                           ;SPI.c: 115: INTCON2bits.INTEDG0 = 0;
  3424  001C60  9CF1               	bcf	intcon2,6,c	;volatile
  3425                           
  3426                           ;SPI.c: 116: INTCONbits.INT0IE = 1;
  3427  001C62  88F2               	bsf	intcon,4,c	;volatile
  3428                           
  3429                           ;SPI.c: 118: INTCONbits.INT0IF = 0;
  3430  001C64  92F2               	bcf	intcon,1,c	;volatile
  3431                           
  3432                           ;SPI.c: 121: INTCONbits.GIE = 1;
  3433  001C66  8EF2               	bsf	intcon,7,c	;volatile
  3434  001C68  0012               	return		;funcret
  3435  001C6A                     __end_of_ConfigInterrupts:
  3436                           	opt stack 0
  3437                           tblptru	equ	0xFF8
  3438                           tblptrh	equ	0xFF7
  3439                           tblptrl	equ	0xFF6
  3440                           tablat	equ	0xFF5
  3441                           prodh	equ	0xFF4
  3442                           prodl	equ	0xFF3
  3443                           intcon	equ	0xFF2
  3444                           intcon2	equ	0xFF1
  3445                           indf0	equ	0xFEF
  3446                           postinc0	equ	0xFEE
  3447                           fsr0h	equ	0xFEA
  3448                           fsr0l	equ	0xFE9
  3449                           wreg	equ	0xFE8
  3450                           postdec1	equ	0xFE5
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function _HighIsr *****************
  3460 ;; Defined at:
  3461 ;;		line 136 in file "SPI.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;		None
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  i               2   43[COMRAM] int 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;		None               void
  3468 ;; Registers used:
  3469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;Total ram usage:       17 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    5
  3482 ;; This function calls:
  3483 ;;		i2_LCDClearLine
  3484 ;;		i2_LCDWriteLine
  3485 ;;		i2_SPIReadWrite
  3486 ;;		i2_sprintf
  3487 ;; This function is called by:
  3488 ;;		Interrupt level 2
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	intcode
  3493  000008                     __pintcode:
  3494                           	opt stack 0
  3495  000008                     _HighIsr:
  3496                           	opt stack 20
  3497                           
  3498                           ;incstack = 0
  3499  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3500  00000A  CFFA F01E          	movff	pclath,??_HighIsr+1
  3501  00000E  CFFB F01F          	movff	pclatu,??_HighIsr+2
  3502  000012  CFE9 F020          	movff	fsr0l,??_HighIsr+3
  3503  000016  CFEA F021          	movff	fsr0h,??_HighIsr+4
  3504  00001A  CFE1 F022          	movff	fsr1l,??_HighIsr+5
  3505  00001E  CFE2 F023          	movff	fsr1h,??_HighIsr+6
  3506  000022  CFD9 F024          	movff	fsr2l,??_HighIsr+7
  3507  000026  CFDA F025          	movff	fsr2h,??_HighIsr+8
  3508  00002A  CFF3 F026          	movff	prodl,??_HighIsr+9
  3509  00002E  CFF4 F027          	movff	prodh,??_HighIsr+10
  3510  000032  CFF6 F028          	movff	tblptrl,??_HighIsr+11
  3511  000036  CFF7 F029          	movff	tblptrh,??_HighIsr+12
  3512  00003A  CFF8 F02A          	movff	tblptru,??_HighIsr+13
  3513  00003E  CFF5 F02B          	movff	tablat,??_HighIsr+14
  3514                           
  3515                           ;SPI.c: 139: if (INTCONbits.INT0IF == 1)
  3516  000042  A2F2               	btfss	intcon,1,c	;volatile
  3517  000044  D04F               	goto	i2l270
  3518                           
  3519                           ;SPI.c: 140: {
  3520                           ;SPI.c: 157: LATAbits.LATA3 = 0;
  3521  000046  9689               	bcf	3977,3,c	;volatile
  3522                           
  3523                           ;SPI.c: 158: SPIReadWrite(0b00000110);
  3524  000048  0E06               	movlw	6
  3525  00004A  EC10  F00E         	call	i2_SPIReadWrite
  3526                           
  3527                           ;SPI.c: 159: LATAbits.LATA3 = 1;
  3528  00004E  8689               	bsf	3977,3,c	;volatile
  3529                           
  3530                           ;SPI.c: 160: __nop();
  3531  000050  F000               	nop	
  3532                           
  3533                           ;SPI.c: 161: LATAbits.LATA3 = 0;
  3534  000052  9689               	bcf	3977,3,c	;volatile
  3535                           
  3536                           ;SPI.c: 162: SPIReadWrite(0b00000010);
  3537  000054  0E02               	movlw	2
  3538  000056  EC10  F00E         	call	i2_SPIReadWrite
  3539                           
  3540                           ;SPI.c: 163: SPIReadWrite(0x03);
  3541  00005A  0E03               	movlw	3
  3542  00005C  EC10  F00E         	call	i2_SPIReadWrite
  3543                           
  3544                           ;SPI.c: 164: SPIReadWrite(0x00);
  3545  000060  0E00               	movlw	0
  3546  000062  EC10  F00E         	call	i2_SPIReadWrite
  3547                           
  3548                           ;SPI.c: 166: for (int i = 0; i < 11; i++) {
  3549  000066  0E00               	movlw	0
  3550  000068  6E2D               	movwf	HighIsr@i+1,c
  3551  00006A  0E00               	movlw	0
  3552  00006C  6E2C               	movwf	HighIsr@i,c
  3553  00006E  BE2D               	btfsc	HighIsr@i+1,7,c
  3554  000070  D006               	goto	i2l2325
  3555  000072  502D               	movf	HighIsr@i+1,w,c
  3556  000074  E114               	bnz	i2l269
  3557  000076  0E0B               	movlw	11
  3558  000078  5C2C               	subwf	HighIsr@i,w,c
  3559  00007A  B0D8               	btfsc	status,0,c
  3560  00007C  D010               	goto	i2l269
  3561  00007E                     i2l2325:
  3562                           
  3563                           ;SPI.c: 167: SPIReadWrite(str[i]);
  3564  00007E  0E2E               	movlw	low _str
  3565  000080  242C               	addwf	HighIsr@i,w,c
  3566  000082  6ED9               	movwf	fsr2l,c
  3567  000084  0E00               	movlw	high _str
  3568  000086  202D               	addwfc	HighIsr@i+1,w,c
  3569  000088  6EDA               	movwf	fsr2h,c
  3570  00008A  50DF               	movf	indf2,w,c
  3571  00008C  EC10  F00E         	call	i2_SPIReadWrite
  3572  000090  4A2C               	infsnz	HighIsr@i,f,c
  3573  000092  2A2D               	incf	HighIsr@i+1,f,c
  3574  000094  BE2D               	btfsc	HighIsr@i+1,7,c
  3575  000096  D7F3               	goto	i2l2325
  3576  000098  502D               	movf	HighIsr@i+1,w,c
  3577  00009A  E101               	bnz	i2u186_40
  3578  00009C  D7EC               	goto	L2
  3579  00009E                     i2u186_40:
  3580  00009E                     i2l269:
  3581                           
  3582                           ;SPI.c: 168: }
  3583                           ;SPI.c: 170: LATAbits.LATA3 = 1;
  3584  00009E  8689               	bsf	3977,3,c	;volatile
  3585                           
  3586                           ;SPI.c: 171: _delay((unsigned long)((6)*(40000000L/4000.0)));
  3587  0000A0  0E4E               	movlw	78
  3588  0000A2  6E1D               	movwf	??_HighIsr& (0+255),c
  3589  0000A4  0EEB               	movlw	235
  3590  0000A6                     i2u248_47:
  3591  0000A6  2EE8               	decfsz	wreg,f,c
  3592  0000A8  D7FE               	goto	i2u248_47
  3593  0000AA  2E1D               	decfsz	??_HighIsr& (0+255),f,c
  3594  0000AC  D7FC               	goto	i2u248_47
  3595  0000AE  F000               	nop	
  3596                           
  3597                           ;SPI.c: 191: sprintf(line2str, "Wrote %s", str);
  3598  0000B0  0E73               	movlw	low _line2str
  3599  0000B2  6E0D               	movwf	i2sprintf@sp,c
  3600  0000B4  0E00               	movlw	high _line2str
  3601  0000B6  6E0E               	movwf	i2sprintf@sp+1,c
  3602  0000B8  0E0B               	movlw	low STR_3
  3603  0000BA  6E0F               	movwf	i2sprintf@f,c
  3604  0000BC  0E10               	movlw	high STR_3
  3605  0000BE  6E10               	movwf	i2sprintf@f+1,c
  3606  0000C0  0E2E               	movlw	low _str
  3607  0000C2  6E11               	movwf	?i2_sprintf+4,c
  3608  0000C4  0E00               	movlw	high _str
  3609  0000C6  6E12               	movwf	?i2_sprintf+5,c
  3610  0000C8  EC2E  F009         	call	i2_sprintf	;wreg free
  3611                           
  3612                           ;SPI.c: 192: LCDClearLine(1);
  3613  0000CC  0E01               	movlw	1
  3614  0000CE  EC4F  F00D         	call	i2_LCDClearLine
  3615                           
  3616                           ;SPI.c: 193: LCDWriteLine(line2str, 1);
  3617  0000D2  0E73               	movlw	low _line2str
  3618  0000D4  6E0E               	movwf	i2LCDWriteLine@str,c
  3619  0000D6  0E00               	movlw	high _line2str
  3620  0000D8  6E0F               	movwf	i2LCDWriteLine@str+1,c
  3621  0000DA  0E01               	movlw	1
  3622  0000DC  6E10               	movwf	i2LCDWriteLine@line,c
  3623  0000DE  EC1E  F00B         	call	i2_LCDWriteLine	;wreg free
  3624                           
  3625                           ;SPI.c: 194: INTCONbits.INT0IF = 0;
  3626  0000E2  92F2               	bcf	intcon,1,c	;volatile
  3627  0000E4                     i2l270:
  3628  0000E4  C02B  FFF5         	movff	??_HighIsr+14,tablat
  3629  0000E8  C02A  FFF8         	movff	??_HighIsr+13,tblptru
  3630  0000EC  C029  FFF7         	movff	??_HighIsr+12,tblptrh
  3631  0000F0  C028  FFF6         	movff	??_HighIsr+11,tblptrl
  3632  0000F4  C027  FFF4         	movff	??_HighIsr+10,prodh
  3633  0000F8  C026  FFF3         	movff	??_HighIsr+9,prodl
  3634  0000FC  C025  FFDA         	movff	??_HighIsr+8,fsr2h
  3635  000100  C024  FFD9         	movff	??_HighIsr+7,fsr2l
  3636  000104  C023  FFE2         	movff	??_HighIsr+6,fsr1h
  3637  000108  C022  FFE1         	movff	??_HighIsr+5,fsr1l
  3638  00010C  C021  FFEA         	movff	??_HighIsr+4,fsr0h
  3639  000110  C020  FFE9         	movff	??_HighIsr+3,fsr0l
  3640  000114  C01F  FFFB         	movff	??_HighIsr+2,pclatu
  3641  000118  C01E  FFFA         	movff	??_HighIsr+1,pclath
  3642  00011C  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3643  00011E  0011               	retfie		f
  3644  000120                     __end_of_HighIsr:
  3645                           	opt stack 0
  3646                           pclatu	equ	0xFFB
  3647                           pclath	equ	0xFFA
  3648                           tblptru	equ	0xFF8
  3649                           tblptrh	equ	0xFF7
  3650                           tblptrl	equ	0xFF6
  3651                           tablat	equ	0xFF5
  3652                           prodh	equ	0xFF4
  3653                           prodl	equ	0xFF3
  3654                           intcon	equ	0xFF2
  3655                           intcon2	equ	0xFF1
  3656                           indf0	equ	0xFEF
  3657                           postinc0	equ	0xFEE
  3658                           fsr0h	equ	0xFEA
  3659                           fsr0l	equ	0xFE9
  3660                           wreg	equ	0xFE8
  3661                           postdec1	equ	0xFE5
  3662                           fsr1h	equ	0xFE2
  3663                           fsr1l	equ	0xFE1
  3664                           indf2	equ	0xFDF
  3665                           postinc2	equ	0xFDE
  3666                           postdec2	equ	0xFDD
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function i2_sprintf *****************
  3672 ;; Defined at:
  3673 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3676 ;;		 -> line1str(17), line2str(17), 
  3677 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3678 ;;		 -> STR_3(9), STR_2(3), STR_1(8), 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  sprintf         4    0        struct .
  3681 ;;  sprintf         2   25[COMRAM] unsigned int 
  3682 ;;  sprintf         2   23[COMRAM] PTR const unsigned char 
  3683 ;;		 -> STR_4(7), str(11), rdStr(16), 
  3684 ;;  sprintf         2   21[COMRAM] PTR void [1]
  3685 ;;		 -> ?i2_sprintf(2), ?_sprintf(2), 
  3686 ;;  sprintf         2    0        unsigned int 
  3687 ;;  sprintf         1   27[COMRAM] char 
  3688 ;;  sprintf         1   20[COMRAM] char 
  3689 ;;  sprintf         1   19[COMRAM] unsigned char 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  2   12[COMRAM] int 
  3692 ;; Registers used:
  3693 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3699 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;Total ram usage:       16 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    1
  3706 ;; This function calls:
  3707 ;;		i2___lwdiv
  3708 ;;		i2___lwmod
  3709 ;; This function is called by:
  3710 ;;		_HighIsr
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text24
  3715  00125C                     __ptext24:
  3716                           	opt stack 0
  3717  00125C                     i2_sprintf:
  3718                           	opt stack 23
  3719                           
  3720                           ;doprnt.c: 494: va_list ap;
  3721                           ;doprnt.c: 499: signed char c;
  3722                           ;doprnt.c: 506: signed char prec;
  3723                           ;doprnt.c: 508: unsigned char flag;
  3724                           ;doprnt.c: 523: union {
  3725                           ;doprnt.c: 524: unsigned long vd;
  3726                           ;doprnt.c: 525: double integ;
  3727                           ;doprnt.c: 526: } tmpval;
  3728                           ;doprnt.c: 528: unsigned int val;
  3729                           ;doprnt.c: 529: unsigned len;
  3730                           ;doprnt.c: 530: const char * cp;
  3731                           ;doprnt.c: 533: *ap = __va_start();
  3732                           
  3733                           ;incstack = 0
  3734  00125C  0E11               	movlw	low (?i2_sprintf+4)
  3735  00125E  6E16               	movwf	i2sprintf@ap,c
  3736  001260  0E00               	movlw	high (?i2_sprintf+4)
  3737  001262  6E17               	movwf	i2sprintf@ap+1,c
  3738                           
  3739                           ;doprnt.c: 536: while(c = *f++) {
  3740  001264  D0DD               	goto	i2l2133
  3741  001266                     i2l2065:
  3742                           
  3743                           ;doprnt.c: 538: if(c != '%')
  3744  001266  0E25               	movlw	37
  3745  001268  181C               	xorwf	i2sprintf@c,w,c
  3746  00126A  B4D8               	btfsc	status,2,c
  3747  00126C  D009               	goto	i2l2071
  3748                           
  3749                           ;doprnt.c: 540: {
  3750                           ;doprnt.c: 541: ((*sp++ = (c)));
  3751  00126E  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3752  001272  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3753  001276  C01C  FFDF         	movff	i2sprintf@c,indf2
  3754  00127A  4A0D               	infsnz	i2sprintf@sp,f,c
  3755  00127C  2A0E               	incf	i2sprintf@sp+1,f,c
  3756                           
  3757                           ;doprnt.c: 542: continue;
  3758  00127E  D0D0               	goto	i2l2133
  3759  001280                     i2l2071:
  3760                           
  3761                           ;doprnt.c: 543: }
  3762                           ;doprnt.c: 548: flag = 0;
  3763  001280  0E00               	movlw	0
  3764  001282  6E14               	movwf	i2sprintf@flag,c
  3765                           
  3766                           ;doprnt.c: 635: switch(c = *f++) {
  3767  001284  D044               	goto	i2l2091
  3768  001286                     i2l2073:
  3769                           
  3770                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3771  001286  C016  FFD9         	movff	i2sprintf@ap,fsr2l
  3772  00128A  C017  FFDA         	movff	i2sprintf@ap+1,fsr2h
  3773  00128E  CFDE F018          	movff	postinc2,i2sprintf@cp
  3774  001292  CFDD F019          	movff	postdec2,i2sprintf@cp+1
  3775  001296  0E02               	movlw	2
  3776  001298  2616               	addwf	i2sprintf@ap,f,c
  3777  00129A  0E00               	movlw	0
  3778  00129C  2217               	addwfc	i2sprintf@ap+1,f,c
  3779                           
  3780                           ;doprnt.c: 740: if(!cp)
  3781  00129E  5018               	movf	i2sprintf@cp,w,c
  3782  0012A0  1019               	iorwf	i2sprintf@cp+1,w,c
  3783  0012A2  A4D8               	btfss	status,2,c
  3784  0012A4  D01F               	goto	i2l2087
  3785                           
  3786                           ;doprnt.c: 741: cp = "(null)";
  3787  0012A6  0E1C               	movlw	low STR_4
  3788  0012A8  6E18               	movwf	i2sprintf@cp,c
  3789  0012AA  0E10               	movlw	high STR_4
  3790  0012AC  6E19               	movwf	i2sprintf@cp+1,c
  3791                           
  3792                           ;doprnt.c: 777: while(*cp)
  3793  0012AE  D01A               	goto	i2l2087
  3794  0012B0                     i2l2081:
  3795                           
  3796                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  3797  0012B0  C018  FFF6         	movff	i2sprintf@cp,tblptrl
  3798  0012B4  C019  FFF7         	movff	i2sprintf@cp+1,tblptrh
  3799  0012B8  0E00               	movlw	low (__smallconst shr (0+16))
  3800  0012BA  6EF8               	movwf	tblptru,c
  3801  0012BC  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3802  0012C0  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3803  0012C4  0E0F               	movlw	(high __ramtop+-1)
  3804  0012C6  64F7               	cpfsgt	tblptrh,c
  3805  0012C8  D003               	bra	i2u159_47
  3806  0012CA  0008               	tblrd		*
  3807  0012CC  50F5               	movf	tablat,w,c
  3808  0012CE  D005               	bra	i2u159_40
  3809  0012D0                     i2u159_47:
  3810  0012D0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3811  0012D4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3812  0012D8  50EF               	movf	indf0,w,c
  3813  0012DA                     i2u159_40:
  3814  0012DA  6EDF               	movwf	indf2,c
  3815  0012DC  4A18               	infsnz	i2sprintf@cp,f,c
  3816  0012DE  2A19               	incf	i2sprintf@cp+1,f,c
  3817  0012E0  4A0D               	infsnz	i2sprintf@sp,f,c
  3818  0012E2  2A0E               	incf	i2sprintf@sp+1,f,c
  3819  0012E4                     i2l2087:
  3820  0012E4  C018  FFF6         	movff	i2sprintf@cp,tblptrl
  3821  0012E8  C019  FFF7         	movff	i2sprintf@cp+1,tblptrh
  3822  0012EC  0E00               	movlw	low (__smallconst shr (0+16))
  3823  0012EE  6EF8               	movwf	tblptru,c
  3824  0012F0  0E0F               	movlw	(high __ramtop+-1)
  3825  0012F2  64F7               	cpfsgt	tblptrh,c
  3826  0012F4  D003               	bra	i2u160_47
  3827  0012F6  0008               	tblrd		*
  3828  0012F8  50F5               	movf	tablat,w,c
  3829  0012FA  D005               	bra	i2u160_40
  3830  0012FC                     i2u160_47:
  3831  0012FC  CFF6 FFE9          	movff	tblptrl,fsr0l
  3832  001300  CFF7 FFEA          	movff	tblptrh,fsr0h
  3833  001304  50EF               	movf	indf0,w,c
  3834  001306                     i2u160_40:
  3835  001306  0900               	iorlw	0
  3836  001308  B4D8               	btfsc	status,2,c
  3837  00130A  D08A               	goto	i2l2133
  3838  00130C  D7D1               	goto	i2l2081
  3839  00130E                     i2l2091:
  3840  00130E  C00F  FFF6         	movff	i2sprintf@f,tblptrl
  3841  001312  C010  FFF7         	movff	i2sprintf@f+1,tblptrh
  3842  001316  4A0F               	infsnz	i2sprintf@f,f,c
  3843  001318  2A10               	incf	i2sprintf@f+1,f,c
  3844  00131A                     	if	0	;tblptru may be non-zero
  3845  00131A                     	endif
  3846  00131A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3847  00131A  0E00               	movlw	low (__mediumconst shr (0+16))
  3848  00131C  6EF8               	movwf	tblptru,c
  3849  00131E                     	endif
  3850  00131E  0008               	tblrd		*
  3851  001320  CFF5 F01C          	movff	tablat,i2sprintf@c
  3852  001324  501C               	movf	i2sprintf@c,w,c
  3853                           
  3854                           ; Switch size 1, requested type "space"
  3855                           ; Number of cases is 4, Range of values is 0 to 115
  3856                           ; switch strategies available:
  3857                           ; Name         Instructions Cycles
  3858                           ; simple_byte           13     7 (average)
  3859                           ;	Chosen strategy is simple_byte
  3860  001326  0A00               	xorlw	0	; case 0
  3861  001328  B4D8               	btfsc	status,2,c
  3862  00132A  D088               	goto	i2l2135
  3863  00132C  0A64               	xorlw	100	; case 100
  3864  00132E  B4D8               	btfsc	status,2,c
  3865  001330  D007               	goto	i2l2093
  3866  001332  0A0D               	xorlw	13	; case 105
  3867  001334  B4D8               	btfsc	status,2,c
  3868  001336  D004               	goto	i2l2093
  3869  001338  0A1A               	xorlw	26	; case 115
  3870  00133A  B4D8               	btfsc	status,2,c
  3871  00133C  D7A4               	goto	i2l2073
  3872  00133E  D070               	goto	i2l2133
  3873  001340                     i2l2093:
  3874                           
  3875                           ;doprnt.c: 1253: {
  3876                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3877  001340  C016  FFD9         	movff	i2sprintf@ap,fsr2l
  3878  001344  C017  FFDA         	movff	i2sprintf@ap+1,fsr2h
  3879  001348  CFDE F01A          	movff	postinc2,i2sprintf@val
  3880  00134C  CFDD F01B          	movff	postdec2,i2sprintf@val+1
  3881  001350  0E02               	movlw	2
  3882  001352  2616               	addwf	i2sprintf@ap,f,c
  3883  001354  0E00               	movlw	0
  3884  001356  2217               	addwfc	i2sprintf@ap+1,f,c
  3885                           
  3886                           ;doprnt.c: 1261: if((int)val < 0) {
  3887  001358  AE1B               	btfss	i2sprintf@val+1,7,c
  3888  00135A  D006               	goto	i2l2103
  3889                           
  3890                           ;doprnt.c: 1262: flag |= 0x03;
  3891  00135C  0E03               	movlw	3
  3892  00135E  1214               	iorwf	i2sprintf@flag,f,c
  3893                           
  3894                           ;doprnt.c: 1263: val = -val;
  3895  001360  6C1A               	negf	i2sprintf@val,c
  3896  001362  1E1B               	comf	i2sprintf@val+1,f,c
  3897  001364  B0D8               	btfsc	status,0,c
  3898  001366  2A1B               	incf	i2sprintf@val+1,f,c
  3899  001368                     i2l2103:
  3900                           
  3901                           ;doprnt.c: 1264: }
  3902                           ;doprnt.c: 1266: }
  3903                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3904  001368  0E01               	movlw	1
  3905  00136A  6E1C               	movwf	i2sprintf@c,c
  3906  00136C                     i2l2105:
  3907  00136C  0E05               	movlw	5
  3908  00136E  181C               	xorwf	i2sprintf@c,w,c
  3909  001370  B4D8               	btfsc	status,2,c
  3910  001372  D015               	goto	i2l2117
  3911                           
  3912                           ;doprnt.c: 1306: if(val < dpowers[c])
  3913  001374  501C               	movf	i2sprintf@c,w,c
  3914  001376  0D02               	mullw	2
  3915  001378  0E01               	movlw	low _dpowers
  3916  00137A  24F3               	addwf	prodl,w,c
  3917  00137C  6EF6               	movwf	tblptrl,c
  3918  00137E  0E10               	movlw	high _dpowers
  3919  001380  20F4               	addwfc	prodh,w,c
  3920  001382  6EF7               	movwf	tblptrh,c
  3921  001384                     	if	1	;There are 3 active tblptr bytes
  3922  001384  6AF8               	clrf	tblptru,c
  3923  001386  0E00               	movlw	low (__mediumconst shr (0+16))
  3924  001388  22F8               	addwfc	tblptru,f,c
  3925  00138A                     	endif
  3926  00138A  0009               	tblrd		*+
  3927  00138C  50F5               	movf	tablat,w,c
  3928  00138E  5C1A               	subwf	i2sprintf@val,w,c
  3929  001390  0009               	tblrd		*+
  3930  001392  50F5               	movf	tablat,w,c
  3931  001394  581B               	subwfb	i2sprintf@val+1,w,c
  3932  001396  A0D8               	btfss	status,0,c
  3933  001398  D002               	goto	i2l2117
  3934                           
  3935                           ;doprnt.c: 1307: break;
  3936  00139A  2A1C               	incf	i2sprintf@c,f,c
  3937  00139C  D7E7               	goto	i2l2105
  3938  00139E                     i2l2117:
  3939                           
  3940                           ;doprnt.c: 1422: {
  3941                           ;doprnt.c: 1438: if(flag & 0x03)
  3942  00139E  C014  F013         	movff	i2sprintf@flag,??i2_sprintf
  3943  0013A2  0E03               	movlw	3
  3944  0013A4  1613               	andwf	??i2_sprintf,f,c
  3945  0013A6  B4D8               	btfsc	status,2,c
  3946  0013A8  D008               	goto	i2l2123
  3947                           
  3948                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3949  0013AA  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  3950  0013AE  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  3951  0013B2  0E2D               	movlw	45
  3952  0013B4  6EDF               	movwf	indf2,c
  3953  0013B6  4A0D               	infsnz	i2sprintf@sp,f,c
  3954  0013B8  2A0E               	incf	i2sprintf@sp+1,f,c
  3955  0013BA                     i2l2123:
  3956                           
  3957                           ;doprnt.c: 1469: }
  3958                           ;doprnt.c: 1472: prec = c;
  3959  0013BA  C01C  F015         	movff	i2sprintf@c,i2sprintf@prec
  3960                           
  3961                           ;doprnt.c: 1474: while(prec--) {
  3962  0013BE  D02C               	goto	i2l2131
  3963  0013C0                     i2l2125:
  3964                           
  3965                           ;doprnt.c: 1478: {
  3966                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3967  0013C0  5015               	movf	i2sprintf@prec,w,c
  3968  0013C2  0D02               	mullw	2
  3969  0013C4  0E01               	movlw	low _dpowers
  3970  0013C6  24F3               	addwf	prodl,w,c
  3971  0013C8  6EF6               	movwf	tblptrl,c
  3972  0013CA  0E10               	movlw	high _dpowers
  3973  0013CC  20F4               	addwfc	prodh,w,c
  3974  0013CE  6EF7               	movwf	tblptrh,c
  3975  0013D0                     	if	1	;There are 3 active tblptr bytes
  3976  0013D0  6AF8               	clrf	tblptru,c
  3977  0013D2  0E00               	movlw	low (__mediumconst shr (0+16))
  3978  0013D4  22F8               	addwfc	tblptru,f,c
  3979  0013D6                     	endif
  3980  0013D6  0009               	tblrd		*+
  3981  0013D8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3982  0013DC  000A               	tblrd		*-
  3983  0013DE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3984  0013E2  C01A  F001         	movff	i2sprintf@val,i2___lwdiv@dividend
  3985  0013E6  C01B  F002         	movff	i2sprintf@val+1,i2___lwdiv@dividend+1
  3986  0013EA  EC64  F00C         	call	i2___lwdiv	;wreg free
  3987  0013EE  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  3988  0013F2  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  3989  0013F6  0E00               	movlw	0
  3990  0013F8  6E0B               	movwf	i2___lwmod@divisor+1,c
  3991  0013FA  0E0A               	movlw	10
  3992  0013FC  6E0A               	movwf	i2___lwmod@divisor,c
  3993  0013FE  ECD5  F00C         	call	i2___lwmod	;wreg free
  3994  001402  5008               	movf	?i2___lwmod,w,c
  3995  001404  0F30               	addlw	48
  3996  001406  6E1C               	movwf	i2sprintf@c,c
  3997                           
  3998                           ;doprnt.c: 1523: }
  3999                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4000  001408  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  4001  00140C  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  4002  001410  C01C  FFDF         	movff	i2sprintf@c,indf2
  4003  001414  4A0D               	infsnz	i2sprintf@sp,f,c
  4004  001416  2A0E               	incf	i2sprintf@sp+1,f,c
  4005  001418                     i2l2131:
  4006  001418  0615               	decf	i2sprintf@prec,f,c
  4007  00141A  2815               	incf	i2sprintf@prec,w,c
  4008  00141C  A4D8               	btfss	status,2,c
  4009  00141E  D7D0               	goto	i2l2125
  4010  001420                     i2l2133:
  4011  001420  C00F  FFF6         	movff	i2sprintf@f,tblptrl
  4012  001424  C010  FFF7         	movff	i2sprintf@f+1,tblptrh
  4013  001428  4A0F               	infsnz	i2sprintf@f,f,c
  4014  00142A  2A10               	incf	i2sprintf@f+1,f,c
  4015  00142C                     	if	0	;tblptru may be non-zero
  4016  00142C                     	endif
  4017  00142C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4018  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
  4019  00142E  6EF8               	movwf	tblptru,c
  4020  001430                     	endif
  4021  001430  0008               	tblrd		*
  4022  001432  CFF5 F01C          	movff	tablat,i2sprintf@c
  4023  001436  501C               	movf	i2sprintf@c,w,c
  4024  001438  A4D8               	btfss	status,2,c
  4025  00143A  D715               	goto	i2l2065
  4026  00143C                     i2l2135:
  4027                           
  4028                           ;doprnt.c: 1538: *sp = 0;
  4029  00143C  C00D  FFD9         	movff	i2sprintf@sp,fsr2l
  4030  001440  C00E  FFDA         	movff	i2sprintf@sp+1,fsr2h
  4031  001444  0E00               	movlw	0
  4032  001446  6EDF               	movwf	indf2,c
  4033  001448  0012               	return	
  4034  00144A                     __end_ofi2_sprintf:
  4035                           	opt stack 0
  4036                           pclatu	equ	0xFFB
  4037                           pclath	equ	0xFFA
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           intcon	equ	0xFF2
  4045                           intcon2	equ	0xFF1
  4046                           indf0	equ	0xFEF
  4047                           postinc0	equ	0xFEE
  4048                           fsr0h	equ	0xFEA
  4049                           fsr0l	equ	0xFE9
  4050                           wreg	equ	0xFE8
  4051                           postdec1	equ	0xFE5
  4052                           fsr1h	equ	0xFE2
  4053                           fsr1l	equ	0xFE1
  4054                           indf2	equ	0xFDF
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           fsr2h	equ	0xFDA
  4058                           fsr2l	equ	0xFD9
  4059                           status	equ	0xFD8
  4060                           
  4061 ;; *************** function i2___lwmod *****************
  4062 ;; Defined at:
  4063 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  dividend        2    7[COMRAM] unsigned int 
  4066 ;;  divisor         2    9[COMRAM] unsigned int 
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  2    7[COMRAM] unsigned int 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4078 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;Total ram usage:        5 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		i2_sprintf
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text25
  4092  0019AA                     __ptext25:
  4093                           	opt stack 0
  4094  0019AA                     i2___lwmod:
  4095                           	opt stack 23
  4096                           
  4097                           ;incstack = 0
  4098  0019AA  500A               	movf	i2___lwmod@divisor,w,c
  4099  0019AC  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4100  0019AE  B4D8               	btfsc	status,2,c
  4101  0019B0  D018               	goto	i2l716
  4102  0019B2  0E01               	movlw	1
  4103  0019B4  6E0C               	movwf	i2___lwmod@counter,c
  4104  0019B6  D004               	goto	i2l1829
  4105  0019B8                     i2l1827:
  4106  0019B8  90D8               	bcf	status,0,c
  4107  0019BA  360A               	rlcf	i2___lwmod@divisor,f,c
  4108  0019BC  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4109  0019BE  2A0C               	incf	i2___lwmod@counter,f,c
  4110  0019C0                     i2l1829:
  4111  0019C0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4112  0019C2  D7FA               	goto	i2l1827
  4113  0019C4                     i2l1831:
  4114  0019C4  500A               	movf	i2___lwmod@divisor,w,c
  4115  0019C6  5C08               	subwf	i2___lwmod@dividend,w,c
  4116  0019C8  500B               	movf	i2___lwmod@divisor+1,w,c
  4117  0019CA  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4118  0019CC  A0D8               	btfss	status,0,c
  4119  0019CE  D004               	goto	i2l1835
  4120  0019D0  500A               	movf	i2___lwmod@divisor,w,c
  4121  0019D2  5E08               	subwf	i2___lwmod@dividend,f,c
  4122  0019D4  500B               	movf	i2___lwmod@divisor+1,w,c
  4123  0019D6  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4124  0019D8                     i2l1835:
  4125  0019D8  90D8               	bcf	status,0,c
  4126  0019DA  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4127  0019DC  320A               	rrcf	i2___lwmod@divisor,f,c
  4128  0019DE  2E0C               	decfsz	i2___lwmod@counter,f,c
  4129  0019E0  D7F1               	goto	i2l1831
  4130  0019E2                     i2l716:
  4131  0019E2  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4132  0019E6  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4133  0019EA  0012               	return		;funcret
  4134  0019EC                     __end_ofi2___lwmod:
  4135                           	opt stack 0
  4136                           pclatu	equ	0xFFB
  4137                           pclath	equ	0xFFA
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           prodh	equ	0xFF4
  4143                           prodl	equ	0xFF3
  4144                           intcon	equ	0xFF2
  4145                           intcon2	equ	0xFF1
  4146                           indf0	equ	0xFEF
  4147                           postinc0	equ	0xFEE
  4148                           fsr0h	equ	0xFEA
  4149                           fsr0l	equ	0xFE9
  4150                           wreg	equ	0xFE8
  4151                           postdec1	equ	0xFE5
  4152                           fsr1h	equ	0xFE2
  4153                           fsr1l	equ	0xFE1
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function i2___lwdiv *****************
  4162 ;; Defined at:
  4163 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  dividend        2    0[COMRAM] unsigned int 
  4166 ;;  divisor         2    2[COMRAM] unsigned int 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4169 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  2    0[COMRAM] unsigned int 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4179 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;Total ram usage:        7 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		i2_sprintf
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text26
  4193  0018C8                     __ptext26:
  4194                           	opt stack 0
  4195  0018C8                     i2___lwdiv:
  4196                           	opt stack 23
  4197                           
  4198                           ;incstack = 0
  4199  0018C8  0E00               	movlw	0
  4200  0018CA  6E06               	movwf	i2___lwdiv@quotient+1,c
  4201  0018CC  0E00               	movlw	0
  4202  0018CE  6E05               	movwf	i2___lwdiv@quotient,c
  4203  0018D0  5003               	movf	i2___lwdiv@divisor,w,c
  4204  0018D2  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4205  0018D4  B4D8               	btfsc	status,2,c
  4206  0018D6  D01C               	goto	i2l706
  4207  0018D8  0E01               	movlw	1
  4208  0018DA  6E07               	movwf	i2___lwdiv@counter,c
  4209  0018DC  D004               	goto	i2l1809
  4210  0018DE                     i2l1807:
  4211  0018DE  90D8               	bcf	status,0,c
  4212  0018E0  3603               	rlcf	i2___lwdiv@divisor,f,c
  4213  0018E2  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4214  0018E4  2A07               	incf	i2___lwdiv@counter,f,c
  4215  0018E6                     i2l1809:
  4216  0018E6  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4217  0018E8  D7FA               	goto	i2l1807
  4218  0018EA                     i2l1811:
  4219  0018EA  90D8               	bcf	status,0,c
  4220  0018EC  3605               	rlcf	i2___lwdiv@quotient,f,c
  4221  0018EE  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4222  0018F0  5003               	movf	i2___lwdiv@divisor,w,c
  4223  0018F2  5C01               	subwf	i2___lwdiv@dividend,w,c
  4224  0018F4  5004               	movf	i2___lwdiv@divisor+1,w,c
  4225  0018F6  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4226  0018F8  A0D8               	btfss	status,0,c
  4227  0018FA  D005               	goto	i2l1819
  4228  0018FC  5003               	movf	i2___lwdiv@divisor,w,c
  4229  0018FE  5E01               	subwf	i2___lwdiv@dividend,f,c
  4230  001900  5004               	movf	i2___lwdiv@divisor+1,w,c
  4231  001902  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4232  001904  8005               	bsf	i2___lwdiv@quotient,0,c
  4233  001906                     i2l1819:
  4234  001906  90D8               	bcf	status,0,c
  4235  001908  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4236  00190A  3203               	rrcf	i2___lwdiv@divisor,f,c
  4237  00190C  2E07               	decfsz	i2___lwdiv@counter,f,c
  4238  00190E  D7ED               	goto	i2l1811
  4239  001910                     i2l706:
  4240  001910  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4241  001914  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4242  001918  0012               	return		;funcret
  4243  00191A                     __end_ofi2___lwdiv:
  4244                           	opt stack 0
  4245                           pclatu	equ	0xFFB
  4246                           pclath	equ	0xFFA
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           intcon2	equ	0xFF1
  4255                           indf0	equ	0xFEF
  4256                           postinc0	equ	0xFEE
  4257                           fsr0h	equ	0xFEA
  4258                           fsr0l	equ	0xFE9
  4259                           wreg	equ	0xFE8
  4260                           postdec1	equ	0xFE5
  4261                           fsr1h	equ	0xFE2
  4262                           fsr1l	equ	0xFE1
  4263                           indf2	equ	0xFDF
  4264                           postinc2	equ	0xFDE
  4265                           postdec2	equ	0xFDD
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function i2_SPIReadWrite *****************
  4271 ;; Defined at:
  4272 ;;		line 81 in file "SPI.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  byte            1    wreg     unsigned char 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  byte            1    0[COMRAM] unsigned char 
  4277 ;;  SPIReadWrite    1    1[COMRAM] unsigned char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  1    wreg      unsigned char 
  4280 ;; Registers used:
  4281 ;;		wreg
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;Total ram usage:        2 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; This function calls:
  4294 ;;		Nothing
  4295 ;; This function is called by:
  4296 ;;		_HighIsr
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text27
  4301  001C20                     __ptext27:
  4302                           	opt stack 0
  4303  001C20                     i2_SPIReadWrite:
  4304                           	opt stack 24
  4305                           
  4306                           ;incstack = 0
  4307                           ;i2SPIReadWrite@byte stored from wreg
  4308  001C20  6E01               	movwf	i2SPIReadWrite@byte,c
  4309                           
  4310                           ;SPI.c: 83: unsigned char r;
  4311                           ;SPI.c: 84: SSP1BUF = byte;
  4312  001C22  C001  FFC9         	movff	i2SPIReadWrite@byte,4041	;volatile
  4313  001C26                     i2l252:
  4314  001C26  A69E               	btfss	3998,3,c	;volatile
  4315  001C28  D7FE               	goto	i2l252
  4316                           
  4317                           ;SPI.c: 86: PIR1bits.SSPIF = 0;
  4318  001C2A  969E               	bcf	3998,3,c	;volatile
  4319                           
  4320                           ;SPI.c: 87: r = SSP1BUF;
  4321  001C2C  CFC9 F002          	movff	4041,i2SPIReadWrite@r	;volatile
  4322                           
  4323                           ;SPI.c: 88: return r;
  4324                           ;	Return value of i2_SPIReadWrite is never used
  4325  001C30  0012               	return		;funcret
  4326  001C32                     __end_ofi2_SPIReadWrite:
  4327                           	opt stack 0
  4328                           pclatu	equ	0xFFB
  4329                           pclath	equ	0xFFA
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           intcon2	equ	0xFF1
  4338                           indf0	equ	0xFEF
  4339                           postinc0	equ	0xFEE
  4340                           fsr0h	equ	0xFEA
  4341                           fsr0l	equ	0xFE9
  4342                           wreg	equ	0xFE8
  4343                           postdec1	equ	0xFE5
  4344                           fsr1h	equ	0xFE2
  4345                           fsr1l	equ	0xFE1
  4346                           indf2	equ	0xFDF
  4347                           postinc2	equ	0xFDE
  4348                           postdec2	equ	0xFDD
  4349                           fsr2h	equ	0xFDA
  4350                           fsr2l	equ	0xFD9
  4351                           status	equ	0xFD8
  4352                           
  4353 ;; *************** function i2_LCDWriteLine *****************
  4354 ;; Defined at:
  4355 ;;		line 59 in file "LCD.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  str             2   13[COMRAM] PTR const unsigned char 
  4358 ;;		 -> line1str(17), line2str(17), LCDScroll@str(17), 
  4359 ;;  line            1   15[COMRAM] unsigned char 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4371 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;Total ram usage:        4 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    4
  4378 ;; This function calls:
  4379 ;;		i2_LCDSetPos
  4380 ;;		i2_LCDWriteData
  4381 ;; This function is called by:
  4382 ;;		_HighIsr
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text28
  4387  00163C                     __ptext28:
  4388                           	opt stack 0
  4389  00163C                     i2_LCDWriteLine:
  4390                           	opt stack 20
  4391                           
  4392                           ;LCD.c: 60: if (line >= 2) {
  4393                           
  4394                           ;incstack = 0
  4395  00163C  0E01               	movlw	1
  4396  00163E  6410               	cpfsgt	i2LCDWriteLine@line,c
  4397  001640  D001               	goto	i2l2025
  4398  001642  0012               	return	
  4399  001644                     i2l2025:
  4400                           
  4401                           ;LCD.c: 62: }
  4402                           ;LCD.c: 63: LCDSetPos(line, 0);
  4403  001644  C010  F007         	movff	i2LCDWriteLine@line,i2LCDSetPos@row
  4404  001648  6A08               	clrf	i2LCDSetPos@row+1,c
  4405  00164A  0E00               	movlw	0
  4406  00164C  6E0A               	movwf	i2LCDSetPos@col+1,c
  4407  00164E  0E00               	movlw	0
  4408  001650  6E09               	movwf	i2LCDSetPos@col,c
  4409  001652  ECB2  F00C         	call	i2_LCDSetPos	;wreg free
  4410                           
  4411                           ;LCD.c: 64: while (*str) {
  4412  001656  D032               	goto	i2l2045
  4413  001658                     i2l2027:
  4414                           
  4415                           ;LCD.c: 65: if (*str == '\n') {
  4416  001658  C00E  FFD9         	movff	i2LCDWriteLine@str,fsr2l
  4417  00165C  C00F  FFDA         	movff	i2LCDWriteLine@str+1,fsr2h
  4418  001660  0E0A               	movlw	10
  4419  001662  18DE               	xorwf	postinc2,w,c
  4420  001664  A4D8               	btfss	status,2,c
  4421  001666  D007               	goto	i2l2035
  4422                           
  4423                           ;LCD.c: 66: ++line;
  4424  001668  2A10               	incf	i2LCDWriteLine@line,f,c
  4425                           
  4426                           ;LCD.c: 67: if (line == 2) {
  4427  00166A  0E02               	movlw	2
  4428  00166C  1810               	xorwf	i2LCDWriteLine@line,w,c
  4429  00166E  A4D8               	btfss	status,2,c
  4430  001670  D002               	goto	i2l2035
  4431                           
  4432                           ;LCD.c: 68: line = 0;
  4433  001672  0E00               	movlw	0
  4434  001674  6E10               	movwf	i2LCDWriteLine@line,c
  4435  001676                     i2l2035:
  4436                           
  4437                           ;LCD.c: 69: }
  4438                           ;LCD.c: 70: }
  4439                           ;LCD.c: 71: if (*str == '\r' || *str == '\n') {
  4440  001676  C00E  FFD9         	movff	i2LCDWriteLine@str,fsr2l
  4441  00167A  C00F  FFDA         	movff	i2LCDWriteLine@str+1,fsr2h
  4442  00167E  0E0D               	movlw	13
  4443  001680  18DE               	xorwf	postinc2,w,c
  4444  001682  B4D8               	btfsc	status,2,c
  4445  001684  D008               	goto	i2l2039
  4446  001686  C00E  FFD9         	movff	i2LCDWriteLine@str,fsr2l
  4447  00168A  C00F  FFDA         	movff	i2LCDWriteLine@str+1,fsr2h
  4448  00168E  0E0A               	movlw	10
  4449  001690  18DE               	xorwf	postinc2,w,c
  4450  001692  A4D8               	btfss	status,2,c
  4451  001694  D00A               	goto	i2l2041
  4452  001696                     i2l2039:
  4453                           
  4454                           ;LCD.c: 72: LCDSetPos(line, 0);
  4455  001696  C010  F007         	movff	i2LCDWriteLine@line,i2LCDSetPos@row
  4456  00169A  6A08               	clrf	i2LCDSetPos@row+1,c
  4457  00169C  0E00               	movlw	0
  4458  00169E  6E0A               	movwf	i2LCDSetPos@col+1,c
  4459  0016A0  0E00               	movlw	0
  4460  0016A2  6E09               	movwf	i2LCDSetPos@col,c
  4461  0016A4  ECB2  F00C         	call	i2_LCDSetPos	;wreg free
  4462                           
  4463                           ;LCD.c: 73: } else {
  4464  0016A8  D007               	goto	i2l2043
  4465  0016AA                     i2l2041:
  4466                           
  4467                           ;LCD.c: 74: LCDWriteData(*str);
  4468  0016AA  C00E  FFD9         	movff	i2LCDWriteLine@str,fsr2l
  4469  0016AE  C00F  FFDA         	movff	i2LCDWriteLine@str+1,fsr2h
  4470  0016B2  50DF               	movf	indf2,w,c
  4471  0016B4  ECE7  F00D         	call	i2_LCDWriteData
  4472  0016B8                     i2l2043:
  4473                           
  4474                           ;LCD.c: 75: }
  4475                           ;LCD.c: 76: ++str;
  4476  0016B8  4A0E               	infsnz	i2LCDWriteLine@str,f,c
  4477  0016BA  2A0F               	incf	i2LCDWriteLine@str+1,f,c
  4478  0016BC                     i2l2045:
  4479  0016BC  C00E  FFD9         	movff	i2LCDWriteLine@str,fsr2l
  4480  0016C0  C00F  FFDA         	movff	i2LCDWriteLine@str+1,fsr2h
  4481  0016C4  50DF               	movf	indf2,w,c
  4482  0016C6  B4D8               	btfsc	status,2,c
  4483  0016C8  0012               	return	
  4484  0016CA  D7C6               	goto	i2l2027
  4485  0016CC                     __end_ofi2_LCDWriteLine:
  4486                           	opt stack 0
  4487                           pclatu	equ	0xFFB
  4488                           pclath	equ	0xFFA
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           prodh	equ	0xFF4
  4494                           prodl	equ	0xFF3
  4495                           intcon	equ	0xFF2
  4496                           intcon2	equ	0xFF1
  4497                           indf0	equ	0xFEF
  4498                           postinc0	equ	0xFEE
  4499                           fsr0h	equ	0xFEA
  4500                           fsr0l	equ	0xFE9
  4501                           wreg	equ	0xFE8
  4502                           postdec1	equ	0xFE5
  4503                           fsr1h	equ	0xFE2
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           postdec2	equ	0xFDD
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function i2_LCDClearLine *****************
  4513 ;; Defined at:
  4514 ;;		line 80 in file "LCD.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  line            1    wreg     unsigned char 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  line            1   13[COMRAM] unsigned char 
  4519 ;;  LCDClearLine    1   14[COMRAM] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;		None               void
  4522 ;; Registers used:
  4523 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;Total ram usage:        2 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    4
  4536 ;; This function calls:
  4537 ;;		i2_LCDSetPos
  4538 ;;		i2_LCDWriteData
  4539 ;; This function is called by:
  4540 ;;		_HighIsr
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text29
  4545  001A9E                     __ptext29:
  4546                           	opt stack 0
  4547  001A9E                     i2_LCDClearLine:
  4548                           	opt stack 20
  4549                           
  4550                           ;incstack = 0
  4551                           ;i2LCDClearLine@line stored from wreg
  4552  001A9E  6E0E               	movwf	i2LCDClearLine@line,c
  4553                           
  4554                           ;LCD.c: 81: char c = 0;
  4555  001AA0  0E00               	movlw	0
  4556  001AA2  6E0F               	movwf	i2LCDClearLine@c,c
  4557                           
  4558                           ;LCD.c: 82: if (line >= 2) {
  4559  001AA4  0E01               	movlw	1
  4560  001AA6  640E               	cpfsgt	i2LCDClearLine@line,c
  4561  001AA8  D001               	goto	i2l2053
  4562  001AAA  0012               	return	
  4563  001AAC                     i2l2053:
  4564                           
  4565                           ;LCD.c: 84: }
  4566                           ;LCD.c: 85: LCDSetPos(line, 0);
  4567  001AAC  C00E  F007         	movff	i2LCDClearLine@line,i2LCDSetPos@row
  4568  001AB0  6A08               	clrf	i2LCDSetPos@row+1,c
  4569  001AB2  0E00               	movlw	0
  4570  001AB4  6E0A               	movwf	i2LCDSetPos@col+1,c
  4571  001AB6  0E00               	movlw	0
  4572  001AB8  6E09               	movwf	i2LCDSetPos@col,c
  4573  001ABA  ECB2  F00C         	call	i2_LCDSetPos	;wreg free
  4574                           
  4575                           ;LCD.c: 86: while (c < 16) {
  4576  001ABE  D004               	goto	i2l2059
  4577  001AC0                     i2l2055:
  4578                           
  4579                           ;LCD.c: 87: LCDWriteData(' ');
  4580  001AC0  0E20               	movlw	32
  4581  001AC2  ECE7  F00D         	call	i2_LCDWriteData
  4582                           
  4583                           ;LCD.c: 88: ++c;
  4584  001AC6  2A0F               	incf	i2LCDClearLine@c,f,c
  4585  001AC8                     i2l2059:
  4586  001AC8  0E0F               	movlw	15
  4587  001ACA  640F               	cpfsgt	i2LCDClearLine@c,c
  4588  001ACC  D7F9               	goto	i2l2055
  4589  001ACE  0012               	return	
  4590  001AD0                     __end_ofi2_LCDClearLine:
  4591                           	opt stack 0
  4592                           pclatu	equ	0xFFB
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           intcon2	equ	0xFF1
  4602                           indf0	equ	0xFEF
  4603                           postinc0	equ	0xFEE
  4604                           fsr0h	equ	0xFEA
  4605                           fsr0l	equ	0xFE9
  4606                           wreg	equ	0xFE8
  4607                           postdec1	equ	0xFE5
  4608                           fsr1h	equ	0xFE2
  4609                           fsr1l	equ	0xFE1
  4610                           indf2	equ	0xFDF
  4611                           postinc2	equ	0xFDE
  4612                           postdec2	equ	0xFDD
  4613                           fsr2h	equ	0xFDA
  4614                           fsr2l	equ	0xFD9
  4615                           status	equ	0xFD8
  4616                           
  4617 ;; *************** function i2_LCDWriteData *****************
  4618 ;; Defined at:
  4619 ;;		line 197 in file "LCD.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  c               1    wreg     unsigned char 
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;  c               1    5[COMRAM] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;		None               void
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;Total ram usage:        1 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    2
  4640 ;; This function calls:
  4641 ;;		i2_LCDWriteByte
  4642 ;;		i2_shortDelay
  4643 ;;		i2_wait
  4644 ;; This function is called by:
  4645 ;;		i2_LCDWriteLine
  4646 ;;		i2_LCDClearLine
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text30
  4651  001BCE                     __ptext30:
  4652                           	opt stack 0
  4653  001BCE                     i2_LCDWriteData:
  4654                           	opt stack 21
  4655                           
  4656                           ;incstack = 0
  4657                           ;i2LCDWriteData@c stored from wreg
  4658  001BCE  6E06               	movwf	i2LCDWriteData@c,c
  4659                           
  4660                           ;LCD.c: 198: wait();
  4661  001BD0  EC46  F00E         	call	i2_wait	;wreg free
  4662                           
  4663                           ;LCD.c: 199: LCDWriteByte(c, 1);
  4664  001BD4  0E01               	movlw	1
  4665  001BD6  6E03               	movwf	i2LCDWriteByte@rs,c
  4666  001BD8  5006               	movf	i2LCDWriteData@c,w,c
  4667  001BDA  EC16  F00D         	call	i2_LCDWriteByte
  4668                           
  4669                           ;LCD.c: 200: shortDelay();
  4670  001BDE  EC40  F00E         	call	i2_shortDelay	;wreg free
  4671  001BE2  0012               	return		;funcret
  4672  001BE4                     __end_ofi2_LCDWriteData:
  4673                           	opt stack 0
  4674                           pclatu	equ	0xFFB
  4675                           pclath	equ	0xFFA
  4676                           tblptru	equ	0xFF8
  4677                           tblptrh	equ	0xFF7
  4678                           tblptrl	equ	0xFF6
  4679                           tablat	equ	0xFF5
  4680                           prodh	equ	0xFF4
  4681                           prodl	equ	0xFF3
  4682                           intcon	equ	0xFF2
  4683                           intcon2	equ	0xFF1
  4684                           indf0	equ	0xFEF
  4685                           postinc0	equ	0xFEE
  4686                           fsr0h	equ	0xFEA
  4687                           fsr0l	equ	0xFE9
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1h	equ	0xFE2
  4691                           fsr1l	equ	0xFE1
  4692                           indf2	equ	0xFDF
  4693                           postinc2	equ	0xFDE
  4694                           postdec2	equ	0xFDD
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function i2_LCDSetPos *****************
  4700 ;; Defined at:
  4701 ;;		line 96 in file "LCD.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  row             2    6[COMRAM] int 
  4704 ;;  col             2    8[COMRAM] int 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  LCDSetPos       2   11[COMRAM] int 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;		None               void
  4709 ;; Registers used:
  4710 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4716 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;Total ram usage:        7 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    3
  4723 ;; This function calls:
  4724 ;;		i2_LCDCommand
  4725 ;;		i2_calculateBase
  4726 ;; This function is called by:
  4727 ;;		i2_LCDWriteLine
  4728 ;;		i2_LCDClearLine
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text31
  4733  001964                     __ptext31:
  4734                           	opt stack 0
  4735  001964                     i2_LCDSetPos:
  4736                           	opt stack 20
  4737                           
  4738                           ;LCD.c: 97: int pos;
  4739                           ;LCD.c: 98: if (row < 0 || col < 0 || row >= 2 || col >= 16) {
  4740                           
  4741                           ;incstack = 0
  4742  001964  BE08               	btfsc	i2LCDSetPos@row+1,7,c
  4743  001966  0012               	return	
  4744  001968  BE0A               	btfsc	i2LCDSetPos@col+1,7,c
  4745  00196A  0012               	return	
  4746  00196C  BE08               	btfsc	i2LCDSetPos@row+1,7,c
  4747  00196E  D006               	goto	i2l1789
  4748  001970  5008               	movf	i2LCDSetPos@row+1,w,c
  4749  001972  E11A               	bnz	i2l85
  4750  001974  0E02               	movlw	2
  4751  001976  5C07               	subwf	i2LCDSetPos@row,w,c
  4752  001978  B0D8               	btfsc	status,0,c
  4753  00197A  0012               	return	
  4754  00197C                     i2l1789:
  4755  00197C  BE0A               	btfsc	i2LCDSetPos@col+1,7,c
  4756  00197E  D006               	goto	i2l1791
  4757  001980  500A               	movf	i2LCDSetPos@col+1,w,c
  4758  001982  E112               	bnz	i2l85
  4759  001984  0E10               	movlw	16
  4760  001986  5C09               	subwf	i2LCDSetPos@col,w,c
  4761  001988  B0D8               	btfsc	status,0,c
  4762  00198A  0012               	return	
  4763  00198C                     i2l1791:
  4764                           
  4765                           ;LCD.c: 100: }
  4766                           ;LCD.c: 101: pos = calculateBase(row) + col;
  4767  00198C  5007               	movf	i2LCDSetPos@row,w,c
  4768  00198E  ECA4  F00D         	call	i2_calculateBase
  4769  001992  6E0B               	movwf	??i2_LCDSetPos& (0+255),c
  4770  001994  500B               	movf	??i2_LCDSetPos,w,c
  4771  001996  2409               	addwf	i2LCDSetPos@col,w,c
  4772  001998  6E0C               	movwf	i2LCDSetPos@pos,c
  4773  00199A  0E00               	movlw	0
  4774  00199C  200A               	addwfc	i2LCDSetPos@col+1,w,c
  4775  00199E  6E0D               	movwf	i2LCDSetPos@pos+1,c
  4776                           
  4777                           ;LCD.c: 102: LCDCommand(128 + pos);
  4778  0019A0  500C               	movf	i2LCDSetPos@pos,w,c
  4779  0019A2  0F80               	addlw	128
  4780  0019A4  ECF2  F00D         	call	i2_LCDCommand
  4781  0019A8                     i2l85:
  4782  0019A8  0012               	return		;funcret
  4783  0019AA                     __end_ofi2_LCDSetPos:
  4784                           	opt stack 0
  4785                           pclatu	equ	0xFFB
  4786                           pclath	equ	0xFFA
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           intcon2	equ	0xFF1
  4795                           indf0	equ	0xFEF
  4796                           postinc0	equ	0xFEE
  4797                           fsr0h	equ	0xFEA
  4798                           fsr0l	equ	0xFE9
  4799                           wreg	equ	0xFE8
  4800                           postdec1	equ	0xFE5
  4801                           fsr1h	equ	0xFE2
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function i2_calculateBase *****************
  4811 ;; Defined at:
  4812 ;;		line 225 in file "LCD.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  line            1    wreg     unsigned char 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  line            1    1[COMRAM] unsigned char 
  4817 ;;  calculateBas    1    0[COMRAM] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      unsigned char 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0, prodl, prodh
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        2 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		i2_LCDSetPos
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text32
  4841  001B48                     __ptext32:
  4842                           	opt stack 0
  4843  001B48                     i2_calculateBase:
  4844                           	opt stack 22
  4845                           
  4846                           ;incstack = 0
  4847                           ;i2calculateBase@line stored from wreg
  4848  001B48  6E02               	movwf	i2calculateBase@line,c
  4849                           
  4850                           ;LCD.c: 226: char base;
  4851                           ;LCD.c: 227: if (line % 2 == 0) {
  4852  001B4A  B002               	btfsc	i2calculateBase@line,0,c
  4853  001B4C  D005               	goto	i2l1703
  4854                           
  4855                           ;LCD.c: 228: base = line * 10;
  4856  001B4E  5002               	movf	i2calculateBase@line,w,c
  4857  001B50  0D0A               	mullw	10
  4858  001B52  CFF3 F001          	movff	prodl,i2calculateBase@base
  4859                           
  4860                           ;LCD.c: 229: } else {
  4861  001B56  D005               	goto	i2l1705
  4862  001B58                     i2l1703:
  4863                           
  4864                           ;LCD.c: 230: base = 54 + line * 10;
  4865  001B58  5002               	movf	i2calculateBase@line,w,c
  4866  001B5A  0D0A               	mullw	10
  4867  001B5C  50F3               	movf	prodl,w,c
  4868  001B5E  0F36               	addlw	54
  4869  001B60  6E01               	movwf	i2calculateBase@base,c
  4870  001B62                     i2l1705:
  4871                           
  4872                           ;LCD.c: 231: }
  4873                           ;LCD.c: 232: return base;
  4874  001B62  5001               	movf	i2calculateBase@base,w,c
  4875  001B64  0012               	return	
  4876  001B66                     __end_ofi2_calculateBase:
  4877                           	opt stack 0
  4878                           pclatu	equ	0xFFB
  4879                           pclath	equ	0xFFA
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon	equ	0xFF2
  4887                           intcon2	equ	0xFF1
  4888                           indf0	equ	0xFEF
  4889                           postinc0	equ	0xFEE
  4890                           fsr0h	equ	0xFEA
  4891                           fsr0l	equ	0xFE9
  4892                           wreg	equ	0xFE8
  4893                           postdec1	equ	0xFE5
  4894                           fsr1h	equ	0xFE2
  4895                           fsr1l	equ	0xFE1
  4896                           indf2	equ	0xFDF
  4897                           postinc2	equ	0xFDE
  4898                           postdec2	equ	0xFDD
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903 ;; *************** function i2_LCDCommand *****************
  4904 ;; Defined at:
  4905 ;;		line 187 in file "LCD.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  command         1    wreg     unsigned char 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  command         1    5[COMRAM] unsigned char 
  4910 ;; Return value:  Size  Location     Type
  4911 ;;		None               void
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0, cstack
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;Total ram usage:        1 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    2
  4926 ;; This function calls:
  4927 ;;		i2_LCDWriteByte
  4928 ;;		i2_shortDelay
  4929 ;;		i2_wait
  4930 ;; This function is called by:
  4931 ;;		i2_LCDSetPos
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text33
  4936  001BE4                     __ptext33:
  4937                           	opt stack 0
  4938  001BE4                     i2_LCDCommand:
  4939                           	opt stack 20
  4940                           
  4941                           ;incstack = 0
  4942                           ;i2LCDCommand@command stored from wreg
  4943  001BE4  6E06               	movwf	i2LCDCommand@command,c
  4944                           
  4945                           ;LCD.c: 188: wait();
  4946  001BE6  EC46  F00E         	call	i2_wait	;wreg free
  4947                           
  4948                           ;LCD.c: 189: LCDWriteByte(command, 0);
  4949  001BEA  0E00               	movlw	0
  4950  001BEC  6E03               	movwf	i2LCDWriteByte@rs,c
  4951  001BEE  5006               	movf	i2LCDCommand@command,w,c
  4952  001BF0  EC16  F00D         	call	i2_LCDWriteByte
  4953                           
  4954                           ;LCD.c: 190: shortDelay();
  4955  001BF4  EC40  F00E         	call	i2_shortDelay	;wreg free
  4956  001BF8  0012               	return		;funcret
  4957  001BFA                     __end_ofi2_LCDCommand:
  4958                           	opt stack 0
  4959                           pclatu	equ	0xFFB
  4960                           pclath	equ	0xFFA
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           intcon2	equ	0xFF1
  4969                           indf0	equ	0xFEF
  4970                           postinc0	equ	0xFEE
  4971                           fsr0h	equ	0xFEA
  4972                           fsr0l	equ	0xFE9
  4973                           wreg	equ	0xFE8
  4974                           postdec1	equ	0xFE5
  4975                           fsr1h	equ	0xFE2
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function i2_wait *****************
  4985 ;; Defined at:
  4986 ;;		line 235 in file "LCD.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;		None
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;		None               void
  4993 ;; Registers used:
  4994 ;;		None
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;Total ram usage:        0 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; This function calls:
  5007 ;;		Nothing
  5008 ;; This function is called by:
  5009 ;;		i2_LCDCommand
  5010 ;;		i2_LCDWriteData
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text34
  5015  001C8C                     __ptext34:
  5016                           	opt stack 0
  5017  001C8C                     i2_wait:
  5018                           	opt stack 22
  5019                           
  5020                           ;incstack = 0
  5021  001C8C  0012               	return		;funcret
  5022  001C8E                     __end_ofi2_wait:
  5023                           	opt stack 0
  5024                           pclatu	equ	0xFFB
  5025                           pclath	equ	0xFFA
  5026                           tblptru	equ	0xFF8
  5027                           tblptrh	equ	0xFF7
  5028                           tblptrl	equ	0xFF6
  5029                           tablat	equ	0xFF5
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           intcon	equ	0xFF2
  5033                           intcon2	equ	0xFF1
  5034                           indf0	equ	0xFEF
  5035                           postinc0	equ	0xFEE
  5036                           fsr0h	equ	0xFEA
  5037                           fsr0l	equ	0xFE9
  5038                           wreg	equ	0xFE8
  5039                           postdec1	equ	0xFE5
  5040                           fsr1h	equ	0xFE2
  5041                           fsr1l	equ	0xFE1
  5042                           indf2	equ	0xFDF
  5043                           postinc2	equ	0xFDE
  5044                           postdec2	equ	0xFDD
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049 ;; *************** function i2_shortDelay *****************
  5050 ;; Defined at:
  5051 ;;		line 247 in file "LCD.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;		None               void
  5058 ;; Registers used:
  5059 ;;		wreg
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;Total ram usage:        0 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; This function calls:
  5072 ;;		Nothing
  5073 ;; This function is called by:
  5074 ;;		i2_LCDCommand
  5075 ;;		i2_LCDWriteData
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text35
  5080  001C80                     __ptext35:
  5081                           	opt stack 0
  5082  001C80                     i2_shortDelay:
  5083                           	opt stack 22
  5084                           
  5085                           ;LCD.c: 249: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  5086                           
  5087                           ;incstack = 0
  5088  001C80  0E85               	movlw	133
  5089  001C82                     i2u249_47:
  5090  001C82  2EE8               	decfsz	wreg,f,c
  5091  001C84  D7FE               	goto	i2u249_47
  5092  001C86  F000               	nop	
  5093  001C88  0012               	return		;funcret
  5094  001C8A                     __end_ofi2_shortDelay:
  5095                           	opt stack 0
  5096                           pclatu	equ	0xFFB
  5097                           pclath	equ	0xFFA
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           intcon	equ	0xFF2
  5105                           intcon2	equ	0xFF1
  5106                           indf0	equ	0xFEF
  5107                           postinc0	equ	0xFEE
  5108                           fsr0h	equ	0xFEA
  5109                           fsr0l	equ	0xFE9
  5110                           wreg	equ	0xFE8
  5111                           postdec1	equ	0xFE5
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function i2_LCDWriteByte *****************
  5122 ;; Defined at:
  5123 ;;		line 260 in file "LCD.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  c               1    wreg     unsigned char 
  5126 ;;  rs              1    2[COMRAM] unsigned char 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  c               1    3[COMRAM] unsigned char 
  5129 ;;  LCDWriteByte    1    4[COMRAM] unsigned char 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;		None               void
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5139 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;Total ram usage:        3 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    1
  5146 ;; This function calls:
  5147 ;;		i2_WriteRegister
  5148 ;; This function is called by:
  5149 ;;		i2_LCDCommand
  5150 ;;		i2_LCDWriteData
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text36
  5155  001A2C                     __ptext36:
  5156                           	opt stack 0
  5157  001A2C                     i2_LCDWriteByte:
  5158                           	opt stack 21
  5159                           
  5160                           ;incstack = 0
  5161                           ;i2LCDWriteByte@c stored from wreg
  5162  001A2C  6E04               	movwf	i2LCDWriteByte@c,c
  5163                           
  5164                           ;LCD.c: 261: unsigned char comFlags = 0;
  5165  001A2E  0E00               	movlw	0
  5166  001A30  6E05               	movwf	i2LCDWriteByte@comFlags,c
  5167                           
  5168                           ;LCD.c: 262: if (rs) {
  5169  001A32  5003               	movf	i2LCDWriteByte@rs,w,c
  5170  001A34  B4D8               	btfsc	status,2,c
  5171  001A36  D002               	goto	i2l1669
  5172                           
  5173                           ;LCD.c: 263: comFlags = 0b10000000;
  5174  001A38  0E80               	movlw	128
  5175  001A3A  6E05               	movwf	i2LCDWriteByte@comFlags,c
  5176  001A3C                     i2l1669:
  5177                           
  5178                           ;LCD.c: 264: }
  5179                           ;LCD.c: 265: WriteRegister(0x12, comFlags);
  5180  001A3C  C005  F001         	movff	i2LCDWriteByte@comFlags,i2WriteRegister@b
  5181  001A40  0E12               	movlw	18
  5182  001A42  EC91  F00D         	call	i2_WriteRegister
  5183                           
  5184                           ;LCD.c: 266: WriteRegister(0x13, c);
  5185  001A46  C004  F001         	movff	i2LCDWriteByte@c,i2WriteRegister@b
  5186  001A4A  0E13               	movlw	19
  5187  001A4C  EC91  F00D         	call	i2_WriteRegister
  5188                           
  5189                           ;LCD.c: 267: WriteRegister(0x12, comFlags | 0b01000000);
  5190  001A50  5005               	movf	i2LCDWriteByte@comFlags,w,c
  5191  001A52  0940               	iorlw	64
  5192  001A54  6E01               	movwf	i2WriteRegister@b,c
  5193  001A56  0E12               	movlw	18
  5194  001A58  EC91  F00D         	call	i2_WriteRegister
  5195                           
  5196                           ;LCD.c: 268: WriteRegister(0x12, comFlags);
  5197  001A5C  C005  F001         	movff	i2LCDWriteByte@comFlags,i2WriteRegister@b
  5198  001A60  0E12               	movlw	18
  5199  001A62  EC91  F00D         	call	i2_WriteRegister
  5200  001A66  0012               	return		;funcret
  5201  001A68                     __end_ofi2_LCDWriteByte:
  5202                           	opt stack 0
  5203                           pclatu	equ	0xFFB
  5204                           pclath	equ	0xFFA
  5205                           tblptru	equ	0xFF8
  5206                           tblptrh	equ	0xFF7
  5207                           tblptrl	equ	0xFF6
  5208                           tablat	equ	0xFF5
  5209                           prodh	equ	0xFF4
  5210                           prodl	equ	0xFF3
  5211                           intcon	equ	0xFF2
  5212                           intcon2	equ	0xFF1
  5213                           indf0	equ	0xFEF
  5214                           postinc0	equ	0xFEE
  5215                           fsr0h	equ	0xFEA
  5216                           fsr0l	equ	0xFE9
  5217                           wreg	equ	0xFE8
  5218                           postdec1	equ	0xFE5
  5219                           fsr1h	equ	0xFE2
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function i2_WriteRegister *****************
  5229 ;; Defined at:
  5230 ;;		line 320 in file "LCD.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  reg             1    wreg     unsigned char 
  5233 ;;  b               1    0[COMRAM] unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  reg             1    1[COMRAM] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;		None               void
  5238 ;; Registers used:
  5239 ;;		wreg, status,2
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5245 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;Total ram usage:        2 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		i2_LCDWriteByte
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text37
  5259  001B22                     __ptext37:
  5260                           	opt stack 0
  5261  001B22                     i2_WriteRegister:
  5262                           	opt stack 21
  5263                           
  5264                           ;incstack = 0
  5265                           ;i2WriteRegister@reg stored from wreg
  5266  001B22  6E02               	movwf	i2WriteRegister@reg,c
  5267                           
  5268                           ;LCD.c: 321: LATAbits.LATA2 = 0;
  5269  001B24  9489               	bcf	3977,2,c	;volatile
  5270                           
  5271                           ;LCD.c: 322: SSPBUF = 0x40;
  5272  001B26  0E40               	movlw	64
  5273  001B28  6EC9               	movwf	4041,c	;volatile
  5274  001B2A                     i2l166:
  5275  001B2A  A69E               	btfss	3998,3,c	;volatile
  5276  001B2C  D7FE               	goto	i2l166
  5277                           
  5278                           ;LCD.c: 324: SSPIF = 0;
  5279  001B2E  969E               	bcf	3998,3,c	;volatile
  5280                           
  5281                           ;LCD.c: 325: SSPBUF = reg;
  5282  001B30  C002  FFC9         	movff	i2WriteRegister@reg,4041	;volatile
  5283  001B34                     i2l169:
  5284  001B34  A69E               	btfss	3998,3,c	;volatile
  5285  001B36  D7FE               	goto	i2l169
  5286                           
  5287                           ;LCD.c: 327: SSPIF = 0;
  5288  001B38  969E               	bcf	3998,3,c	;volatile
  5289                           
  5290                           ;LCD.c: 328: SSPBUF = b;
  5291  001B3A  C001  FFC9         	movff	i2WriteRegister@b,4041	;volatile
  5292  001B3E                     i2l172:
  5293  001B3E  A69E               	btfss	3998,3,c	;volatile
  5294  001B40  D7FE               	goto	i2l172
  5295                           
  5296                           ;LCD.c: 330: SSPIF = 0;
  5297  001B42  969E               	bcf	3998,3,c	;volatile
  5298                           
  5299                           ;LCD.c: 331: LATAbits.LATA2 = 1;
  5300  001B44  8489               	bsf	3977,2,c	;volatile
  5301  001B46  0012               	return		;funcret
  5302  001B48                     __end_ofi2_WriteRegister:
  5303                           	opt stack 0
  5304                           pclatu	equ	0xFFB
  5305                           pclath	equ	0xFFA
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           intcon2	equ	0xFF1
  5314                           indf0	equ	0xFEF
  5315                           postinc0	equ	0xFEE
  5316                           fsr0h	equ	0xFEA
  5317                           fsr0l	equ	0xFE9
  5318                           wreg	equ	0xFE8
  5319                           postdec1	equ	0xFE5
  5320                           fsr1h	equ	0xFE2
  5321                           fsr1l	equ	0xFE1
  5322                           indf2	equ	0xFDF
  5323                           postinc2	equ	0xFDE
  5324                           postdec2	equ	0xFDD
  5325                           fsr2h	equ	0xFDA
  5326                           fsr2l	equ	0xFD9
  5327                           status	equ	0xFD8
  5328                           pclatu	equ	0xFFB
  5329                           pclath	equ	0xFFA
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           intcon	equ	0xFF2
  5337                           intcon2	equ	0xFF1
  5338                           indf0	equ	0xFEF
  5339                           postinc0	equ	0xFEE
  5340                           fsr0h	equ	0xFEA
  5341                           fsr0l	equ	0xFE9
  5342                           wreg	equ	0xFE8
  5343                           postdec1	equ	0xFE5
  5344                           fsr1h	equ	0xFE2
  5345                           fsr1l	equ	0xFE1
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           
  5353                           	psect	rparam
  5354  0000                     pclatu	equ	0xFFB
  5355                           pclath	equ	0xFFA
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           intcon	equ	0xFF2
  5363                           intcon2	equ	0xFF1
  5364                           indf0	equ	0xFEF
  5365                           postinc0	equ	0xFEE
  5366                           fsr0h	equ	0xFEA
  5367                           fsr0l	equ	0xFE9
  5368                           wreg	equ	0xFE8
  5369                           postdec1	equ	0xFE5
  5370                           fsr1h	equ	0xFE2
  5371                           fsr1l	equ	0xFE1
  5372                           indf2	equ	0xFDF
  5373                           postinc2	equ	0xFDE
  5374                           postdec2	equ	0xFDD
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379                           	psect	temp
  5380  00003C                     btemp:
  5381                           	opt stack 0
  5382  00003C                     	ds	1
  5383  0000                     int$flags	set	btemp
  5384                           pclatu	equ	0xFFB
  5385                           pclath	equ	0xFFA
  5386                           tblptru	equ	0xFF8
  5387                           tblptrh	equ	0xFF7
  5388                           tblptrl	equ	0xFF6
  5389                           tablat	equ	0xFF5
  5390                           prodh	equ	0xFF4
  5391                           prodl	equ	0xFF3
  5392                           intcon	equ	0xFF2
  5393                           intcon2	equ	0xFF1
  5394                           indf0	equ	0xFEF
  5395                           postinc0	equ	0xFEE
  5396                           fsr0h	equ	0xFEA
  5397                           fsr0l	equ	0xFE9
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           fsr1h	equ	0xFE2
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8


Data Sizes:
    Strings     27
    Constant    10
    Data        27
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      59
    BANK0           160     34      86
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), STR_2(CODE[3]), STR_1(CODE[8]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[7]), str(COMRAM[11]), rdStr(BANK0[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 17
		 -> line1str(BANK0[17]), line2str(BANK0[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_sprintf(COMRAM[2]), ?_sprintf(BANK0[2]), 

    LCDWriteLine@str	PTR const unsigned char  size(2) Largest target is 17
		 -> line1str(BANK0[17]), line2str(BANK0[17]), LCDScroll@str(COMRAM[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HighIsr in COMRAM

    _HighIsr->i2_sprintf
    i2_sprintf->i2___lwmod
    i2___lwmod->i2___lwdiv
    i2_LCDWriteLine->i2_LCDSetPos
    i2_LCDClearLine->i2_LCDSetPos
    i2_LCDWriteData->i2_LCDWriteByte
    i2_LCDSetPos->i2_LCDCommand
    i2_LCDCommand->i2_LCDWriteByte
    i2_LCDWriteByte->i2_WriteRegister

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDWriteLine->_LCDSetPos
    _LCDInit->_LCDInitCommand
    _LCDInitPort->_WriteRegister
    _LCDInitCommand->_LCDWriteByte
    _LCDClearLine->_LCDSetPos
    _LCDWriteData->_LCDWriteByte
    _LCDSetPos->_LCDCommand
    _LCDClear->_LCDCommand
    _LCDCommand->_LCDWriteByte
    _LCDWriteByte->_WriteRegister

Critical Paths under _HighIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HighIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HighIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   12069
                                             28 BANK0      6     6      0
                   _ConfigInterrupts
                       _ConfigPeriph
                           _InitPins
                           _LCDClear
                       _LCDClearLine
                            _LCDInit
                       _LCDWriteLine
                       _SPIReadWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6    2039
                                             12 BANK0     16    10      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SPIReadWrite                                         2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteLine                                         4     1      3    4002
                                             13 BANK0      4     1      3
                          _LCDSetPos
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0    1659
                                              6 BANK0      2     2      0
                     _LCDInitCommand
                        _LCDInitPort
 ---------------------------------------------------------------------------------
 (2) _LCDInitPort                                          0     0      0     601
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _LCDInitCommand                                       1     1      0    1024
                                              5 BANK0      1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDClearLine                                         2     2      0    3113
                                             13 BANK0      2     2      0
                          _LCDSetPos
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (2) _LCDWriteData                                         1     1      0    1024
                                              5 BANK0      1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (2) _LCDSetPos                                            7     3      4    1990
                                              6 BANK0      7     3      4
                         _LCDCommand
                      _calculateBase
 ---------------------------------------------------------------------------------
 (3) _calculateBase                                        2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             0     0      0    1024
                         _LCDCommand
                          _longDelay
 ---------------------------------------------------------------------------------
 (2) _longDelay                                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCDCommand                                           1     1      0    1024
                                              5 BANK0      1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (3) _wait                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _shortDelay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCDWriteByte                                         3     2      1     993
                                              2 BANK0      3     2      1
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _WriteRegister                                        2     1      1     601
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigPeriph                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighIsr                                             17    17      0    3625
                                             28 COMRAM    17    17      0
                     i2_LCDClearLine
                     i2_LCDWriteLine
                     i2_SPIReadWrite
                          i2_sprintf
 ---------------------------------------------------------------------------------
 (7) i2_sprintf                                           22    16      6    1069
                                             12 COMRAM    16    10      6
                          i2___lwdiv
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_SPIReadWrite                                       2     2      0      29
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) i2_LCDWriteLine                                       4     1      3    1322
                                             13 COMRAM     4     1      3
                        i2_LCDSetPos
                     i2_LCDWriteData
 ---------------------------------------------------------------------------------
 (7) i2_LCDClearLine                                       2     2      0    1137
                                             13 COMRAM     2     2      0
                        i2_LCDSetPos
                     i2_LCDWriteData
 ---------------------------------------------------------------------------------
 (8) i2_LCDWriteData                                       1     1      0     334
                                              5 COMRAM     1     1      0
                     i2_LCDWriteByte
                       i2_shortDelay
                             i2_wait
 ---------------------------------------------------------------------------------
 (8) i2_LCDSetPos                                          7     3      4     735
                                              6 COMRAM     7     3      4
                       i2_LCDCommand
                    i2_calculateBase
 ---------------------------------------------------------------------------------
 (9) i2_calculateBase                                      2     2      0      90
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2_LCDCommand                                         1     1      0     334
                                              5 COMRAM     1     1      0
                     i2_LCDWriteByte
                       i2_shortDelay
                             i2_wait
 ---------------------------------------------------------------------------------
 (9) i2_wait                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_shortDelay                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2_LCDWriteByte                                       3     2      1     312
                                              2 COMRAM     3     2      1
                    i2_WriteRegister
 ---------------------------------------------------------------------------------
 (10) i2_WriteRegister                                     2     1      1     148
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigInterrupts
   _ConfigPeriph
   _InitPins
   _LCDClear
     _LCDCommand
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
     _longDelay
   _LCDClearLine
     _LCDSetPos
       _LCDCommand
         _LCDWriteByte
           _WriteRegister
         _shortDelay
         _wait
       _calculateBase
     _LCDWriteData
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
   _LCDInit
     _LCDInitCommand
       _LCDWriteByte
         _WriteRegister
     _LCDInitPort
       _WriteRegister
   _LCDWriteLine
     _LCDSetPos
       _LCDCommand
         _LCDWriteByte
           _WriteRegister
         _shortDelay
         _wait
       _calculateBase
     _LCDWriteData
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
   _SPIReadWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _HighIsr (ROOT)
   i2_LCDClearLine
     i2_LCDSetPos
       i2_LCDCommand
         i2_LCDWriteByte
           i2_WriteRegister
         i2_shortDelay
         i2_wait
       i2_calculateBase
     i2_LCDWriteData
       i2_LCDWriteByte
         i2_WriteRegister
       i2_shortDelay
       i2_wait
   i2_LCDWriteLine
     i2_LCDSetPos
       i2_LCDCommand
         i2_LCDWriteByte
           i2_WriteRegister
         i2_shortDelay
         i2_wait
       i2_calculateBase
     i2_LCDWriteData
       i2_LCDWriteByte
         i2_WriteRegister
       i2_shortDelay
       i2_wait
   i2_SPIReadWrite
   i2_sprintf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0       0      37        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      56       5       53.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      3B       1       62.8%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      91      12        0.0%
DATA                 0      0      91       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Feb 06 18:44:07 2017

             ?_LCDInitPort 0001                _SSPSTATbits 000FC7                         l85 17A8  
                       _rx 0039         i2___lwdiv@dividend 0001                        l243 14C6  
                      l172 1B18                        l252 1BA6                        l166 1B04  
                      l169 1B0E                        l706 173A                        l716 1802  
            LCDClearLine@c 0091           ??i2_LCDClearLine 000E                        _str 002E  
       i2LCDWriteLine@line 0010            ?_LCDInitCommand 0001                        wreg 000FE8  
           ??_LCDClearLine 0091            __end_of_LCDInit 186C                       l2411 177C  
                     l2501 1626                       l2421 16EA                       l2511 1A00  
                     l2503 162C                       l2423 16F6                       l2353 1934  
                     l2409 1766                       l2513 1A18                       l2433 172C  
                     l2425 16FC                       l2441 17BE                       l2443 17CA  
                     l2611 119A                       l2373 1AE6                       l2517 1A22  
                     l2445 17D0                       l2375 1AF4                       l2449 17F4  
                     l2625 1222                       l2617 11BA                       l2483 15A4  
                     l2619 11C0                       l2627 122E                       l2493 15E0  
                     l2485 15BC                       l2581 10C8                       l2629 124E  
                     l2565 1054                       l2575 1090                       l2567 105C  
                     l2559 1036                       l2497 1600                       l2585 10F2  
                     l2499 1618                       l2587 1128                       l2771 149A  
                     l2597 1158                       l2599 115E                       l2793 1562  
                     l2785 1510                       l2797 1582                       l2799 1592  
                     STR_1 1014                       STR_2 1023                       STR_3 100B  
                     STR_4 101C                       u2160 10BA                       _LATD 000F8C  
                     u2170 10EA                       u2167 10B0                       u2417 181E  
                     u2177 10E0                       u2427 1830                       u2380 14C6  
                     u2437 183E                       u2447 1852                       u2457 1864  
                     u2467 1C16                       u2477 1C78                       i2l85 19A8  
     __end_ofi2_shortDelay 1C8A                       _flag 003B                       _main 144A  
                     _wait 1C8A                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       indf0 000FEF                       fsr0l 000FE9  
                     fsr2h 000FDA                       fsr1l 000FE1                       indf2 000FDF  
                     fsr2l 000FD9                       btemp 003C                       pclat 000FFA  
       __size_of_LCDSetPos 0066                       prodh 000FF4                       prodl 000FF3  
                     start 0120            __end_of_HighIsr 0120               ___param_bank 000010  
         __end_of_LCDClear 1C5E              ?_LCDWriteData 0001              ?_LCDWriteByte 0086  
            ?_LCDWriteLine 0091                      ?_main 0001                      ?_wait 0001  
          __end_of___lwdiv 1744            __end_of___lwmod 180C                      i2l172 1B3E  
                    i2l252 1C26                      i2l166 1B2A                      i2l270 00E4  
                    i2l169 1B34                      i2l269 009E                      i2l706 1910  
                    i2l716 19E2                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _SSPIF 007CF3     __size_of_WriteRegister 0028  
      __size_of_LCDCommand 001C               ?i2_LCDSetPos 0007            __end_of_dpowers 100B  
                    _count 0060                      _rdStr 00A6                      main@i 00A0  
                    tablat 000FF5                      status 000FD8            __end_of_sprintf 125C  
         ?i2_calculateBase 0001         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
         ??i2_LCDWriteData 0006            __initialization 186C           ??i2_LCDWriteByte 0004  
         ??i2_LCDWriteLine 0011       __end_of_ConfigPeriph 1C52               LCDSetPos@col 008C  
             LCDSetPos@pos 008F               LCDSetPos@row 008A               __end_of_main 159A  
             __end_of_wait 1C8C             ??_LCDWriteData 0089             ??_LCDWriteByte 0087  
           ??_LCDWriteLine 0094           __end_of_InitPins 1BCE                     ??_main 00A0  
         i2WriteRegister@b 0001                     ??_wait 0084              __activetblptr 000003  
               i2sprintf@c 001C                 i2sprintf@f 000F          __end_of_LCDSetPos 17AA  
                ??_LCDInit 008A         __size_ofi2_sprintf 01EE   __end_of_ConfigInterrupts 1C6A  
                   i2l2103 1368                     i2l2041 16AA                     i2l2025 1644  
                   i2l2105 136C                     i2l2043 16B8                     i2l2035 1676  
                   i2l2027 1658                     i2l2131 1418                     i2l2123 13BA  
                   i2l2053 1AAC                     i2l2045 16BC                     i2l2125 13C0  
                   i2l2117 139E                     i2l2133 1420                     i2l2055 1AC0  
                   i2l2039 1696                     i2l2135 143C                     i2l2071 1280  
                   i2l2081 12B0                     i2l2073 1286                     i2l2065 1266  
                   i2l2059 1AC8                     i2l2091 130E                     i2l2093 1340  
                   i2l2325 007E                     i2l1703 1B58                     i2l2087 12E4  
                   i2l1705 1B62                     i2l1811 18EA             __CFG_WDTEN$OFF 000000  
                   i2l1807 18DE                     i2l1831 19C4                     i2l1809 18E6  
                   i2l1819 1906                     i2l1835 19D8                     i2l1827 19B8  
                   i2l1669 1A3C                     i2l1829 19C0                     i2l1791 198C  
                   i2l1789 197C                  ??_HighIsr 001D                     _SSPBUF 000FC9  
                   i2_wait 1C8C             i2_SPIReadWrite 1C20              _WriteRegister 1AFA  
           __CFG_XINST$OFF 000000              ?i2_LCDCommand 0001              SPIReadWrite@r 0085  
     __end_of_LCDClearLine 1A2C                  ??___lwdiv 0088                  ??___lwmod 008F  
                   clear_0 1872       __size_of_LCDInitPort 0036           LCDClearLine@line 0092  
 __size_ofi2_WriteRegister 0026               __pdataCOMRAM 002E          __end_ofi2___lwdiv 191A  
             __mediumconst 0000          __end_ofi2___lwmod 19EC                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8      __size_ofi2_shortDelay 000A  
                ??_sprintf 0096            __CFG_FOSC$HSPLL 000000                  ?_LCDClear 0001  
               __accesstop 0060     __end_ofi2_SPIReadWrite 1C32    __end_of__initialization 18BE  
            i2sprintf@flag 0014             ?_WriteRegister 0084              ___rparam_used 000001  
            i2sprintf@prec 0015          __end_ofi2_sprintf 144A             ??i2_LCDCommand 0006  
             ??_LCDCommand 0089           WriteRegister@reg 0085         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001               __pidataBANK0 1C32           ??_LCDInitCommand 0089  
             i2_shortDelay 1C80         __end_of_LCDCommand 1B9E       __end_of_LCDWriteData 1B82  
               __pbssBANK0 0060       __end_of_LCDWriteByte 1964       __end_of_LCDWriteLine 163C  
              i2sprintf@ap 0016                i2sprintf@cp 0018       __size_ofi2_LCDSetPos 0046  
              i2sprintf@sp 000D                 ??_LCDClear 008A             WriteRegister@b 0084  
                ?_InitPins 0001            ?i2_SPIReadWrite 0001      __size_of_ConfigPeriph 0010  
                  ?i2_wait 0001         __size_of_longDelay 0012      LCDInitCommand@command 0089  
           i2LCDSetPos@col 0009             i2LCDSetPos@pos 000C             i2LCDSetPos@row 0007  
   __size_of_calculateBase 002A                    _LCDInit 180C          ??i2_WriteRegister 0002  
                  _SSP1BUF 000FC9               _ConfigPeriph 1C42                    _SSPCON1 000FC6  
          ??_WriteRegister 0085                 ??_InitPins 0084         LCDInit@functionSet 008B  
                  _HighIsr 0008      __size_of_LCDClearLine 0040        i2LCDCommand@command 0006  
   i2LCDWriteByte@comFlags 0005            __size_ofi2_wait 0002                    __Hparam 0000  
                  __Lparam 0000                    ___lwdiv 16CC                    ___lwmod 17AA  
             __psmallconst 1000                    __pcinit 186C                    __ramtop 1000  
                  __ptext0 144A                    __ptext1 1028                    __ptext2 17AA  
                  __ptext3 16CC                    __ptext4 1B9E                    __ptext5 159A  
                  __ptext6 180C                    __ptext7 1A68                    __ptext8 1BFA  
                  __ptext9 19EC                    _dpowers 1001       __end_ofi2_LCDCommand 1BFA  
        __end_of_longDelay 1C20          ?_ConfigInterrupts 0001                  _LCDSetPos 1744  
             _LCDClearLine 19EC                    _sprintf 1028       end_of_initialization 18BE  
       ??_ConfigInterrupts 0084            i2LCDClearLine@c 000F    __size_ofi2_LCDClearLine 0032  
            LCDWriteData@c 0089              _calculateBase 1AD0              LCDWriteByte@c 0087  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE   __size_ofi2_calculateBase 001E                 _shortDelay 1C76  
    __size_of_LCDWriteData 001C      __size_of_LCDWriteByte 004A      __size_of_LCDWriteLine 00A2  
                _TRISAbits 000F92                  _TRISCbits 000F94                 ?_LCDSetPos 008A  
               main@i_1277 00A4          i2___lwdiv@divisor 0003                  i2___lwdiv 18C8  
                i2___lwmod 19AA          i2___lwdiv@counter 0007              ?_SPIReadWrite 0001  
        i2LCDWriteLine@str 000E             ?_calculateBase 0001          __size_of_LCDClear 000C  
           __end_ofi2_wait 1C8E              ??_LCDInitPort 0086                  i2_sprintf 125C  
             _LCDWriteData 1B66               _LCDWriteByte 191A               _LCDWriteLine 159A  
            __pidataCOMRAM 1C6A    __size_ofi2_LCDWriteData 0016    __size_ofi2_LCDWriteByte 003C  
  __size_ofi2_LCDWriteLine 0090        start_initialization 186C         i2LCDClearLine@line 000E  
      i2calculateBase@base 0001           ??i2_SPIReadWrite 0001        i2calculateBase@line 0002  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008             ??_SPIReadWrite 0084  
                 ??i2_wait 0001          __size_of_InitPins 0018                 ?i2_sprintf 000D  
         SPIReadWrite@byte 0084                __pdataBANK0 00A6            i2_WriteRegister 1B22  
       i2WriteRegister@reg 0002                ?_shortDelay 0001      __size_ofi2_LCDCommand 0016  
          i2SPIReadWrite@r 0002        __end_of_LCDInitPort 1A9E                   ?_LCDInit 0001  
              __pbssCOMRAM 0039               i2sprintf@val 001A          ??i2_calculateBase 0001  
            __pcstackBANK0 0084          i2___lwmod@divisor 000A              ??i2_LCDSetPos 000B  
              ??_LCDSetPos 008E          i2___lwmod@counter 000C            ??_calculateBase 0084  
           i2_LCDClearLine 1A9E                sprintf@flag 0097                   ?_HighIsr 0001  
              sprintf@prec 0098           ___lwdiv@dividend 0084               i2_LCDCommand 1BE4  
                __pintcode 0008                   ?___lwdiv 0084                   ?___lwmod 008B  
         LCDWriteLine@line 0093                __smallconst 1000          LCDCommand@command 0089  
         ___lwdiv@quotient 0089    __size_of_LCDInitCommand 0014                   ?_sprintf 0090  
   __end_ofi2_LCDClearLine 1AD0                ??i2___lwdiv 0005                ??i2___lwmod 000C  
                _longDelay 1C0E                   _LCDClear 1C52                   _LATAbits 000F89  
      __end_ofi2_LCDSetPos 19AA        __size_of_shortDelay 000A      __end_of_WriteRegister 1B22  
  __end_ofi2_WriteRegister 1B48                   i2u160_40 1306                   i2u160_47 12FC  
                 i2u159_40 12DA                   i2u159_47 12D0                   i2u248_47 00A6  
                 _PIR1bits 000F9E                   i2u249_47 1C82                   i2u186_40 009E  
__size_of_ConfigInterrupts 000C                   _RCONbits 000FD0                   HighIsr@i 002C  
              _LCDInitPort 1A68                ??i2_sprintf 0013       __end_of_SPIReadWrite 1BB6  
           i2_LCDWriteData 1BCE           i2LCDWriteByte@rs 0003             i2_LCDWriteByte 1A2C  
           i2_LCDWriteLine 163C           __size_of_LCDInit 0060                _INTCON2bits 000FF1  
          ?i2_LCDClearLine 0001                  copy_data0 1892                  copy_data1 18B2  
               ?_longDelay 0001                   _InitPins 1BB6           __size_of_HighIsr 0118  
                 __Hrparam 0000       LCDWriteByte@comFlags 0088                   __Lrparam 0000  
   __end_ofi2_LCDWriteData 1BE4           __size_of___lwdiv 0078           __size_of___lwmod 0062  
   __end_ofi2_LCDWriteByte 1A68     __end_ofi2_LCDWriteLine 16CC              ?i2_shortDelay 0001  
               sprintf@val 009D            ___lwdiv@divisor 0086            ___lwdiv@counter 0088  
                 __ptext10 1B66                   __ptext11 1744                   __ptext20 1BB6  
                 __ptext12 1AD0                   __ptext21 1C42                   __ptext13 1C52  
                 __ptext30 1BCE                   __ptext22 1C5E                   __ptext14 1C0E  
                 __ptext31 1964                   __ptext15 1B82                   __ptext32 1B48  
                 __ptext24 125C                   __ptext16 1C8A                   __ptext33 1BE4  
                 __ptext25 19AA                   __ptext17 1C76                   __ptext34 1C8C  
                 __ptext26 18C8                   __ptext18 191A                   __ptext35 1C80  
                 __ptext27 1C20                   __ptext19 1AFA                   __ptext36 1A2C  
                 __ptext28 163C                   __ptext37 1B22                   __ptext29 1A9E  
             _SSP1CON1bits 000FC6                i2_LCDSetPos 1964            LCDWriteLine@str 0091  
         __size_of_sprintf 0234                   _line1str 0062                   _line2str 0073  
            __size_of_main 0150              __size_of_wait 0002           ?i2_WriteRegister 0001  
               _LCDCommand 1B82          calculateBase@base 0084          calculateBase@line 0085  
          i2LCDWriteData@c 0006                   int$flags 003C            i2_calculateBase 1B48  
          i2LCDWriteByte@c 0004               _SSP1STATbits 000FC7             ??i2_shortDelay 0001  
          ?i2_LCDWriteData 0001               ??_shortDelay 0084            ?i2_LCDWriteByte 0003  
          ?i2_LCDWriteLine 000E                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
            ?_ConfigPeriph 0001             _LCDInitCommand 1BFA                ??_longDelay 0084  
                 intlevel2 0000                  sprintf@ap 0099                  sprintf@cp 009B  
                sprintf@sp 0090           ___lwmod@dividend 008B             LCDWriteByte@rs 0086  
       __end_of_shortDelay 1C80           _ConfigInterrupts 1C5E      __size_of_SPIReadWrite 0018  
                 sprintf@c 009F                   sprintf@f 0092         i2SPIReadWrite@byte 0001  
          ___lwmod@divisor 008D     __end_of_LCDInitCommand 1C0E            ___lwmod@counter 008F  
           ??_ConfigPeriph 0084              ?_LCDClearLine 0001               _SPIReadWrite 1B9E  
    __end_of_calculateBase 1AFA    __end_ofi2_calculateBase 1B66    __size_ofi2_SPIReadWrite 0012  
              ?_LCDCommand 0001  
