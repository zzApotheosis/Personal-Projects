

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 06 18:13:11 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F87J11
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataBANK0
    61  011F00                     __pidataBANK0:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _code0
    65  011F00  28                 	db	40
    66  011F01  FE                 	db	254
    67  011F02  15                 	db	21
    68  011F03  CE                 	db	206
    69  011F04  04                 	db	4
    70  011F05  00                 	db	0
    71  011F06  00                 	db	0
    72  011F07  63                 	db	99
    73                           
    74                           ;initializer for _code1
    75  011F08  10                 	db	16
    76  011F09  A2                 	db	162
    77  011F0A  14                 	db	20
    78  011F0B  D5                 	db	213
    79  011F0C  02                 	db	2
    80  011F0D  08                 	db	8
    81  011F0E  00                 	db	0
    82  011F0F  13                 	db	19
    83                           
    84                           	psect	mediumconst
    85  00FE7E                     __pmediumconst:
    86                           	opt stack 0
    87  00FE7E  00                 	db	0
    88  00FE7F                     _OWCRCTable:
    89                           	opt stack 0
    90  00FE7F  00                 	db	0
    91  00FE80  5E                 	db	94
    92  00FE81  BC                 	db	188
    93  00FE82  E2                 	db	226
    94  00FE83  61                 	db	97
    95  00FE84  3F                 	db	63
    96  00FE85  DD                 	db	221
    97  00FE86  83                 	db	131
    98  00FE87  C2                 	db	194
    99  00FE88  9C                 	db	156
   100  00FE89  7E                 	db	126
   101  00FE8A  20                 	db	32
   102  00FE8B  A3                 	db	163
   103  00FE8C  FD                 	db	253
   104  00FE8D  1F                 	db	31
   105  00FE8E  41                 	db	65
   106  00FE8F  9D                 	db	157
   107  00FE90  C3                 	db	195
   108  00FE91  21                 	db	33
   109  00FE92  7F                 	db	127
   110  00FE93  FC                 	db	252
   111  00FE94  A2                 	db	162
   112  00FE95  40                 	db	64
   113  00FE96  1E                 	db	30
   114  00FE97  5F                 	db	95
   115  00FE98  01                 	db	1
   116  00FE99  E3                 	db	227
   117  00FE9A  BD                 	db	189
   118  00FE9B  3E                 	db	62
   119  00FE9C  60                 	db	96
   120  00FE9D  82                 	db	130
   121  00FE9E  DC                 	db	220
   122  00FE9F  23                 	db	35
   123  00FEA0  7D                 	db	125
   124  00FEA1  9F                 	db	159
   125  00FEA2  C1                 	db	193
   126  00FEA3  42                 	db	66
   127  00FEA4  1C                 	db	28
   128  00FEA5  FE                 	db	254
   129  00FEA6  A0                 	db	160
   130  00FEA7  E1                 	db	225
   131  00FEA8  BF                 	db	191
   132  00FEA9  5D                 	db	93
   133  00FEAA  03                 	db	3
   134  00FEAB  80                 	db	128
   135  00FEAC  DE                 	db	222
   136  00FEAD  3C                 	db	60
   137  00FEAE  62                 	db	98
   138  00FEAF  BE                 	db	190
   139  00FEB0  E0                 	db	224
   140  00FEB1  02                 	db	2
   141  00FEB2  5C                 	db	92
   142  00FEB3  DF                 	db	223
   143  00FEB4  81                 	db	129
   144  00FEB5  63                 	db	99
   145  00FEB6  3D                 	db	61
   146  00FEB7  7C                 	db	124
   147  00FEB8  22                 	db	34
   148  00FEB9  C0                 	db	192
   149  00FEBA  9E                 	db	158
   150  00FEBB  1D                 	db	29
   151  00FEBC  43                 	db	67
   152  00FEBD  A1                 	db	161
   153  00FEBE  FF                 	db	255
   154  00FEBF  46                 	db	70
   155  00FEC0  18                 	db	24
   156  00FEC1  FA                 	db	250
   157  00FEC2  A4                 	db	164
   158  00FEC3  27                 	db	39
   159  00FEC4  79                 	db	121
   160  00FEC5  9B                 	db	155
   161  00FEC6  C5                 	db	197
   162  00FEC7  84                 	db	132
   163  00FEC8  DA                 	db	218
   164  00FEC9  38                 	db	56
   165  00FECA  66                 	db	102
   166  00FECB  E5                 	db	229
   167  00FECC  BB                 	db	187
   168  00FECD  59                 	db	89
   169  00FECE  07                 	db	7
   170  00FECF  DB                 	db	219
   171  00FED0  85                 	db	133
   172  00FED1  67                 	db	103
   173  00FED2  39                 	db	57
   174  00FED3  BA                 	db	186
   175  00FED4  E4                 	db	228
   176  00FED5  06                 	db	6
   177  00FED6  58                 	db	88
   178  00FED7  19                 	db	25
   179  00FED8  47                 	db	71
   180  00FED9  A5                 	db	165
   181  00FEDA  FB                 	db	251
   182  00FEDB  78                 	db	120
   183  00FEDC  26                 	db	38
   184  00FEDD  C4                 	db	196
   185  00FEDE  9A                 	db	154
   186  00FEDF  65                 	db	101
   187  00FEE0  3B                 	db	59
   188  00FEE1  D9                 	db	217
   189  00FEE2  87                 	db	135
   190  00FEE3  04                 	db	4
   191  00FEE4  5A                 	db	90
   192  00FEE5  B8                 	db	184
   193  00FEE6  E6                 	db	230
   194  00FEE7  A7                 	db	167
   195  00FEE8  F9                 	db	249
   196  00FEE9  1B                 	db	27
   197  00FEEA  45                 	db	69
   198  00FEEB  C6                 	db	198
   199  00FEEC  98                 	db	152
   200  00FEED  7A                 	db	122
   201  00FEEE  24                 	db	36
   202  00FEEF  F8                 	db	248
   203  00FEF0  A6                 	db	166
   204  00FEF1  44                 	db	68
   205  00FEF2  1A                 	db	26
   206  00FEF3  99                 	db	153
   207  00FEF4  C7                 	db	199
   208  00FEF5  25                 	db	37
   209  00FEF6  7B                 	db	123
   210  00FEF7  3A                 	db	58
   211  00FEF8  64                 	db	100
   212  00FEF9  86                 	db	134
   213  00FEFA  D8                 	db	216
   214  00FEFB  5B                 	db	91
   215  00FEFC  05                 	db	5
   216  00FEFD  E7                 	db	231
   217  00FEFE  B9                 	db	185
   218  00FEFF  8C                 	db	140
   219  00FF00  D2                 	db	210
   220  00FF01  30                 	db	48
   221  00FF02  6E                 	db	110
   222  00FF03  ED                 	db	237
   223  00FF04  B3                 	db	179
   224  00FF05  51                 	db	81
   225  00FF06  0F                 	db	15
   226  00FF07  4E                 	db	78
   227  00FF08  10                 	db	16
   228  00FF09  F2                 	db	242
   229  00FF0A  AC                 	db	172
   230  00FF0B  2F                 	db	47
   231  00FF0C  71                 	db	113
   232  00FF0D  93                 	db	147
   233  00FF0E  CD                 	db	205
   234  00FF0F  11                 	db	17
   235  00FF10  4F                 	db	79
   236  00FF11  AD                 	db	173
   237  00FF12  F3                 	db	243
   238  00FF13  70                 	db	112
   239  00FF14  2E                 	db	46
   240  00FF15  CC                 	db	204
   241  00FF16  92                 	db	146
   242  00FF17  D3                 	db	211
   243  00FF18  8D                 	db	141
   244  00FF19  6F                 	db	111
   245  00FF1A  31                 	db	49
   246  00FF1B  B2                 	db	178
   247  00FF1C  EC                 	db	236
   248  00FF1D  0E                 	db	14
   249  00FF1E  50                 	db	80
   250  00FF1F  AF                 	db	175
   251  00FF20  F1                 	db	241
   252  00FF21  13                 	db	19
   253  00FF22  4D                 	db	77
   254  00FF23  CE                 	db	206
   255  00FF24  90                 	db	144
   256  00FF25  72                 	db	114
   257  00FF26  2C                 	db	44
   258  00FF27  6D                 	db	109
   259  00FF28  33                 	db	51
   260  00FF29  D1                 	db	209
   261  00FF2A  8F                 	db	143
   262  00FF2B  0C                 	db	12
   263  00FF2C  52                 	db	82
   264  00FF2D  B0                 	db	176
   265  00FF2E  EE                 	db	238
   266  00FF2F  32                 	db	50
   267  00FF30  6C                 	db	108
   268  00FF31  8E                 	db	142
   269  00FF32  D0                 	db	208
   270  00FF33  53                 	db	83
   271  00FF34  0D                 	db	13
   272  00FF35  EF                 	db	239
   273  00FF36  B1                 	db	177
   274  00FF37  F0                 	db	240
   275  00FF38  AE                 	db	174
   276  00FF39  4C                 	db	76
   277  00FF3A  12                 	db	18
   278  00FF3B  91                 	db	145
   279  00FF3C  CF                 	db	207
   280  00FF3D  2D                 	db	45
   281  00FF3E  73                 	db	115
   282  00FF3F  CA                 	db	202
   283  00FF40  94                 	db	148
   284  00FF41  76                 	db	118
   285  00FF42  28                 	db	40
   286  00FF43  AB                 	db	171
   287  00FF44  F5                 	db	245
   288  00FF45  17                 	db	23
   289  00FF46  49                 	db	73
   290  00FF47  08                 	db	8
   291  00FF48  56                 	db	86
   292  00FF49  B4                 	db	180
   293  00FF4A  EA                 	db	234
   294  00FF4B  69                 	db	105
   295  00FF4C  37                 	db	55
   296  00FF4D  D5                 	db	213
   297  00FF4E  8B                 	db	139
   298  00FF4F  57                 	db	87
   299  00FF50  09                 	db	9
   300  00FF51  EB                 	db	235
   301  00FF52  B5                 	db	181
   302  00FF53  36                 	db	54
   303  00FF54  68                 	db	104
   304  00FF55  8A                 	db	138
   305  00FF56  D4                 	db	212
   306  00FF57  95                 	db	149
   307  00FF58  CB                 	db	203
   308  00FF59  29                 	db	41
   309  00FF5A  77                 	db	119
   310  00FF5B  F4                 	db	244
   311  00FF5C  AA                 	db	170
   312  00FF5D  48                 	db	72
   313  00FF5E  16                 	db	22
   314  00FF5F  E9                 	db	233
   315  00FF60  B7                 	db	183
   316  00FF61  55                 	db	85
   317  00FF62  0B                 	db	11
   318  00FF63  88                 	db	136
   319  00FF64  D6                 	db	214
   320  00FF65  34                 	db	52
   321  00FF66  6A                 	db	106
   322  00FF67  2B                 	db	43
   323  00FF68  75                 	db	117
   324  00FF69  97                 	db	151
   325  00FF6A  C9                 	db	201
   326  00FF6B  4A                 	db	74
   327  00FF6C  14                 	db	20
   328  00FF6D  F6                 	db	246
   329  00FF6E  A8                 	db	168
   330  00FF6F  74                 	db	116
   331  00FF70  2A                 	db	42
   332  00FF71  C8                 	db	200
   333  00FF72  96                 	db	150
   334  00FF73  15                 	db	21
   335  00FF74  4B                 	db	75
   336  00FF75  A9                 	db	169
   337  00FF76  F7                 	db	247
   338  00FF77  B6                 	db	182
   339  00FF78  E8                 	db	232
   340  00FF79  0A                 	db	10
   341  00FF7A  54                 	db	84
   342  00FF7B  D7                 	db	215
   343  00FF7C  89                 	db	137
   344  00FF7D  6B                 	db	107
   345  00FF7E  35                 	db	53
   346  00FF7F                     __end_of_OWCRCTable:
   347                           	opt stack 0
   348  00FF7F                     _dpowers:
   349                           	opt stack 0
   350  00FF7F  0001               	dw	1
   351  00FF81  0000               	dw	0
   352  00FF83  000A               	dw	10
   353  00FF85  0000               	dw	0
   354  00FF87  0064               	dw	100
   355  00FF89  0000               	dw	0
   356  00FF8B  03E8               	dw	1000
   357  00FF8D  0000               	dw	0
   358  00FF8F  2710               	dw	10000
   359  00FF91  0000               	dw	0
   360  00FF93  86A0               	dw	34464
   361  00FF95  0001               	dw	1
   362  00FF97  4240               	dw	16960
   363  00FF99  000F               	dw	15
   364  00FF9B  9680               	dw	38528
   365  00FF9D  0098               	dw	152
   366  00FF9F  E100               	dw	57600
   367  00FFA1  05F5               	dw	1525
   368  00FFA3  CA00               	dw	51712
   369  00FFA5  3B9A               	dw	15258
   370  00FFA7                     __end_of_dpowers:
   371                           	opt stack 0
   372  00FFA7                     __npowers_:
   373                           	opt stack 0
   374  00FFA7  00                 	db	0
   375  00FFA8  80                 	db	128
   376  00FFA9  3F                 	db	63
   377  00FFAA  CD                 	db	205
   378  00FFAB  CC                 	db	204
   379  00FFAC  3D                 	db	61
   380  00FFAD  D7                 	db	215
   381  00FFAE  23                 	db	35
   382  00FFAF  3C                 	db	60
   383  00FFB0  12                 	db	18
   384  00FFB1  83                 	db	131
   385  00FFB2  3A                 	db	58
   386  00FFB3  B7                 	db	183
   387  00FFB4  D1                 	db	209
   388  00FFB5  38                 	db	56
   389  00FFB6  C6                 	db	198
   390  00FFB7  27                 	db	39
   391  00FFB8  37                 	db	55
   392  00FFB9  38                 	db	56
   393  00FFBA  86                 	db	134
   394  00FFBB  35                 	db	53
   395  00FFBC  C0                 	db	192
   396  00FFBD  D6                 	db	214
   397  00FFBE  33                 	db	51
   398  00FFBF  CC                 	db	204
   399  00FFC0  2B                 	db	43
   400  00FFC1  32                 	db	50
   401  00FFC2  70                 	db	112
   402  00FFC3  89                 	db	137
   403  00FFC4  30                 	db	48
   404  00FFC5  E7                 	db	231
   405  00FFC6  DB                 	db	219
   406  00FFC7  2E                 	db	46
   407  00FFC8  E5                 	db	229
   408  00FFC9  3C                 	db	60
   409  00FFCA  1E                 	db	30
   410  00FFCB  42                 	db	66
   411  00FFCC  A2                 	db	162
   412  00FFCD  0D                 	db	13
   413  00FFCE                     __end_of__npowers_:
   414                           	opt stack 0
   415  00FFCE                     __powers_:
   416                           	opt stack 0
   417  00FFCE  00                 	db	0
   418  00FFCF  80                 	db	128
   419  00FFD0  3F                 	db	63
   420  00FFD1  00                 	db	0
   421  00FFD2  20                 	db	32
   422  00FFD3  41                 	db	65
   423  00FFD4  00                 	db	0
   424  00FFD5  C8                 	db	200
   425  00FFD6  42                 	db	66
   426  00FFD7  00                 	db	0
   427  00FFD8  7A                 	db	122
   428  00FFD9  44                 	db	68
   429  00FFDA  40                 	db	64
   430  00FFDB  1C                 	db	28
   431  00FFDC  46                 	db	70
   432  00FFDD  50                 	db	80
   433  00FFDE  C3                 	db	195
   434  00FFDF  47                 	db	71
   435  00FFE0  24                 	db	36
   436  00FFE1  74                 	db	116
   437  00FFE2  49                 	db	73
   438  00FFE3  97                 	db	151
   439  00FFE4  18                 	db	24
   440  00FFE5  4B                 	db	75
   441  00FFE6  BC                 	db	188
   442  00FFE7  BE                 	db	190
   443  00FFE8  4C                 	db	76
   444  00FFE9  6B                 	db	107
   445  00FFEA  6E                 	db	110
   446  00FFEB  4E                 	db	78
   447  00FFEC  03                 	db	3
   448  00FFED  15                 	db	21
   449  00FFEE  50                 	db	80
   450  00FFEF  79                 	db	121
   451  00FFF0  AD                 	db	173
   452  00FFF1  60                 	db	96
   453  00FFF2  F3                 	db	243
   454  00FFF3  49                 	db	73
   455  00FFF4  71                 	db	113
   456  00FFF5                     __end_of__powers_:
   457                           	opt stack 0
   458  0000                     _LATAbits	set	3977
   459  0000                     _LATDbits	set	3980
   460  0000                     _LATJbits	set	3985
   461  0000                     _OSCTUNEbits	set	3995
   462  0000                     _PORTJbits	set	3976
   463  0000                     _SSPBUF	set	4041
   464  0000                     _SSPCON1	set	4038
   465  0000                     _SSPSTATbits	set	4039
   466  0000                     _TRISAbits	set	3986
   467  0000                     _TRISCbits	set	3988
   468  0000                     _TRISD	set	3989
   469  0000                     _TRISJbits	set	3994
   470  0000                     _SSPIF	set	31987
   471  00FFF5                     STR_1:
   472  00FFF5  54                 	db	84	;'T'
   473  00FFF6  30                 	db	48	;'0'
   474  00FFF7  3D                 	db	61	;'='
   475  00FFF8  25                 	db	37
   476  00FFF9  2E                 	db	46
   477  00FFFA  32                 	db	50	;'2'
   478  00FFFB  66                 	db	102	;'f'
   479  00FFFC  20                 	db	32
   480  00FFFD  43                 	db	67	;'C'
   481  00FFFE  00                 	db	0
   482                           
   483                           ; #config settings
   484  00FFFF  00                 	db	0	; dummy byte at the end
   485  0000                     
   486                           	psect	cinit
   487  011CA2                     __pcinit:
   488                           	opt stack 0
   489  011CA2                     start_initialization:
   490                           	opt stack 0
   491  011CA2                     __initialization:
   492                           	opt stack 0
   493                           
   494                           ; Clear objects allocated to BANK0 (34 bytes)
   495  011CA2  EE00  F060         	lfsr	0,__pbssBANK0
   496  011CA6  0E22               	movlw	34
   497  011CA8                     clear_0:
   498  011CA8  6AEE               	clrf	postinc0,c
   499  011CAA  06E8               	decf	wreg,f,c
   500  011CAC  E1FD               	bnz	clear_0
   501                           
   502                           ; Clear objects allocated to COMRAM (10 bytes)
   503  011CAE  EE00  F053         	lfsr	0,__pbssCOMRAM
   504  011CB2  0E0A               	movlw	10
   505  011CB4                     clear_1:
   506  011CB4  6AEE               	clrf	postinc0,c
   507  011CB6  06E8               	decf	wreg,f,c
   508  011CB8  E1FD               	bnz	clear_1
   509                           
   510                           ; Initialize objects allocated to BANK0 (16 bytes)
   511                           ; load TBLPTR registers with __pidataBANK0
   512  011CBA  0E00               	movlw	low __pidataBANK0
   513  011CBC  6EF6               	movwf	tblptrl,c
   514  011CBE  0E1F               	movlw	high __pidataBANK0
   515  011CC0  6EF7               	movwf	tblptrh,c
   516  011CC2  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   517  011CC4  6EF8               	movwf	tblptru,c
   518  011CC6  EE00  F099         	lfsr	0,__pdataBANK0
   519  011CCA  EE10 F010          	lfsr	1,16
   520  011CCE                     copy_data0:
   521  011CCE  0009               	tblrd		*+
   522  011CD0  CFF5 FFEE          	movff	tablat,postinc0
   523  011CD4  50E5               	movf	postdec1,w,c
   524  011CD6  50E1               	movf	fsr1l,w,c
   525  011CD8  E1FA               	bnz	copy_data0
   526  011CDA                     end_of_initialization:
   527                           	opt stack 0
   528  011CDA                     __end_of__initialization:
   529                           	opt stack 0
   530  011CDA  0100               	movlb	0
   531  011CDC  EF99  F08C         	goto	_main	;jump to C main() function
   532                           tblptru	equ	0xFF8
   533                           tblptrh	equ	0xFF7
   534                           tblptrl	equ	0xFF6
   535                           tablat	equ	0xFF5
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           postdec1	equ	0xFE5
   539                           fsr1l	equ	0xFE1
   540                           
   541                           	psect	bssCOMRAM
   542  000053                     __pbssCOMRAM:
   543                           	opt stack 0
   544  000053                     _lastDevice:
   545                           	opt stack 0
   546  000053                     	ds	1
   547  000054                     _lastDiscrepancy:
   548                           	opt stack 0
   549  000054                     	ds	1
   550  000055                     _OWSearchRomCode:
   551                           	opt stack 0
   552  000055                     	ds	8
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1l	equ	0xFE1
   561                           
   562                           	psect	bssBANK0
   563  000060                     __pbssBANK0:
   564                           	opt stack 0
   565  000060                     _str1:
   566                           	opt stack 0
   567  000060                     	ds	17
   568  000071                     _str0:
   569                           	opt stack 0
   570  000071                     	ds	17
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           
   580                           	psect	dataBANK0
   581  000099                     __pdataBANK0:
   582                           	opt stack 0
   583  000099                     _code0:
   584                           	opt stack 0
   585  000099                     	ds	8
   586  0000A1                     _code1:
   587                           	opt stack 0
   588  0000A1                     	ds	8
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           postinc0	equ	0xFEE
   594                           wreg	equ	0xFE8
   595                           postdec1	equ	0xFE5
   596                           fsr1l	equ	0xFE1
   597                           
   598                           	psect	cstackBANK0
   599  000082                     __pcstackBANK0:
   600                           	opt stack 0
   601  000082                     _sprintf$1855:
   602                           	opt stack 0
   603                           
   604                           ; 3 bytes @ 0x0
   605  000082                     	ds	3
   606  000085                     sprintf@ap:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x3
   610  000085                     	ds	2
   611  000087                     sprintf@flag:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x5
   615  000087                     	ds	2
   616  000089                     sprintf@val:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0x7
   620  000089                     	ds	4
   621  00008D                     sprintf@exp:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0xB
   625  00008D                     	ds	2
   626  00008F                     sprintf@tmpval:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0xD
   630  00008F                     	ds	4
   631  000093                     sprintf@prec:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x11
   635  000093                     	ds	2
   636  000095                     sprintf@fval:
   637                           	opt stack 0
   638                           
   639                           ; 3 bytes @ 0x13
   640  000095                     	ds	3
   641  000098                     sprintf@c:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x16
   645  000098                     	ds	1
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           postdec1	equ	0xFE5
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	cstackCOMRAM
   656  000001                     __pcstackCOMRAM:
   657                           	opt stack 0
   658  000001                     ??_longDelay:
   659  000001                     ??_isdigit:
   660  000001                     ??_OWReset:
   661  000001                     ?___awmod:
   662                           	opt stack 0
   663  000001                     ?___ftpack:
   664                           	opt stack 0
   665  000001                     ?___ftneg:
   666                           	opt stack 0
   667  000001                     ?__tdiv_to_l_:
   668                           	opt stack 0
   669  000001                     ?__div_to_l_:
   670                           	opt stack 0
   671  000001                     ?___lldiv:
   672                           	opt stack 0
   673  000001                     ?___llmod:
   674                           	opt stack 0
   675  000001                     OWReadByte@b:
   676                           	opt stack 0
   677  000001                     OWWriteByte@b:
   678                           	opt stack 0
   679  000001                     calculateBase@base:
   680                           	opt stack 0
   681  000001                     WriteRegister@b:
   682                           	opt stack 0
   683  000001                     OWCRC@buff:
   684                           	opt stack 0
   685  000001                     ___awmod@dividend:
   686                           	opt stack 0
   687  000001                     __div_to_l_@f1:
   688                           	opt stack 0
   689  000001                     ___ftpack@arg:
   690                           	opt stack 0
   691  000001                     __tdiv_to_l_@f1:
   692                           	opt stack 0
   693  000001                     ___ftge@ff1:
   694                           	opt stack 0
   695  000001                     ___ftneg@f1:
   696                           	opt stack 0
   697  000001                     ___lldiv@dividend:
   698                           	opt stack 0
   699  000001                     ___llmod@dividend:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x0
   703  000001                     	ds	1
   704  000002                     OWReset@presence:
   705                           	opt stack 0
   706  000002                     OWReadByte@i:
   707                           	opt stack 0
   708  000002                     OWWriteByte@i:
   709                           	opt stack 0
   710  000002                     calculateBase@line:
   711                           	opt stack 0
   712  000002                     WriteRegister@reg:
   713                           	opt stack 0
   714  000002                     _isdigit$1472:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x1
   718  000002                     	ds	1
   719  000003                     LCDWriteByte@rs:
   720                           	opt stack 0
   721  000003                     isdigit@c:
   722                           	opt stack 0
   723  000003                     OWReadBytes@buff:
   724                           	opt stack 0
   725  000003                     OWWriteBytes@buff:
   726                           	opt stack 0
   727  000003                     OWCRC@len:
   728                           	opt stack 0
   729  000003                     ___awmod@divisor:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x2
   733  000003                     	ds	1
   734  000004                     LCDWriteByte@c:
   735                           	opt stack 0
   736  000004                     ___ftpack@exp:
   737                           	opt stack 0
   738  000004                     __div_to_l_@f2:
   739                           	opt stack 0
   740  000004                     __tdiv_to_l_@f2:
   741                           	opt stack 0
   742  000004                     ___ftge@ff2:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x3
   746  000004                     	ds	1
   747  000005                     ??_OWCRC:
   748  000005                     LCDWriteByte@comFlags:
   749                           	opt stack 0
   750  000005                     ___awmod@counter:
   751                           	opt stack 0
   752  000005                     ___ftpack@sign:
   753                           	opt stack 0
   754  000005                     OWReadBytes@len:
   755                           	opt stack 0
   756  000005                     OWWriteBytes@len:
   757                           	opt stack 0
   758  000005                     ___lldiv@divisor:
   759                           	opt stack 0
   760  000005                     ___llmod@divisor:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x4
   764  000005                     	ds	1
   765  000006                     ??___ftpack:
   766  000006                     LCDCommand@command:
   767                           	opt stack 0
   768  000006                     LCDInitCommand@command:
   769                           	opt stack 0
   770  000006                     LCDWriteData@c:
   771                           	opt stack 0
   772  000006                     ___awmod@sign:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x5
   776  000006                     	ds	1
   777  000007                     ??_LCDInit:
   778  000007                     ??__tdiv_to_l_:
   779  000007                     ??_OWReadBytes:
   780  000007                     ??_OWWriteBytes:
   781  000007                     ??___ftge:
   782  000007                     ?___awdiv:
   783                           	opt stack 0
   784  000007                     LCDSetPos@row:
   785                           	opt stack 0
   786  000007                     ___awdiv@dividend:
   787                           	opt stack 0
   788  000007                     __div_to_l_@quot:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x6
   792  000007                     	ds	1
   793  000008                     OWCRC@crc:
   794                           	opt stack 0
   795  000008                     LCDInit@functionSet:
   796                           	opt stack 0
   797  000008                     OWReadBytes@i:
   798                           	opt stack 0
   799  000008                     OWWriteBytes@i:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x7
   803  000008                     	ds	1
   804  000009                     ?___awtoft:
   805                           	opt stack 0
   806  000009                     ?___lltoft:
   807                           	opt stack 0
   808  000009                     OWCRC@i:
   809                           	opt stack 0
   810  000009                     ___llmod@counter:
   811                           	opt stack 0
   812  000009                     LCDSetPos@col:
   813                           	opt stack 0
   814  000009                     ___awdiv@divisor:
   815                           	opt stack 0
   816  000009                     ___awtoft@c:
   817                           	opt stack 0
   818  000009                     ___lldiv@quotient:
   819                           	opt stack 0
   820  000009                     ___lltoft@c:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x8
   824  000009                     	ds	1
   825  00000A                     __tdiv_to_l_@quot:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x9
   829  00000A                     	ds	1
   830  00000B                     ??_LCDSetPos:
   831  00000B                     ___awdiv@counter:
   832                           	opt stack 0
   833  00000B                     __div_to_l_@cntr:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0xA
   837  00000B                     	ds	1
   838  00000C                     ___awdiv@sign:
   839                           	opt stack 0
   840  00000C                     ___awtoft@sign:
   841                           	opt stack 0
   842  00000C                     __div_to_l_@exp1:
   843                           	opt stack 0
   844  00000C                     LCDSetPos@pos:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0xB
   848  00000C                     	ds	1
   849  00000D                     ??___lltoft:
   850  00000D                     ?___ftdiv:
   851                           	opt stack 0
   852  00000D                     ___lldiv@counter:
   853                           	opt stack 0
   854  00000D                     ___awdiv@quotient:
   855                           	opt stack 0
   856  00000D                     ___ftdiv@f1:
   857                           	opt stack 0
   858                           
   859                           ; 3 bytes @ 0xC
   860  00000D                     	ds	1
   861  00000E                     __tdiv_to_l_@cntr:
   862                           	opt stack 0
   863  00000E                     LCDWriteLine@str:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0xD
   867  00000E                     	ds	1
   868  00000F                     ?___wmul:
   869                           	opt stack 0
   870  00000F                     __tdiv_to_l_@exp1:
   871                           	opt stack 0
   872  00000F                     ___wmul@multiplier:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0xE
   876  00000F                     	ds	1
   877  000010                     LCDWriteLine@line:
   878                           	opt stack 0
   879  000010                     ___ftdiv@f2:
   880                           	opt stack 0
   881                           
   882                           ; 3 bytes @ 0xF
   883  000010                     	ds	1
   884  000011                     ___lltoft@exp:
   885                           	opt stack 0
   886  000011                     ___wmul@multiplicand:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x10
   890  000011                     	ds	2
   891  000013                     ??___ftdiv:
   892  000013                     ___wmul@product:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x12
   896  000013                     	ds	2
   897  000015                     ?___ftmul:
   898                           	opt stack 0
   899  000015                     ___ftmul@f1:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x14
   903  000015                     	ds	1
   904  000016                     ___ftdiv@cntr:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x15
   908  000016                     	ds	1
   909  000017                     ___ftdiv@f3:
   910                           	opt stack 0
   911                           
   912                           ; 3 bytes @ 0x16
   913  000017                     	ds	1
   914  000018                     ___ftmul@f2:
   915                           	opt stack 0
   916                           
   917                           ; 3 bytes @ 0x17
   918  000018                     	ds	2
   919  00001A                     ___ftdiv@exp:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x19
   923  00001A                     	ds	1
   924  00001B                     ??___ftmul:
   925  00001B                     ___ftdiv@sign:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x1A
   929  00001B                     	ds	1
   930  00001C                     ?_ReadDS18S20PAR:
   931                           	opt stack 0
   932  00001C                     ReadDS18S20PAR@rc:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x1B
   936  00001C                     	ds	2
   937  00001E                     ___ftmul@exp:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x1D
   941  00001E                     	ds	1
   942  00001F                     ??_ReadDS18S20PAR:
   943  00001F                     ___ftmul@f3_as_product:
   944                           	opt stack 0
   945                           
   946                           ; 3 bytes @ 0x1E
   947  00001F                     	ds	1
   948  000020                     ReadDS18S20PAR@i:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x1F
   952  000020                     	ds	1
   953  000021                     ReadDS18S20PAR@sp:
   954                           	opt stack 0
   955                           
   956                           ; 9 bytes @ 0x20
   957  000021                     	ds	1
   958  000022                     ___ftmul@cntr:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x21
   962  000022                     	ds	1
   963  000023                     ___ftmul@sign:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x22
   967  000023                     	ds	1
   968  000024                     ?_fround:
   969                           	opt stack 0
   970  000024                     ?_scale:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x23
   974  000024                     	ds	3
   975  000027                     _fround$1853:
   976                           	opt stack 0
   977  000027                     _scale$1854:
   978                           	opt stack 0
   979                           
   980                           ; 3 bytes @ 0x26
   981  000027                     	ds	3
   982  00002A                     scale@scl:
   983                           	opt stack 0
   984  00002A                     _fround$1852:
   985                           	opt stack 0
   986                           
   987                           ; 3 bytes @ 0x29
   988  00002A                     	ds	1
   989  00002B                     ?___fttol:
   990                           	opt stack 0
   991  00002B                     ___fttol@f1:
   992                           	opt stack 0
   993                           
   994                           ; 3 bytes @ 0x2A
   995  00002B                     	ds	2
   996  00002D                     fround@prec:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x2C
  1000  00002D                     	ds	1
  1001  00002E                     ?___ftadd:
  1002                           	opt stack 0
  1003  00002E                     ___ftadd@f1:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x2D
  1007  00002E                     	ds	1
  1008  00002F                     ??___fttol:
  1009                           
  1010                           ; 0 bytes @ 0x2E
  1011  00002F                     	ds	2
  1012  000031                     ___ftadd@f2:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0x30
  1016  000031                     	ds	3
  1017  000034                     ??___ftadd:
  1018  000034                     ___fttol@sign1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x33
  1022  000034                     	ds	1
  1023  000035                     ___fttol@lval:
  1024                           	opt stack 0
  1025                           
  1026                           ; 4 bytes @ 0x34
  1027  000035                     	ds	2
  1028  000037                     ___ftadd@sign:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x36
  1032  000037                     	ds	1
  1033  000038                     ___ftadd@exp2:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x37
  1037  000038                     	ds	1
  1038  000039                     ___ftadd@exp1:
  1039                           	opt stack 0
  1040  000039                     ___fttol@exp1:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x38
  1044  000039                     	ds	1
  1045  00003A                     ?___ftsub:
  1046                           	opt stack 0
  1047  00003A                     ___ftsub@f1:
  1048                           	opt stack 0
  1049                           
  1050                           ; 3 bytes @ 0x39
  1051  00003A                     	ds	3
  1052  00003D                     ___ftsub@f2:
  1053                           	opt stack 0
  1054                           
  1055                           ; 3 bytes @ 0x3C
  1056  00003D                     	ds	3
  1057  000040                     ?_sprintf:
  1058                           	opt stack 0
  1059  000040                     sprintf@sp:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x3F
  1063  000040                     	ds	2
  1064  000042                     sprintf@f:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x41
  1068  000042                     	ds	5
  1069  000047                     ??_sprintf:
  1070                           
  1071                           ; 0 bytes @ 0x46
  1072  000047                     	ds	6
  1073  00004D                     main@t1:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x4C
  1077  00004D                     	ds	3
  1078  000050                     main@t0:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x4F
  1082  000050                     	ds	3
  1083                           tblptru	equ	0xFF8
  1084                           tblptrh	equ	0xFF7
  1085                           tblptrl	equ	0xFF6
  1086                           tablat	equ	0xFF5
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           postdec1	equ	0xFE5
  1090                           fsr1l	equ	0xFE1
  1091                           
  1092 ;;
  1093 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1094 ;;
  1095 ;; *************** function _main *****************
  1096 ;; Defined at:
  1097 ;;		line 26 in file "OWMain.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;		None
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  t0              3   79[COMRAM] PTR unsigned char 
  1102 ;;  t1              3   76[COMRAM] PTR unsigned char 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;		None               void
  1105 ;; Registers used:
  1106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;Total ram usage:        6 bytes
  1117 ;; Hardware stack levels required when called:    5
  1118 ;; This function calls:
  1119 ;;		_LCDClear
  1120 ;;		_LCDInit
  1121 ;;		_LCDWriteLine
  1122 ;;		_OWInit
  1123 ;;		_ReadDS18S20PAR
  1124 ;;		_sprintf
  1125 ;; This function is called by:
  1126 ;;		Startup code after reset
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text0
  1131  011932                     __ptext0:
  1132                           	opt stack 0
  1133  011932                     _main:
  1134                           	opt stack 26
  1135                           
  1136                           ;OWMain.c: 27: double t0 = 0;
  1137                           
  1138                           ;incstack = 0
  1139  011932  0E00               	movlw	0
  1140  011934  6E50               	movwf	main@t0,c
  1141  011936  0E00               	movlw	0
  1142  011938  6E51               	movwf	main@t0+1,c
  1143  01193A  0E00               	movlw	0
  1144  01193C  6E52               	movwf	main@t0+2,c
  1145                           
  1146                           ;OWMain.c: 28: double t1 = 0;
  1147  01193E  0E00               	movlw	0
  1148  011940  6E4D               	movwf	main@t1,c
  1149  011942  0E00               	movlw	0
  1150  011944  6E4E               	movwf	main@t1+1,c
  1151  011946  0E00               	movlw	0
  1152  011948  6E4F               	movwf	main@t1+2,c
  1153                           
  1154                           ;OWMain.c: 29: TRISD = 0;
  1155  01194A  0E00               	movlw	0
  1156  01194C  6E95               	movwf	3989,c	;volatile
  1157                           
  1158                           ;OWMain.c: 30: OSCTUNEbits.PLLEN = 1;
  1159  01194E  8C9B               	bsf	3995,6,c	;volatile
  1160                           
  1161                           ;OWMain.c: 31: LCDInit();
  1162  011950  EC9F  F08D         	call	_LCDInit	;wreg free
  1163                           
  1164                           ;OWMain.c: 32: LCDClear();
  1165  011954  EC97  F08F         	call	_LCDClear	;wreg free
  1166                           
  1167                           ;OWMain.c: 33: OWInit();
  1168  011958  ECA2  F08F         	call	_OWInit	;wreg free
  1169  01195C                     l3778:
  1170                           
  1171                           ;OWMain.c: 39: t0 = ReadDS18S20PAR((0));
  1172  01195C  0E00               	movlw	0
  1173  01195E  6E1C               	movwf	ReadDS18S20PAR@rc,c
  1174  011960  0E00               	movlw	0
  1175  011962  6E1D               	movwf	ReadDS18S20PAR@rc+1,c
  1176  011964  EC48  F089         	call	_ReadDS18S20PAR	;wreg free
  1177  011968  C01C  F050         	movff	?_ReadDS18S20PAR,main@t0
  1178  01196C  C01D  F051         	movff	?_ReadDS18S20PAR+1,main@t0+1
  1179  011970  C01E  F052         	movff	?_ReadDS18S20PAR+2,main@t0+2
  1180                           
  1181                           ;OWMain.c: 40: LATDbits.LATD0 ^= 1;
  1182  011974  708C               	btg	3980,0,c	;volatile
  1183                           
  1184                           ;OWMain.c: 41: sprintf(str0, "T0=%.2f C", t0);
  1185  011976  0E71               	movlw	low _str0
  1186  011978  6E40               	movwf	sprintf@sp,c
  1187  01197A  0E00               	movlw	high _str0
  1188  01197C  6E41               	movwf	sprintf@sp+1,c
  1189  01197E  0EF5               	movlw	low STR_1
  1190  011980  6E42               	movwf	sprintf@f,c
  1191  011982  0EFF               	movlw	high STR_1
  1192  011984  6E43               	movwf	sprintf@f+1,c
  1193  011986  C050  F044         	movff	main@t0,?_sprintf+4
  1194  01198A  C051  F045         	movff	main@t0+1,?_sprintf+5
  1195  01198E  C052  F046         	movff	main@t0+2,?_sprintf+6
  1196  011992  EC00  F080         	call	_sprintf	;wreg free
  1197                           
  1198                           ;OWMain.c: 45: LCDWriteLine(str0, 0);
  1199  011996  0E71               	movlw	low _str0
  1200  011998  6E0E               	movwf	LCDWriteLine@str,c
  1201  01199A  0E00               	movlw	high _str0
  1202  01199C  6E0F               	movwf	LCDWriteLine@str+1,c
  1203  01199E  0E00               	movlw	0
  1204  0119A0  6E10               	movwf	LCDWriteLine@line,c
  1205  0119A2  ECCE  F08B         	call	_LCDWriteLine	;wreg free
  1206  0119A6  D7DA               	goto	l3778
  1207  0119A8                     __end_of_main:
  1208                           	opt stack 0
  1209                           tblptru	equ	0xFF8
  1210                           tblptrh	equ	0xFF7
  1211                           tblptrl	equ	0xFF6
  1212                           tablat	equ	0xFF5
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           postdec1	equ	0xFE5
  1216                           fsr1l	equ	0xFE1
  1217                           
  1218 ;; *************** function _sprintf *****************
  1219 ;; Defined at:
  1220 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1223 ;;		 -> str0(17), 
  1224 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1225 ;;		 -> STR_1(10), 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;  tmpval          4   13[BANK0 ] struct .
  1228 ;;  val             4    7[BANK0 ] unsigned long 
  1229 ;;  fval            3   19[BANK0 ] unsigned long 
  1230 ;;  cp              3    0        PTR const unsigned char 
  1231 ;;  prec            2   17[BANK0 ] int 
  1232 ;;  exp             2   11[BANK0 ] int 
  1233 ;;  flag            2    5[BANK0 ] unsigned short 
  1234 ;;  ap              2    3[BANK0 ] PTR void [1]
  1235 ;;		 -> ?_sprintf(2), 
  1236 ;;  len             2    0        unsigned int 
  1237 ;;  width           2    0        int 
  1238 ;;  c               1   22[BANK0 ] char 
  1239 ;;  d               1    0        unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  2   63[COMRAM] int 
  1242 ;; Registers used:
  1243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1249 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Totals:        13      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;Total ram usage:       36 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    3
  1256 ;; This function calls:
  1257 ;;		___awdiv
  1258 ;;		___ftadd
  1259 ;;		___ftge
  1260 ;;		___ftmul
  1261 ;;		___ftneg
  1262 ;;		___ftsub
  1263 ;;		___fttol
  1264 ;;		___lldiv
  1265 ;;		___llmod
  1266 ;;		___lltoft
  1267 ;;		___wmul
  1268 ;;		__div_to_l_
  1269 ;;		__tdiv_to_l_
  1270 ;;		_fround
  1271 ;;		_isdigit
  1272 ;;		_scale
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text1
  1279  010000                     __ptext1:
  1280                           	opt stack 0
  1281  010000                     _sprintf:
  1282                           	opt stack 27
  1283                           
  1284                           ;doprnt.c: 494: va_list ap;
  1285                           ;doprnt.c: 499: signed char c;
  1286                           ;doprnt.c: 501: int width;
  1287                           ;doprnt.c: 504: int prec;
  1288                           ;doprnt.c: 508: unsigned short flag;
  1289                           ;doprnt.c: 515: char d;
  1290                           ;doprnt.c: 516: double fval;
  1291                           ;doprnt.c: 517: int exp;
  1292                           ;doprnt.c: 523: union {
  1293                           ;doprnt.c: 524: unsigned long vd;
  1294                           ;doprnt.c: 525: double integ;
  1295                           ;doprnt.c: 526: } tmpval;
  1296                           ;doprnt.c: 528: unsigned long val;
  1297                           ;doprnt.c: 529: unsigned len;
  1298                           ;doprnt.c: 530: const char * cp;
  1299                           ;doprnt.c: 533: *ap = __va_start();
  1300                           
  1301                           ;incstack = 0
  1302  010000  0E44               	movlw	low (?_sprintf+4)
  1303  010002  0100               	movlb	0	; () banked
  1304  010004  6F85               	movwf	sprintf@ap& (0+255),b
  1305  010006  0E00               	movlw	high (?_sprintf+4)
  1306  010008  0100               	movlb	0	; () banked
  1307  01000A  6F86               	movwf	(sprintf@ap+1)& (0+255),b
  1308                           
  1309                           ;doprnt.c: 536: while(c = *f++) {
  1310  01000C  D3D7               	goto	l3700
  1311  01000E                     l3502:
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;doprnt.c: 538: if(c != '%')
  1315  01000E  0E25               	movlw	37
  1316  010010  0100               	movlb	0	; () banked
  1317  010012  1998               	xorwf	sprintf@c& (0+255),w,b
  1318  010014  B4D8               	btfsc	status,2,c
  1319  010016  D007               	goto	l3508
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 540: {
  1323                           ;doprnt.c: 541: ((*sp++ = (c)));
  1324  010018  C040  FFD9         	movff	sprintf@sp,fsr2l
  1325  01001C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1326  010020  C098  FFDF         	movff	sprintf@c,indf2
  1327  010024  D3C9               	goto	l3698
  1328  010026                     l3508:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;doprnt.c: 543: }
  1332                           ;doprnt.c: 548: flag = 0;
  1333  010026  0E00               	movlw	0
  1334  010028  0100               	movlb	0	; () banked
  1335  01002A  6F88               	movwf	(sprintf@flag+1)& (0+255),b
  1336  01002C  0E00               	movlw	0
  1337  01002E  6F87               	movwf	sprintf@flag& (0+255),b
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;doprnt.c: 611: if(*f == '.') {
  1341  010030  C042  FFF6         	movff	sprintf@f,tblptrl
  1342  010034  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1343  010038                     	if	0	;tblptru may be non-zero
  1344  010038                     	endif
  1345  010038                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1346  010038  0E00               	movlw	low (__mediumconst shr (0+16))
  1347  01003A  6EF8               	movwf	tblptru,c
  1348  01003C                     	endif
  1349  01003C  0008               	tblrd		*
  1350  01003E  50F5               	movf	tablat,w,c
  1351  010040  0A2E               	xorlw	46
  1352  010042  A4D8               	btfss	status,2,c
  1353  010044  D036               	goto	l3522
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;doprnt.c: 612: flag |= 0x4000;
  1357  010046  0100               	movlb	0	; () banked
  1358  010048  8D88               	bsf	(sprintf@flag+1)& (0+255),6,b
  1359                           
  1360                           ;doprnt.c: 613: f++;
  1361  01004A  4A42               	infsnz	sprintf@f,f,c
  1362  01004C  2A43               	incf	sprintf@f+1,f,c
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;doprnt.c: 620: {
  1366                           ;doprnt.c: 621: prec = 0;
  1367  01004E  0E00               	movlw	0
  1368  010050  0100               	movlb	0	; () banked
  1369  010052  6F94               	movwf	(sprintf@prec+1)& (0+255),b
  1370  010054  0E00               	movlw	0
  1371  010056  6F93               	movwf	sprintf@prec& (0+255),b
  1372                           
  1373                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1374  010058  D01F               	goto	l3520
  1375  01005A                     l3516:
  1376                           
  1377                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1378  01005A  C093  F00F         	movff	sprintf@prec,___wmul@multiplier
  1379  01005E  C094  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1380  010062  0E00               	movlw	0
  1381  010064  6E12               	movwf	___wmul@multiplicand+1,c
  1382  010066  0E0A               	movlw	10
  1383  010068  6E11               	movwf	___wmul@multiplicand,c
  1384  01006A  EC14  F08F         	call	___wmul	;wreg free
  1385  01006E  C042  FFF6         	movff	sprintf@f,tblptrl
  1386  010072  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1387  010076                     	if	0	;tblptru may be non-zero
  1388  010076                     	endif
  1389  010076                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1390  010076  0E00               	movlw	low (__mediumconst shr (0+16))
  1391  010078  6EF8               	movwf	tblptru,c
  1392  01007A                     	endif
  1393  01007A  0008               	tblrd		*
  1394  01007C  50F5               	movf	tablat,w,c
  1395  01007E  260F               	addwf	?___wmul,f,c
  1396  010080  0E00               	movlw	0
  1397  010082  2210               	addwfc	?___wmul+1,f,c
  1398  010084  0ED0               	movlw	208
  1399  010086  240F               	addwf	?___wmul,w,c
  1400  010088  0100               	movlb	0	; () banked
  1401  01008A  6F93               	movwf	sprintf@prec& (0+255),b
  1402  01008C  0EFF               	movlw	255
  1403  01008E  2010               	addwfc	?___wmul+1,w,c
  1404  010090  0100               	movlb	0	; () banked
  1405  010092  6F94               	movwf	(sprintf@prec+1)& (0+255),b
  1406                           
  1407                           ; BSR set to: 0
  1408  010094  4A42               	infsnz	sprintf@f,f,c
  1409  010096  2A43               	incf	sprintf@f+1,f,c
  1410  010098                     l3520:
  1411                           
  1412                           ; BSR set to: 0
  1413  010098  C042  FFF6         	movff	sprintf@f,tblptrl
  1414  01009C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1415  0100A0                     	if	0	;tblptru may be non-zero
  1416  0100A0                     	endif
  1417  0100A0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1418  0100A0  0E00               	movlw	low (__mediumconst shr (0+16))
  1419  0100A2  6EF8               	movwf	tblptru,c
  1420  0100A4                     	endif
  1421  0100A4  0008               	tblrd		*
  1422  0100A6  50F5               	movf	tablat,w,c
  1423  0100A8  EC4C  F08F         	call	_isdigit
  1424  0100AC  A0D8               	btfss	status,0,c
  1425  0100AE  D00C               	goto	l3530
  1426  0100B0  D7D4               	goto	l3516
  1427  0100B2                     l3522:
  1428                           
  1429                           ;doprnt.c: 626: prec = 0;
  1430  0100B2  0E00               	movlw	0
  1431  0100B4  0100               	movlb	0	; () banked
  1432  0100B6  6F94               	movwf	(sprintf@prec+1)& (0+255),b
  1433  0100B8  0E00               	movlw	0
  1434  0100BA  6F93               	movwf	sprintf@prec& (0+255),b
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;doprnt.c: 628: flag |= 0x1000;
  1438  0100BC  0100               	movlb	0	; () banked
  1439  0100BE  8988               	bsf	(sprintf@flag+1)& (0+255),4,b
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;doprnt.c: 630: }
  1443                           ;doprnt.c: 635: switch(c = *f++) {
  1444  0100C0  D003               	goto	l3530
  1445  0100C2                     l3526:
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;doprnt.c: 663: flag |= 0x400;
  1449  0100C2  0100               	movlb	0	; () banked
  1450  0100C4  8588               	bsf	(sprintf@flag+1)& (0+255),2,b
  1451                           
  1452                           ;doprnt.c: 664: break;
  1453  0100C6  D014               	goto	l3532
  1454  0100C8                     l3530:
  1455  0100C8  C042  FFF6         	movff	sprintf@f,tblptrl
  1456  0100CC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1457  0100D0  4A42               	infsnz	sprintf@f,f,c
  1458  0100D2  2A43               	incf	sprintf@f+1,f,c
  1459  0100D4                     	if	0	;tblptru may be non-zero
  1460  0100D4                     	endif
  1461  0100D4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1462  0100D4  0E00               	movlw	low (__mediumconst shr (0+16))
  1463  0100D6  6EF8               	movwf	tblptru,c
  1464  0100D8                     	endif
  1465  0100D8  0008               	tblrd		*
  1466  0100DA  CFF5 F098          	movff	tablat,sprintf@c
  1467  0100DE  0100               	movlb	0	; () banked
  1468  0100E0  5198               	movf	sprintf@c& (0+255),w,b
  1469                           
  1470                           ; Switch size 1, requested type "space"
  1471                           ; Number of cases is 2, Range of values is 0 to 102
  1472                           ; switch strategies available:
  1473                           ; Name         Instructions Cycles
  1474                           ; simple_byte            7     4 (average)
  1475                           ;	Chosen strategy is simple_byte
  1476  0100E2  0A00               	xorlw	0	; case 0
  1477  0100E4  B4D8               	btfsc	status,2,c
  1478  0100E6  D379               	goto	l3702
  1479  0100E8  0A66               	xorlw	102	; case 102
  1480  0100EA  B4D8               	btfsc	status,2,c
  1481  0100EC  D7EA               	goto	l3526
  1482  0100EE  D366               	goto	l3700
  1483  0100F0                     l3532:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;doprnt.c: 825: if(flag & (0x700)) {
  1487  0100F0  0E07               	movlw	7
  1488  0100F2  0100               	movlb	0	; () banked
  1489  0100F4  1588               	andwf	(sprintf@flag+1)& (0+255),w,b
  1490  0100F6  B4D8               	btfsc	status,2,c
  1491  0100F8  D312               	goto	l3680
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;doprnt.c: 827: if(flag & 0x1000)
  1495  0100FA  0100               	movlb	0	; () banked
  1496  0100FC  A988               	btfss	(sprintf@flag+1)& (0+255),4,b
  1497  0100FE  D005               	goto	l3538
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;doprnt.c: 829: prec = 6;
  1501  010100  0E00               	movlw	0
  1502  010102  0100               	movlb	0	; () banked
  1503  010104  6F94               	movwf	(sprintf@prec+1)& (0+255),b
  1504  010106  0E06               	movlw	6
  1505  010108  6F93               	movwf	sprintf@prec& (0+255),b
  1506  01010A                     l3538:
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1510  01010A  C085  FFD9         	movff	sprintf@ap,fsr2l
  1511  01010E  C086  FFDA         	movff	sprintf@ap+1,fsr2h
  1512  010112  CFDE F095          	movff	postinc2,sprintf@fval
  1513  010116  CFDE F096          	movff	postinc2,sprintf@fval+1
  1514  01011A  CFDD F097          	movff	postdec2,sprintf@fval+2
  1515                           
  1516                           ; BSR set to: 0
  1517  01011E  0E03               	movlw	3
  1518  010120  0100               	movlb	0	; () banked
  1519  010122  2785               	addwf	sprintf@ap& (0+255),f,b
  1520  010124  0E00               	movlw	0
  1521  010126  2386               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;doprnt.c: 831: if(fval < 0.0) {
  1525  010128  0100               	movlb	0	; () banked
  1526  01012A  AF97               	btfss	(sprintf@fval+2)& (0+255),7,b
  1527  01012C  D011               	goto	l3548
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;doprnt.c: 832: fval = -fval;
  1531  01012E  C095  F001         	movff	sprintf@fval,___ftneg@f1
  1532  010132  C096  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1533  010136  C097  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1534  01013A  EC3A  F08F         	call	___ftneg	;wreg free
  1535  01013E  C001  F095         	movff	?___ftneg,sprintf@fval
  1536  010142  C002  F096         	movff	?___ftneg+1,sprintf@fval+1
  1537  010146  C003  F097         	movff	?___ftneg+2,sprintf@fval+2
  1538                           
  1539                           ;doprnt.c: 833: flag |= 0x03;
  1540  01014A  0E03               	movlw	3
  1541  01014C  0100               	movlb	0	; () banked
  1542  01014E  1387               	iorwf	sprintf@flag& (0+255),f,b
  1543  010150                     l3548:
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;doprnt.c: 834: }
  1547                           ;doprnt.c: 835: exp = 0;
  1548  010150  0E00               	movlw	0
  1549  010152  0100               	movlb	0	; () banked
  1550  010154  6F8E               	movwf	(sprintf@exp+1)& (0+255),b
  1551  010156  0E00               	movlw	0
  1552  010158  6F8D               	movwf	sprintf@exp& (0+255),b
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;doprnt.c: 836: if( fval!=0) {
  1556  01015A  0100               	movlb	0	; () banked
  1557  01015C  5195               	movf	sprintf@fval& (0+255),w,b
  1558  01015E  0100               	movlb	0	; () banked
  1559  010160  1196               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1560  010162  0100               	movlb	0	; () banked
  1561  010164  1197               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1562  010166  B4D8               	btfsc	status,2,c
  1563  010168  D08B               	goto	l3576
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1567  01016A  0E82               	movlw	130
  1568  01016C  6E47               	movwf	??_sprintf& (0+255),c
  1569  01016E  0EFF               	movlw	255
  1570  010170  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1571  010172  C095  F049         	movff	sprintf@fval,??_sprintf+2
  1572  010176  C096  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1573  01017A  C097  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1574  01017E  C098  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1575  010182  0E10               	movlw	16
  1576  010184  D005               	goto	u3490
  1577  010186                     u3495:
  1578  010186  90D8               	bcf	status,0,c
  1579  010188  324C               	rrcf	??_sprintf+5,f,c
  1580  01018A  324B               	rrcf	??_sprintf+4,f,c
  1581  01018C  324A               	rrcf	??_sprintf+3,f,c
  1582  01018E  3249               	rrcf	??_sprintf+2,f,c
  1583  010190                     u3490:
  1584  010190  2EE8               	decfsz	wreg,f,c
  1585  010192  D7F9               	goto	u3495
  1586  010194  5049               	movf	??_sprintf+2,w,c
  1587  010196  2447               	addwf	??_sprintf,w,c
  1588  010198  0100               	movlb	0	; () banked
  1589  01019A  6F8D               	movwf	sprintf@exp& (0+255),b
  1590  01019C  0E00               	movlw	0
  1591  01019E  2048               	addwfc	??_sprintf+1,w,c
  1592  0101A0  0100               	movlb	0	; () banked
  1593  0101A2  6F8E               	movwf	(sprintf@exp+1)& (0+255),b
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;doprnt.c: 838: exp--;
  1597  0101A4  0100               	movlb	0	; () banked
  1598  0101A6  078D               	decf	sprintf@exp& (0+255),f,b
  1599  0101A8  A0D8               	btfss	status,0,c
  1600  0101AA  078E               	decf	(sprintf@exp+1)& (0+255),f,b
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;doprnt.c: 839: exp *= 3;
  1604  0101AC  C08D  F00F         	movff	sprintf@exp,___wmul@multiplier
  1605  0101B0  C08E  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1606  0101B4  0E00               	movlw	0
  1607  0101B6  6E12               	movwf	___wmul@multiplicand+1,c
  1608  0101B8  0E03               	movlw	3
  1609  0101BA  6E11               	movwf	___wmul@multiplicand,c
  1610  0101BC  EC14  F08F         	call	___wmul	;wreg free
  1611  0101C0  C00F  F08D         	movff	?___wmul,sprintf@exp
  1612  0101C4  C010  F08E         	movff	?___wmul+1,sprintf@exp+1
  1613                           
  1614                           ;doprnt.c: 840: exp /= 10;
  1615  0101C8  C08D  F007         	movff	sprintf@exp,___awdiv@dividend
  1616  0101CC  C08E  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1617  0101D0  0E00               	movlw	0
  1618  0101D2  6E0A               	movwf	___awdiv@divisor+1,c
  1619  0101D4  0E0A               	movlw	10
  1620  0101D6  6E09               	movwf	___awdiv@divisor,c
  1621  0101D8  EC16  F08C         	call	___awdiv	;wreg free
  1622  0101DC  C007  F08D         	movff	?___awdiv,sprintf@exp
  1623  0101E0  C008  F08E         	movff	?___awdiv+1,sprintf@exp+1
  1624                           
  1625                           ;doprnt.c: 841: if(exp < 0)
  1626  0101E4  0100               	movlb	0	; () banked
  1627  0101E6  AF8E               	btfss	(sprintf@exp+1)& (0+255),7,b
  1628  0101E8  D004               	goto	l3564
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;doprnt.c: 842: exp--;
  1632  0101EA  0100               	movlb	0	; () banked
  1633  0101EC  078D               	decf	sprintf@exp& (0+255),f,b
  1634  0101EE  A0D8               	btfss	status,0,c
  1635  0101F0  078E               	decf	(sprintf@exp+1)& (0+255),f,b
  1636  0101F2                     l3564:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1640  0101F2  0100               	movlb	0	; () banked
  1641  0101F4  518D               	movf	sprintf@exp& (0+255),w,b
  1642  0101F6  0800               	sublw	0
  1643  0101F8  ECF4  F083         	call	_scale
  1644  0101FC  C024  F08F         	movff	?_scale,sprintf@tmpval
  1645  010200  C025  F090         	movff	?_scale+1,sprintf@tmpval+1
  1646  010204  C026  F091         	movff	?_scale+2,sprintf@tmpval+2
  1647                           
  1648                           ;doprnt.c: 847: tmpval.integ *= fval;
  1649  010208  C08F  F015         	movff	sprintf@tmpval,___ftmul@f1
  1650  01020C  C090  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1651  010210  C091  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1652  010214  C095  F018         	movff	sprintf@fval,___ftmul@f2
  1653  010218  C096  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1654  01021C  C097  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1655  010220  ECC8  F089         	call	___ftmul	;wreg free
  1656  010224  C015  F08F         	movff	?___ftmul,sprintf@tmpval
  1657  010228  C016  F090         	movff	?___ftmul+1,sprintf@tmpval+1
  1658  01022C  C017  F091         	movff	?___ftmul+2,sprintf@tmpval+2
  1659                           
  1660                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1661  010230  C08F  F001         	movff	sprintf@tmpval,___ftge@ff1
  1662  010234  C090  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1663  010238  C091  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1664  01023C  0E00               	movlw	0
  1665  01023E  6E04               	movwf	___ftge@ff2,c
  1666  010240  0E80               	movlw	128
  1667  010242  6E05               	movwf	___ftge@ff2+1,c
  1668  010244  0E3F               	movlw	63
  1669  010246  6E06               	movwf	___ftge@ff2+2,c
  1670  010248  EC86  F08B         	call	___ftge	;wreg free
  1671  01024C  B0D8               	btfsc	status,0,c
  1672  01024E  D005               	goto	l3572
  1673                           
  1674                           ;doprnt.c: 849: exp--;
  1675  010250  0100               	movlb	0	; () banked
  1676  010252  078D               	decf	sprintf@exp& (0+255),f,b
  1677  010254  A0D8               	btfss	status,0,c
  1678  010256  078E               	decf	(sprintf@exp+1)& (0+255),f,b
  1679  010258  D013               	goto	l3576
  1680  01025A                     l3572:
  1681                           
  1682                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1683  01025A  C08F  F001         	movff	sprintf@tmpval,___ftge@ff1
  1684  01025E  C090  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1685  010262  C091  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1686  010266  0E00               	movlw	0
  1687  010268  6E04               	movwf	___ftge@ff2,c
  1688  01026A  0E20               	movlw	32
  1689  01026C  6E05               	movwf	___ftge@ff2+1,c
  1690  01026E  0E41               	movlw	65
  1691  010270  6E06               	movwf	___ftge@ff2+2,c
  1692  010272  EC86  F08B         	call	___ftge	;wreg free
  1693  010276  A0D8               	btfss	status,0,c
  1694  010278  D003               	goto	l3576
  1695                           
  1696                           ;doprnt.c: 851: exp++;
  1697  01027A  0100               	movlb	0	; () banked
  1698  01027C  4B8D               	infsnz	sprintf@exp& (0+255),f,b
  1699  01027E  2B8E               	incf	(sprintf@exp+1)& (0+255),f,b
  1700  010280                     l3576:
  1701                           
  1702                           ;doprnt.c: 852: }
  1703                           ;doprnt.c: 1112: if(prec <= 12)
  1704  010280  0100               	movlb	0	; () banked
  1705  010282  BF94               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1706  010284  D008               	goto	l3578
  1707  010286  0100               	movlb	0	; () banked
  1708  010288  5194               	movf	(sprintf@prec+1)& (0+255),w,b
  1709  01028A  E11D               	bnz	l3580
  1710  01028C  0E0D               	movlw	13
  1711  01028E  0100               	movlb	0	; () banked
  1712  010290  5D93               	subwf	sprintf@prec& (0+255),w,b
  1713  010292  B0D8               	btfsc	status,0,c
  1714  010294  D018               	goto	l3580
  1715  010296                     l3578:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;doprnt.c: 1113: fval += fround(prec);
  1719  010296  C095  F02E         	movff	sprintf@fval,___ftadd@f1
  1720  01029A  C096  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1721  01029E  C097  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1722  0102A2  0100               	movlb	0	; () banked
  1723  0102A4  5193               	movf	sprintf@prec& (0+255),w,b
  1724  0102A6  EC10  F086         	call	_fround
  1725  0102AA  C024  F031         	movff	?_fround,___ftadd@f2
  1726  0102AE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1727  0102B2  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1728  0102B6  EC45  F087         	call	___ftadd	;wreg free
  1729  0102BA  C02E  F095         	movff	?___ftadd,sprintf@fval
  1730  0102BE  C02F  F096         	movff	?___ftadd+1,sprintf@fval+1
  1731  0102C2  C030  F097         	movff	?___ftadd+2,sprintf@fval+2
  1732  0102C6                     l3580:
  1733                           
  1734                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1735  0102C6  0100               	movlb	0	; () banked
  1736  0102C8  BF8E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1737  0102CA  D008               	goto	l3582
  1738  0102CC  0100               	movlb	0	; () banked
  1739  0102CE  518E               	movf	(sprintf@exp+1)& (0+255),w,b
  1740  0102D0  E126               	bnz	l3588
  1741  0102D2  0E0A               	movlw	10
  1742  0102D4  0100               	movlb	0	; () banked
  1743  0102D6  5D8D               	subwf	sprintf@exp& (0+255),w,b
  1744  0102D8  B0D8               	btfsc	status,0,c
  1745  0102DA  D021               	goto	l3588
  1746  0102DC                     l3582:
  1747                           
  1748                           ; BSR set to: 0
  1749  0102DC  0100               	movlb	0	; () banked
  1750  0102DE  5195               	movf	sprintf@fval& (0+255),w,b
  1751  0102E0  0100               	movlb	0	; () banked
  1752  0102E2  1196               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1753  0102E4  0100               	movlb	0	; () banked
  1754  0102E6  1197               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1755  0102E8  B4D8               	btfsc	status,2,c
  1756  0102EA  D05B               	goto	l3602
  1757                           
  1758                           ; BSR set to: 0
  1759  0102EC  C095  F02B         	movff	sprintf@fval,___fttol@f1
  1760  0102F0  C096  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1761  0102F4  C097  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1762  0102F8  EC42  F08A         	call	___fttol	;wreg free
  1763  0102FC  502B               	movf	?___fttol,w,c
  1764  0102FE  102C               	iorwf	?___fttol+1,w,c
  1765  010300  102D               	iorwf	?___fttol+2,w,c
  1766  010302  102E               	iorwf	?___fttol+3,w,c
  1767  010304  A4D8               	btfss	status,2,c
  1768  010306  D04D               	goto	l3602
  1769  010308  0100               	movlb	0	; () banked
  1770  01030A  BF8E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1771  01030C  D04A               	goto	l3602
  1772  01030E  0100               	movlb	0	; () banked
  1773  010310  518E               	movf	(sprintf@exp+1)& (0+255),w,b
  1774  010312  E105               	bnz	l3588
  1775  010314  0E02               	movlw	2
  1776  010316  0100               	movlb	0	; () banked
  1777  010318  5D8D               	subwf	sprintf@exp& (0+255),w,b
  1778  01031A  A0D8               	btfss	status,0,c
  1779  01031C  D042               	goto	l3602
  1780  01031E                     l3588:
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1784  01031E  C08F  F001         	movff	sprintf@tmpval,___ftge@ff1
  1785  010322  C090  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1786  010326  C091  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1787  01032A  0E70               	movlw	112
  1788  01032C  6E04               	movwf	___ftge@ff2,c
  1789  01032E  0E89               	movlw	137
  1790  010330  6E05               	movwf	___ftge@ff2+1,c
  1791  010332  0E40               	movlw	64
  1792  010334  6E06               	movwf	___ftge@ff2+2,c
  1793  010336  EC86  F08B         	call	___ftge	;wreg free
  1794  01033A  B0D8               	btfsc	status,0,c
  1795  01033C  D003               	goto	l3592
  1796                           
  1797                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1798  01033E  0100               	movlb	0	; () banked
  1799  010340  0EF7               	movlw	247
  1800  010342  D002               	goto	L1
  1801  010344                     l3592:
  1802                           
  1803                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1804  010344  0100               	movlb	0	; () banked
  1805  010346  0EF8               	movlw	248
  1806  010348                     L1:
  1807  010348  278D               	addwf	sprintf@exp& (0+255),f,b
  1808  01034A  0EFF               	movlw	255
  1809  01034C  238E               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;doprnt.c: 1124: }
  1813                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1814                           
  1815                           ; BSR set to: 0
  1816  01034E  0100               	movlb	0	; () banked
  1817  010350  518D               	movf	sprintf@exp& (0+255),w,b
  1818  010352  ECF4  F083         	call	_scale
  1819  010356  C024  F08F         	movff	?_scale,sprintf@tmpval
  1820  01035A  C025  F090         	movff	?_scale+1,sprintf@tmpval+1
  1821  01035E  C026  F091         	movff	?_scale+2,sprintf@tmpval+2
  1822                           
  1823                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1824  010362  C095  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1825  010366  C096  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1826  01036A  C097  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1827  01036E  C08F  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1828  010372  C090  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1829  010376  C091  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1830  01037A  EC1B  F088         	call	__tdiv_to_l_	;wreg free
  1831  01037E  C001  F089         	movff	?__tdiv_to_l_,sprintf@val
  1832  010382  C002  F08A         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1833  010386  C003  F08B         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1834  01038A  C004  F08C         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1835                           
  1836                           ;doprnt.c: 1129: fval = 0.0;
  1837  01038E  0E00               	movlw	0
  1838  010390  0100               	movlb	0	; () banked
  1839  010392  6F95               	movwf	sprintf@fval& (0+255),b
  1840  010394  0E00               	movlw	0
  1841  010396  0100               	movlb	0	; () banked
  1842  010398  6F96               	movwf	(sprintf@fval+1)& (0+255),b
  1843  01039A  0E00               	movlw	0
  1844  01039C  0100               	movlb	0	; () banked
  1845  01039E  6F97               	movwf	(sprintf@fval+2)& (0+255),b
  1846                           
  1847                           ;doprnt.c: 1130: } else {
  1848  0103A0  D033               	goto	l3606
  1849  0103A2                     l3602:
  1850                           
  1851                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1852  0103A2  C095  F02B         	movff	sprintf@fval,___fttol@f1
  1853  0103A6  C096  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1854  0103AA  C097  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1855  0103AE  EC42  F08A         	call	___fttol	;wreg free
  1856  0103B2  C02B  F089         	movff	?___fttol,sprintf@val
  1857  0103B6  C02C  F08A         	movff	?___fttol+1,sprintf@val+1
  1858  0103BA  C02D  F08B         	movff	?___fttol+2,sprintf@val+2
  1859  0103BE  C02E  F08C         	movff	?___fttol+3,sprintf@val+3
  1860                           
  1861                           ;doprnt.c: 1132: fval -= (double)val;
  1862  0103C2  C095  F03A         	movff	sprintf@fval,___ftsub@f1
  1863  0103C6  C096  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1864  0103CA  C097  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1865  0103CE  C089  F009         	movff	sprintf@val,___lltoft@c
  1866  0103D2  C08A  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1867  0103D6  C08B  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1868  0103DA  C08C  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1869  0103DE  EC71  F08D         	call	___lltoft	;wreg free
  1870  0103E2  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1871  0103E6  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1872  0103EA  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1873  0103EE  EC31  F08E         	call	___ftsub	;wreg free
  1874  0103F2  C03A  F095         	movff	?___ftsub,sprintf@fval
  1875  0103F6  C03B  F096         	movff	?___ftsub+1,sprintf@fval+1
  1876  0103FA  C03C  F097         	movff	?___ftsub+2,sprintf@fval+2
  1877                           
  1878                           ;doprnt.c: 1133: exp = 0;
  1879  0103FE  0E00               	movlw	0
  1880  010400  0100               	movlb	0	; () banked
  1881  010402  6F8E               	movwf	(sprintf@exp+1)& (0+255),b
  1882  010404  0E00               	movlw	0
  1883  010406  6F8D               	movwf	sprintf@exp& (0+255),b
  1884  010408                     l3606:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;doprnt.c: 1134: }
  1888                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1889  010408  0E01               	movlw	1
  1890  01040A  0100               	movlb	0	; () banked
  1891  01040C  6F98               	movwf	sprintf@c& (0+255),b
  1892  01040E                     l3608:
  1893                           
  1894                           ; BSR set to: 0
  1895  01040E  0E0A               	movlw	10
  1896  010410  0100               	movlb	0	; () banked
  1897  010412  1998               	xorwf	sprintf@c& (0+255),w,b
  1898  010414  B4D8               	btfsc	status,2,c
  1899  010416  D021               	goto	l3620
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;doprnt.c: 1137: if(val < dpowers[c])
  1903                           
  1904                           ; BSR set to: 0
  1905                           
  1906                           ; BSR set to: 0
  1907  010418  0100               	movlb	0	; () banked
  1908  01041A  5198               	movf	sprintf@c& (0+255),w,b
  1909  01041C  0D04               	mullw	4
  1910  01041E  0E7F               	movlw	low _dpowers
  1911  010420  24F3               	addwf	prodl,w,c
  1912  010422  6EF6               	movwf	tblptrl,c
  1913  010424  0EFF               	movlw	high _dpowers
  1914  010426  20F4               	addwfc	prodh,w,c
  1915  010428  6EF7               	movwf	tblptrh,c
  1916  01042A                     	if	1	;There are 3 active tblptr bytes
  1917  01042A  6AF8               	clrf	tblptru,c
  1918  01042C  0E00               	movlw	low (__mediumconst shr (0+16))
  1919  01042E  22F8               	addwfc	tblptru,f,c
  1920  010430                     	endif
  1921  010430  0009               	tblrd		*+
  1922  010432  50F5               	movf	tablat,w,c
  1923  010434  0100               	movlb	0	; () banked
  1924  010436  5D89               	subwf	sprintf@val& (0+255),w,b
  1925  010438  0009               	tblrd		*+
  1926  01043A  50F5               	movf	tablat,w,c
  1927  01043C  0100               	movlb	0	; () banked
  1928  01043E  598A               	subwfb	(sprintf@val+1)& (0+255),w,b
  1929  010440  0009               	tblrd		*+
  1930  010442  50F5               	movf	tablat,w,c
  1931  010444  0100               	movlb	0	; () banked
  1932  010446  598B               	subwfb	(sprintf@val+2)& (0+255),w,b
  1933  010448  0009               	tblrd		*+
  1934  01044A  50F5               	movf	tablat,w,c
  1935  01044C  0100               	movlb	0	; () banked
  1936  01044E  598C               	subwfb	(sprintf@val+3)& (0+255),w,b
  1937  010450  A0D8               	btfss	status,0,c
  1938  010452  D003               	goto	l3620
  1939                           
  1940                           ; BSR set to: 0
  1941                           
  1942                           ; BSR set to: 0
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;doprnt.c: 1138: break;
  1946  010454  0100               	movlb	0	; () banked
  1947  010456  2B98               	incf	sprintf@c& (0+255),f,b
  1948  010458  D7DA               	goto	l3608
  1949  01045A                     l3620:
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;doprnt.c: 1175: {
  1953                           ;doprnt.c: 1188: if(flag & 0x03)
  1954  01045A  0E03               	movlw	3
  1955  01045C  0100               	movlb	0	; () banked
  1956  01045E  1587               	andwf	sprintf@flag& (0+255),w,b
  1957  010460  6E47               	movwf	??_sprintf& (0+255),c
  1958  010462  0E00               	movlw	0
  1959  010464  0100               	movlb	0	; () banked
  1960  010466  1588               	andwf	(sprintf@flag+1)& (0+255),w,b
  1961  010468  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1962  01046A  5047               	movf	??_sprintf,w,c
  1963  01046C  1048               	iorwf	??_sprintf+1,w,c
  1964  01046E  B4D8               	btfsc	status,2,c
  1965  010470  D056               	goto	l3634
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1969  010472  C040  FFD9         	movff	sprintf@sp,fsr2l
  1970  010476  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1971  01047A  0E2D               	movlw	45
  1972  01047C  D04E               	goto	L2
  1973  01047E                     l3624:
  1974                           
  1975                           ; BSR set to: 0
  1976  01047E  4A40               	infsnz	sprintf@sp,f,c
  1977  010480  2A41               	incf	sprintf@sp+1,f,c
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;doprnt.c: 1195: }
  1981                           ;doprnt.c: 1196: while(c--) {
  1982  010482  D04D               	goto	l3634
  1983  010484                     l3626:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;doprnt.c: 1200: {
  1987                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1988  010484  C089  F001         	movff	sprintf@val,___lldiv@dividend
  1989  010488  C08A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1990  01048C  C08B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1991  010490  C08C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1992  010494  0100               	movlb	0	; () banked
  1993  010496  5198               	movf	sprintf@c& (0+255),w,b
  1994  010498  0D04               	mullw	4
  1995  01049A  0E7F               	movlw	low _dpowers
  1996  01049C  24F3               	addwf	prodl,w,c
  1997  01049E  6EF6               	movwf	tblptrl,c
  1998  0104A0  0EFF               	movlw	high _dpowers
  1999  0104A2  20F4               	addwfc	prodh,w,c
  2000  0104A4  6EF7               	movwf	tblptrh,c
  2001  0104A6                     	if	1	;There are 3 active tblptr bytes
  2002  0104A6  6AF8               	clrf	tblptru,c
  2003  0104A8  0E00               	movlw	low (__mediumconst shr (0+16))
  2004  0104AA  22F8               	addwfc	tblptru,f,c
  2005  0104AC                     	endif
  2006  0104AC  0009               	tblrd		*+
  2007  0104AE  CFF5 F005          	movff	tablat,___lldiv@divisor
  2008  0104B2  0009               	tblrd		*+
  2009  0104B4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2010  0104B8  0009               	tblrd		*+
  2011  0104BA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2012  0104BE  000A               	tblrd		*-
  2013  0104C0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2014  0104C4  EC58  F08C         	call	___lldiv	;wreg free
  2015  0104C8  C001  F08F         	movff	?___lldiv,sprintf@tmpval
  2016  0104CC  C002  F090         	movff	?___lldiv+1,sprintf@tmpval+1
  2017  0104D0  C003  F091         	movff	?___lldiv+2,sprintf@tmpval+2
  2018  0104D4  C004  F092         	movff	?___lldiv+3,sprintf@tmpval+3
  2019                           
  2020                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2021  0104D8  C08F  F001         	movff	sprintf@tmpval,___llmod@dividend
  2022  0104DC  C090  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2023  0104E0  C091  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2024  0104E4  C092  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2025  0104E8  0E0A               	movlw	10
  2026  0104EA  6E05               	movwf	___llmod@divisor,c
  2027  0104EC  0E00               	movlw	0
  2028  0104EE  6E06               	movwf	___llmod@divisor+1,c
  2029  0104F0  0E00               	movlw	0
  2030  0104F2  6E07               	movwf	___llmod@divisor+2,c
  2031  0104F4  0E00               	movlw	0
  2032  0104F6  6E08               	movwf	___llmod@divisor+3,c
  2033  0104F8  EC0C  F08D         	call	___llmod	;wreg free
  2034  0104FC  C001  F08F         	movff	?___llmod,sprintf@tmpval
  2035  010500  C002  F090         	movff	?___llmod+1,sprintf@tmpval+1
  2036  010504  C003  F091         	movff	?___llmod+2,sprintf@tmpval+2
  2037  010508  C004  F092         	movff	?___llmod+3,sprintf@tmpval+3
  2038                           
  2039                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2040  01050C  0100               	movlb	0	; () banked
  2041  01050E  518F               	movf	sprintf@tmpval& (0+255),w,b
  2042  010510  0F30               	addlw	48
  2043  010512  C040  FFD9         	movff	sprintf@sp,fsr2l
  2044  010516  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2045  01051A                     L2:
  2046  01051A  6EDF               	movwf	indf2,c
  2047  01051C  D7B0               	goto	l3624
  2048  01051E                     l3634:
  2049                           
  2050                           ; BSR set to: 0
  2051  01051E  0100               	movlb	0	; () banked
  2052  010520  0798               	decf	sprintf@c& (0+255),f,b
  2053  010522  0100               	movlb	0	; () banked
  2054  010524  2998               	incf	sprintf@c& (0+255),w,b
  2055  010526  B4D8               	btfsc	status,2,c
  2056  010528  D00D               	goto	l3642
  2057  01052A  D7AC               	goto	l3626
  2058  01052C                     l3636:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2062  01052C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2063  010530  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2064  010534  0E30               	movlw	48
  2065  010536  6EDF               	movwf	indf2,c
  2066                           
  2067                           ; BSR set to: 0
  2068  010538  4A40               	infsnz	sprintf@sp,f,c
  2069  01053A  2A41               	incf	sprintf@sp+1,f,c
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;doprnt.c: 1209: exp--;
  2073  01053C  0100               	movlb	0	; () banked
  2074  01053E  078D               	decf	sprintf@exp& (0+255),f,b
  2075  010540  A0D8               	btfss	status,0,c
  2076  010542  078E               	decf	(sprintf@exp+1)& (0+255),f,b
  2077  010544                     l3642:
  2078                           
  2079                           ; BSR set to: 0
  2080  010544  0100               	movlb	0	; () banked
  2081  010546  BF8E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2082  010548  D007               	goto	l3644
  2083  01054A  0100               	movlb	0	; () banked
  2084  01054C  518E               	movf	(sprintf@exp+1)& (0+255),w,b
  2085  01054E  E1EE               	bnz	l3636
  2086  010550  0100               	movlb	0	; () banked
  2087  010552  058D               	decf	sprintf@exp& (0+255),w,b
  2088  010554  B0D8               	btfsc	status,0,c
  2089  010556  D7EA               	goto	l3636
  2090  010558                     l3644:
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;doprnt.c: 1210: }
  2094                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2095  010558  0100               	movlb	0	; () banked
  2096  01055A  BF94               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2097  01055C  D00C               	goto	l452
  2098  01055E  0100               	movlb	0	; () banked
  2099  010560  5194               	movf	(sprintf@prec+1)& (0+255),w,b
  2100  010562  E105               	bnz	u3650
  2101  010564  0E09               	movlw	9
  2102  010566  0100               	movlb	0	; () banked
  2103  010568  5D93               	subwf	sprintf@prec& (0+255),w,b
  2104  01056A  A0D8               	btfss	status,0,c
  2105  01056C  D004               	goto	l452
  2106  01056E                     u3650:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2110  01056E  0E08               	movlw	8
  2111  010570  0100               	movlb	0	; () banked
  2112  010572  6F98               	movwf	sprintf@c& (0+255),b
  2113  010574  D002               	goto	l3648
  2114  010576                     l452:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;doprnt.c: 1213: else
  2118                           ;doprnt.c: 1214: c = prec;
  2119  010576  C093  F098         	movff	sprintf@prec,sprintf@c
  2120  01057A                     l3648:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;doprnt.c: 1215: prec -= c;
  2124  01057A  0100               	movlb	0	; () banked
  2125  01057C  5198               	movf	sprintf@c& (0+255),w,b
  2126  01057E  0100               	movlb	0	; () banked
  2127  010580  5F93               	subwf	sprintf@prec& (0+255),f,b
  2128  010582  0E00               	movlw	0
  2129  010584  0100               	movlb	0	; () banked
  2130  010586  BF98               	btfsc	sprintf@c& (0+255),7,b
  2131  010588  0EFF               	movlw	255
  2132  01058A  0100               	movlb	0	; () banked
  2133  01058C  5B94               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;doprnt.c: 1219: if(c)
  2137  01058E  0100               	movlb	0	; () banked
  2138  010590  5198               	movf	sprintf@c& (0+255),w,b
  2139  010592  0100               	movlb	0	; () banked
  2140  010594  B4D8               	btfsc	status,2,c
  2141  010596  D008               	goto	l3656
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2145  010598  C040  FFD9         	movff	sprintf@sp,fsr2l
  2146  01059C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2147  0105A0  0E2E               	movlw	46
  2148  0105A2  6EDF               	movwf	indf2,c
  2149                           
  2150                           ; BSR set to: 0
  2151  0105A4  4A40               	infsnz	sprintf@sp,f,c
  2152  0105A6  2A41               	incf	sprintf@sp+1,f,c
  2153  0105A8                     l3656:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2157  0105A8  0100               	movlb	0	; () banked
  2158  0105AA  5198               	movf	sprintf@c& (0+255),w,b
  2159  0105AC  ECF4  F083         	call	_scale
  2160  0105B0  C024  F082         	movff	?_scale,_sprintf$1855
  2161  0105B4  C025  F083         	movff	?_scale+1,_sprintf$1855+1
  2162  0105B8  C026  F084         	movff	?_scale+2,_sprintf$1855+2
  2163                           
  2164                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2165  0105BC  C095  F018         	movff	sprintf@fval,___ftmul@f2
  2166  0105C0  C096  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2167  0105C4  C097  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2168  0105C8  C082  F015         	movff	_sprintf$1855,___ftmul@f1
  2169  0105CC  C083  F016         	movff	_sprintf$1855+1,___ftmul@f1+1
  2170  0105D0  C084  F017         	movff	_sprintf$1855+2,___ftmul@f1+2
  2171  0105D4  ECC8  F089         	call	___ftmul	;wreg free
  2172  0105D8  C015  F02B         	movff	?___ftmul,___fttol@f1
  2173  0105DC  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2174  0105E0  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2175  0105E4  EC42  F08A         	call	___fttol	;wreg free
  2176  0105E8  C02B  F089         	movff	?___fttol,sprintf@val
  2177  0105EC  C02C  F08A         	movff	?___fttol+1,sprintf@val+1
  2178  0105F0  C02D  F08B         	movff	?___fttol+2,sprintf@val+2
  2179  0105F4  C02E  F08C         	movff	?___fttol+3,sprintf@val+3
  2180                           
  2181                           ;doprnt.c: 1228: while(c--) {
  2182  0105F8  D078               	goto	l3670
  2183  0105FA                     l3660:
  2184                           
  2185                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2186  0105FA  C089  F001         	movff	sprintf@val,___lldiv@dividend
  2187  0105FE  C08A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2188  010602  C08B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2189  010606  C08C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2190  01060A  0100               	movlb	0	; () banked
  2191  01060C  5198               	movf	sprintf@c& (0+255),w,b
  2192  01060E  0D04               	mullw	4
  2193  010610  0E7F               	movlw	low _dpowers
  2194  010612  24F3               	addwf	prodl,w,c
  2195  010614  6EF6               	movwf	tblptrl,c
  2196  010616  0EFF               	movlw	high _dpowers
  2197  010618  20F4               	addwfc	prodh,w,c
  2198  01061A  6EF7               	movwf	tblptrh,c
  2199  01061C                     	if	1	;There are 3 active tblptr bytes
  2200  01061C  6AF8               	clrf	tblptru,c
  2201  01061E  0E00               	movlw	low (__mediumconst shr (0+16))
  2202  010620  22F8               	addwfc	tblptru,f,c
  2203  010622                     	endif
  2204  010622  0009               	tblrd		*+
  2205  010624  CFF5 F005          	movff	tablat,___lldiv@divisor
  2206  010628  0009               	tblrd		*+
  2207  01062A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2208  01062E  0009               	tblrd		*+
  2209  010630  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2210  010634  000A               	tblrd		*-
  2211  010636  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2212  01063A  EC58  F08C         	call	___lldiv	;wreg free
  2213  01063E  C001  F08F         	movff	?___lldiv,sprintf@tmpval
  2214  010642  C002  F090         	movff	?___lldiv+1,sprintf@tmpval+1
  2215  010646  C003  F091         	movff	?___lldiv+2,sprintf@tmpval+2
  2216  01064A  C004  F092         	movff	?___lldiv+3,sprintf@tmpval+3
  2217                           
  2218                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2219  01064E  C08F  F001         	movff	sprintf@tmpval,___llmod@dividend
  2220  010652  C090  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2221  010656  C091  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2222  01065A  C092  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2223  01065E  0E0A               	movlw	10
  2224  010660  6E05               	movwf	___llmod@divisor,c
  2225  010662  0E00               	movlw	0
  2226  010664  6E06               	movwf	___llmod@divisor+1,c
  2227  010666  0E00               	movlw	0
  2228  010668  6E07               	movwf	___llmod@divisor+2,c
  2229  01066A  0E00               	movlw	0
  2230  01066C  6E08               	movwf	___llmod@divisor+3,c
  2231  01066E  EC0C  F08D         	call	___llmod	;wreg free
  2232  010672  C001  F08F         	movff	?___llmod,sprintf@tmpval
  2233  010676  C002  F090         	movff	?___llmod+1,sprintf@tmpval+1
  2234  01067A  C003  F091         	movff	?___llmod+2,sprintf@tmpval+2
  2235  01067E  C004  F092         	movff	?___llmod+3,sprintf@tmpval+3
  2236                           
  2237                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2238  010682  0100               	movlb	0	; () banked
  2239  010684  518F               	movf	sprintf@tmpval& (0+255),w,b
  2240  010686  0F30               	addlw	48
  2241  010688  C040  FFD9         	movff	sprintf@sp,fsr2l
  2242  01068C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2243  010690  6EDF               	movwf	indf2,c
  2244                           
  2245                           ; BSR set to: 0
  2246  010692  4A40               	infsnz	sprintf@sp,f,c
  2247  010694  2A41               	incf	sprintf@sp+1,f,c
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 1232: val %= dpowers[c];
  2251  010696  C089  F001         	movff	sprintf@val,___llmod@dividend
  2252  01069A  C08A  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2253  01069E  C08B  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2254  0106A2  C08C  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2255  0106A6  0100               	movlb	0	; () banked
  2256  0106A8  5198               	movf	sprintf@c& (0+255),w,b
  2257  0106AA  0D04               	mullw	4
  2258  0106AC  0E7F               	movlw	low _dpowers
  2259  0106AE  24F3               	addwf	prodl,w,c
  2260  0106B0  6EF6               	movwf	tblptrl,c
  2261  0106B2  0EFF               	movlw	high _dpowers
  2262  0106B4  20F4               	addwfc	prodh,w,c
  2263  0106B6  6EF7               	movwf	tblptrh,c
  2264  0106B8                     	if	1	;There are 3 active tblptr bytes
  2265  0106B8  6AF8               	clrf	tblptru,c
  2266  0106BA  0E00               	movlw	low (__mediumconst shr (0+16))
  2267  0106BC  22F8               	addwfc	tblptru,f,c
  2268  0106BE                     	endif
  2269  0106BE  0009               	tblrd		*+
  2270  0106C0  CFF5 F005          	movff	tablat,___llmod@divisor
  2271  0106C4  0009               	tblrd		*+
  2272  0106C6  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2273  0106CA  0009               	tblrd		*+
  2274  0106CC  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2275  0106D0  000A               	tblrd		*-
  2276  0106D2  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2277  0106D6  EC0C  F08D         	call	___llmod	;wreg free
  2278  0106DA  C001  F089         	movff	?___llmod,sprintf@val
  2279  0106DE  C002  F08A         	movff	?___llmod+1,sprintf@val+1
  2280  0106E2  C003  F08B         	movff	?___llmod+2,sprintf@val+2
  2281  0106E6  C004  F08C         	movff	?___llmod+3,sprintf@val+3
  2282  0106EA                     l3670:
  2283  0106EA  0100               	movlb	0	; () banked
  2284  0106EC  0798               	decf	sprintf@c& (0+255),f,b
  2285  0106EE  0100               	movlb	0	; () banked
  2286  0106F0  2998               	incf	sprintf@c& (0+255),w,b
  2287  0106F2  B4D8               	btfsc	status,2,c
  2288  0106F4  D00D               	goto	l3678
  2289  0106F6  D781               	goto	l3660
  2290  0106F8                     l3672:
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2294  0106F8  C040  FFD9         	movff	sprintf@sp,fsr2l
  2295  0106FC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2296  010700  0E30               	movlw	48
  2297  010702  6EDF               	movwf	indf2,c
  2298                           
  2299                           ; BSR set to: 0
  2300  010704  4A40               	infsnz	sprintf@sp,f,c
  2301  010706  2A41               	incf	sprintf@sp+1,f,c
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;doprnt.c: 1237: prec--;
  2305  010708  0100               	movlb	0	; () banked
  2306  01070A  0793               	decf	sprintf@prec& (0+255),f,b
  2307  01070C  A0D8               	btfss	status,0,c
  2308  01070E  0794               	decf	(sprintf@prec+1)& (0+255),f,b
  2309  010710                     l3678:
  2310                           
  2311                           ; BSR set to: 0
  2312  010710  0100               	movlb	0	; () banked
  2313  010712  5193               	movf	sprintf@prec& (0+255),w,b
  2314  010714  0100               	movlb	0	; () banked
  2315  010716  1194               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2316  010718  B4D8               	btfsc	status,2,c
  2317  01071A  D050               	goto	l3700
  2318  01071C  D7ED               	goto	l3672
  2319  01071E                     l3680:
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;doprnt.c: 1246: }
  2323                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2324  01071E  0100               	movlb	0	; () banked
  2325  010720  5193               	movf	sprintf@prec& (0+255),w,b
  2326  010722  0100               	movlb	0	; () banked
  2327  010724  1194               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2328  010726  A4D8               	btfss	status,2,c
  2329  010728  D00D               	goto	l3686
  2330                           
  2331                           ; BSR set to: 0
  2332  01072A  0100               	movlb	0	; () banked
  2333  01072C  5189               	movf	sprintf@val& (0+255),w,b
  2334  01072E  0100               	movlb	0	; () banked
  2335  010730  118A               	iorwf	(sprintf@val+1)& (0+255),w,b
  2336  010732  0100               	movlb	0	; () banked
  2337  010734  118B               	iorwf	(sprintf@val+2)& (0+255),w,b
  2338  010736  0100               	movlb	0	; () banked
  2339  010738  118C               	iorwf	(sprintf@val+3)& (0+255),w,b
  2340  01073A  A4D8               	btfss	status,2,c
  2341  01073C  D003               	goto	l3686
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 1291: prec++;
  2345  01073E  0100               	movlb	0	; () banked
  2346  010740  4B93               	infsnz	sprintf@prec& (0+255),f,b
  2347  010742  2B94               	incf	(sprintf@prec+1)& (0+255),f,b
  2348  010744                     l3686:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 1339: if(c < prec)
  2352  010744  0E80               	movlw	128
  2353  010746  0100               	movlb	0	; () banked
  2354  010748  BF98               	btfsc	sprintf@c& (0+255),7,b
  2355  01074A  0E7F               	movlw	127
  2356  01074C  6E47               	movwf	??_sprintf& (0+255),c
  2357  01074E  0100               	movlb	0	; () banked
  2358  010750  5193               	movf	sprintf@prec& (0+255),w,b
  2359  010752  0100               	movlb	0	; () banked
  2360  010754  5D98               	subwf	sprintf@c& (0+255),w,b
  2361  010756  0100               	movlb	0	; () banked
  2362  010758  5194               	movf	(sprintf@prec+1)& (0+255),w,b
  2363  01075A  0A80               	xorlw	128
  2364  01075C  5847               	subwfb	??_sprintf& (0+255),w,c
  2365  01075E  B0D8               	btfsc	status,0,c
  2366  010760  D003               	goto	l3690
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 1340: c = prec;
  2370  010762  C093  F098         	movff	sprintf@prec,sprintf@c
  2371  010766  D016               	goto	l3694
  2372  010768                     l3690:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;doprnt.c: 1341: else if(prec < c)
  2376  010768  0100               	movlb	0	; () banked
  2377  01076A  5194               	movf	(sprintf@prec+1)& (0+255),w,b
  2378  01076C  0A80               	xorlw	128
  2379  01076E  6E47               	movwf	??_sprintf& (0+255),c
  2380  010770  0100               	movlb	0	; () banked
  2381  010772  5198               	movf	sprintf@c& (0+255),w,b
  2382  010774  0100               	movlb	0	; () banked
  2383  010776  5D93               	subwf	sprintf@prec& (0+255),w,b
  2384  010778  0E80               	movlw	128
  2385  01077A  0100               	movlb	0	; () banked
  2386  01077C  BF98               	btfsc	sprintf@c& (0+255),7,b
  2387  01077E  0E7F               	movlw	127
  2388  010780  5847               	subwfb	??_sprintf& (0+255),w,c
  2389  010782  B0D8               	btfsc	status,0,c
  2390  010784  D007               	goto	l3694
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;doprnt.c: 1342: prec = c;
  2394  010786  0100               	movlb	0	; () banked
  2395  010788  5198               	movf	sprintf@c& (0+255),w,b
  2396  01078A  0100               	movlb	0	; () banked
  2397  01078C  6F93               	movwf	sprintf@prec& (0+255),b
  2398  01078E  6B94               	clrf	(sprintf@prec+1)& (0+255),b
  2399  010790  BF93               	btfsc	sprintf@prec& (0+255),7,b
  2400  010792  0794               	decf	(sprintf@prec+1)& (0+255),f,b
  2401  010794                     l3694:
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;doprnt.c: 1422: {
  2405                           ;doprnt.c: 1438: if(flag & 0x03)
  2406  010794  0E03               	movlw	3
  2407  010796  0100               	movlb	0	; () banked
  2408  010798  1587               	andwf	sprintf@flag& (0+255),w,b
  2409  01079A  6E47               	movwf	??_sprintf& (0+255),c
  2410  01079C  0E00               	movlw	0
  2411  01079E  0100               	movlb	0	; () banked
  2412  0107A0  1588               	andwf	(sprintf@flag+1)& (0+255),w,b
  2413  0107A2  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2414  0107A4  5047               	movf	??_sprintf,w,c
  2415  0107A6  1048               	iorwf	??_sprintf+1,w,c
  2416  0107A8  B4D8               	btfsc	status,2,c
  2417  0107AA  D008               	goto	l3700
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2421  0107AC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2422  0107B0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2423  0107B4  0E2D               	movlw	45
  2424  0107B6  6EDF               	movwf	indf2,c
  2425  0107B8                     l3698:
  2426                           
  2427                           ; BSR set to: 0
  2428  0107B8  4A40               	infsnz	sprintf@sp,f,c
  2429  0107BA  2A41               	incf	sprintf@sp+1,f,c
  2430  0107BC                     l3700:
  2431                           
  2432                           ; BSR set to: 0
  2433  0107BC  C042  FFF6         	movff	sprintf@f,tblptrl
  2434  0107C0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2435  0107C4  4A42               	infsnz	sprintf@f,f,c
  2436  0107C6  2A43               	incf	sprintf@f+1,f,c
  2437  0107C8                     	if	0	;tblptru may be non-zero
  2438  0107C8                     	endif
  2439  0107C8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2440  0107C8  0E00               	movlw	low (__mediumconst shr (0+16))
  2441  0107CA  6EF8               	movwf	tblptru,c
  2442  0107CC                     	endif
  2443  0107CC  0008               	tblrd		*
  2444  0107CE  CFF5 F098          	movff	tablat,sprintf@c
  2445  0107D2  0100               	movlb	0	; () banked
  2446  0107D4  5198               	movf	sprintf@c& (0+255),w,b
  2447  0107D6  A4D8               	btfss	status,2,c
  2448  0107D8  D41A               	goto	l3502
  2449  0107DA                     l3702:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;doprnt.c: 1538: *sp = 0;
  2453  0107DA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2454  0107DE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2455  0107E2  0E00               	movlw	0
  2456  0107E4  6EDF               	movwf	indf2,c
  2457  0107E6  0012               	return	
  2458  0107E8                     __end_of_sprintf:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           postinc0	equ	0xFEE
  2467                           wreg	equ	0xFE8
  2468                           postdec1	equ	0xFE5
  2469                           fsr1l	equ	0xFE1
  2470                           indf2	equ	0xFDF
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _scale *****************
  2478 ;; Defined at:
  2479 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  scl             1    wreg     char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  scl             1   41[COMRAM] char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  3   35[COMRAM] char 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2493 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;Total ram usage:        7 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    2
  2500 ;; This function calls:
  2501 ;;		___awdiv
  2502 ;;		___awmod
  2503 ;;		___ftmul
  2504 ;;		___wmul
  2505 ;; This function is called by:
  2506 ;;		_sprintf
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text2
  2511  0107E8                     __ptext2:
  2512                           	opt stack 0
  2513  0107E8                     _scale:
  2514                           	opt stack 27
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;incstack = 0
  2518                           ;scale@scl stored from wreg
  2519  0107E8  6E2A               	movwf	scale@scl,c
  2520                           
  2521                           ;doprnt.c: 428: if(scl < 0) {
  2522  0107EA  AE2A               	btfss	scale@scl,7,c
  2523  0107EC  D10D               	goto	l3094
  2524                           
  2525                           ;doprnt.c: 429: scl = -scl;
  2526  0107EE  6C2A               	negf	scale@scl,c
  2527                           
  2528                           ;doprnt.c: 430: if(scl>=110)
  2529  0107F0  502A               	movf	scale@scl,w,c
  2530  0107F2  0A80               	xorlw	128
  2531  0107F4  0F12               	addlw	-238
  2532  0107F6  A0D8               	btfss	status,0,c
  2533  0107F8  D09A               	goto	l3084
  2534                           
  2535                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2536  0107FA  0E00               	movlw	0
  2537  0107FC  6E12               	movwf	___wmul@multiplicand+1,c
  2538  0107FE  0E03               	movlw	3
  2539  010800  6E11               	movwf	___wmul@multiplicand,c
  2540  010802  0E00               	movlw	0
  2541  010804  6E0A               	movwf	___awdiv@divisor+1,c
  2542  010806  0E0A               	movlw	10
  2543  010808  6E09               	movwf	___awdiv@divisor,c
  2544  01080A  0E00               	movlw	0
  2545  01080C  6E04               	movwf	___awmod@divisor+1,c
  2546  01080E  0E64               	movlw	100
  2547  010810  6E03               	movwf	___awmod@divisor,c
  2548  010812  502A               	movf	scale@scl,w,c
  2549  010814  6E01               	movwf	___awmod@dividend,c
  2550  010816  6A02               	clrf	___awmod@dividend+1,c
  2551  010818  BE01               	btfsc	___awmod@dividend,7,c
  2552  01081A  0602               	decf	___awmod@dividend+1,f,c
  2553  01081C  ECD4  F08C         	call	___awmod	;wreg free
  2554  010820  C001  F007         	movff	?___awmod,___awdiv@dividend
  2555  010824  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2556  010828  EC16  F08C         	call	___awdiv	;wreg free
  2557  01082C  0E09               	movlw	9
  2558  01082E  2407               	addwf	?___awdiv,w,c
  2559  010830  6E0F               	movwf	___wmul@multiplier,c
  2560  010832  0E00               	movlw	0
  2561  010834  2008               	addwfc	?___awdiv+1,w,c
  2562  010836  6E10               	movwf	___wmul@multiplier+1,c
  2563  010838  EC14  F08F         	call	___wmul	;wreg free
  2564  01083C  0EA7               	movlw	low __npowers_
  2565  01083E  240F               	addwf	?___wmul,w,c
  2566  010840  6EF6               	movwf	tblptrl,c
  2567  010842  0EFF               	movlw	high __npowers_
  2568  010844  2010               	addwfc	?___wmul+1,w,c
  2569  010846  6EF7               	movwf	tblptrh,c
  2570  010848                     	if	1	;There are 3 active tblptr bytes
  2571  010848  6AF8               	clrf	tblptru,c
  2572  01084A  0E00               	movlw	low (__mediumconst shr (0+16))
  2573  01084C  22F8               	addwfc	tblptru,f,c
  2574  01084E                     	endif
  2575  01084E  0009               	tblrd		*+
  2576  010850  CFF5 F018          	movff	tablat,___ftmul@f2
  2577  010854  0009               	tblrd		*+
  2578  010856  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2579  01085A  000A               	tblrd		*-
  2580  01085C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2581  010860  0E00               	movlw	0
  2582  010862  6E0A               	movwf	___awdiv@divisor+1,c
  2583  010864  0E64               	movlw	100
  2584  010866  6E09               	movwf	___awdiv@divisor,c
  2585  010868  502A               	movf	scale@scl,w,c
  2586  01086A  6E07               	movwf	___awdiv@dividend,c
  2587  01086C  6A08               	clrf	___awdiv@dividend+1,c
  2588  01086E  BE07               	btfsc	___awdiv@dividend,7,c
  2589  010870  0608               	decf	___awdiv@dividend+1,f,c
  2590  010872  EC16  F08C         	call	___awdiv	;wreg free
  2591  010876  0E12               	movlw	18
  2592  010878  2407               	addwf	?___awdiv,w,c
  2593  01087A  6E0F               	movwf	___wmul@multiplier,c
  2594  01087C  0E00               	movlw	0
  2595  01087E  2008               	addwfc	?___awdiv+1,w,c
  2596  010880  6E10               	movwf	___wmul@multiplier+1,c
  2597  010882  0E00               	movlw	0
  2598  010884  6E12               	movwf	___wmul@multiplicand+1,c
  2599  010886  0E03               	movlw	3
  2600  010888  6E11               	movwf	___wmul@multiplicand,c
  2601  01088A  EC14  F08F         	call	___wmul	;wreg free
  2602  01088E  0EA7               	movlw	low __npowers_
  2603  010890  240F               	addwf	?___wmul,w,c
  2604  010892  6EF6               	movwf	tblptrl,c
  2605  010894  0EFF               	movlw	high __npowers_
  2606  010896  2010               	addwfc	?___wmul+1,w,c
  2607  010898  6EF7               	movwf	tblptrh,c
  2608  01089A                     	if	1	;There are 3 active tblptr bytes
  2609  01089A  6AF8               	clrf	tblptru,c
  2610  01089C  0E00               	movlw	low (__mediumconst shr (0+16))
  2611  01089E  22F8               	addwfc	tblptru,f,c
  2612  0108A0                     	endif
  2613  0108A0  0009               	tblrd		*+
  2614  0108A2  CFF5 F015          	movff	tablat,___ftmul@f1
  2615  0108A6  0009               	tblrd		*+
  2616  0108A8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2617  0108AC  000A               	tblrd		*-
  2618  0108AE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2619  0108B2  ECC8  F089         	call	___ftmul	;wreg free
  2620  0108B6  C015  F027         	movff	?___ftmul,_scale$1854
  2621  0108BA  C016  F028         	movff	?___ftmul+1,_scale$1854+1
  2622  0108BE  C017  F029         	movff	?___ftmul+2,_scale$1854+2
  2623                           
  2624                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2625  0108C2  C027  F015         	movff	_scale$1854,___ftmul@f1
  2626  0108C6  C028  F016         	movff	_scale$1854+1,___ftmul@f1+1
  2627  0108CA  C029  F017         	movff	_scale$1854+2,___ftmul@f1+2
  2628  0108CE  0E00               	movlw	0
  2629  0108D0  6E12               	movwf	___wmul@multiplicand+1,c
  2630  0108D2  0E03               	movlw	3
  2631  0108D4  6E11               	movwf	___wmul@multiplicand,c
  2632  0108D6  0E00               	movlw	0
  2633  0108D8  6E04               	movwf	___awmod@divisor+1,c
  2634  0108DA  0E0A               	movlw	10
  2635  0108DC  6E03               	movwf	___awmod@divisor,c
  2636  0108DE  502A               	movf	scale@scl,w,c
  2637  0108E0  6E01               	movwf	___awmod@dividend,c
  2638  0108E2  6A02               	clrf	___awmod@dividend+1,c
  2639  0108E4  BE01               	btfsc	___awmod@dividend,7,c
  2640  0108E6  0602               	decf	___awmod@dividend+1,f,c
  2641  0108E8  ECD4  F08C         	call	___awmod	;wreg free
  2642  0108EC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2643  0108F0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2644  0108F4  EC14  F08F         	call	___wmul	;wreg free
  2645  0108F8  0EA7               	movlw	low __npowers_
  2646  0108FA  240F               	addwf	?___wmul,w,c
  2647  0108FC  6EF6               	movwf	tblptrl,c
  2648  0108FE  0EFF               	movlw	high __npowers_
  2649  010900  2010               	addwfc	?___wmul+1,w,c
  2650  010902  6EF7               	movwf	tblptrh,c
  2651  010904                     	if	1	;There are 3 active tblptr bytes
  2652  010904  6AF8               	clrf	tblptru,c
  2653  010906  0E00               	movlw	low (__mediumconst shr (0+16))
  2654  010908  22F8               	addwfc	tblptru,f,c
  2655  01090A                     	endif
  2656  01090A  0009               	tblrd		*+
  2657  01090C  CFF5 F018          	movff	tablat,___ftmul@f2
  2658  010910  0009               	tblrd		*+
  2659  010912  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2660  010916  000A               	tblrd		*-
  2661  010918  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2662  01091C  ECC8  F089         	call	___ftmul	;wreg free
  2663  010920  C015  F024         	movff	?___ftmul,?_scale
  2664  010924  C016  F025         	movff	?___ftmul+1,?_scale+1
  2665  010928  C017  F026         	movff	?___ftmul+2,?_scale+2
  2666  01092C  0012               	return	
  2667  01092E                     l3084:
  2668                           
  2669                           ;doprnt.c: 432: else if(scl > 10)
  2670  01092E  502A               	movf	scale@scl,w,c
  2671  010930  0A80               	xorlw	128
  2672  010932  0F75               	addlw	-139
  2673  010934  A0D8               	btfss	status,0,c
  2674  010936  D053               	goto	l3090
  2675                           
  2676                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2677  010938  0E00               	movlw	0
  2678  01093A  6E0A               	movwf	___awdiv@divisor+1,c
  2679  01093C  0E0A               	movlw	10
  2680  01093E  6E09               	movwf	___awdiv@divisor,c
  2681  010940  502A               	movf	scale@scl,w,c
  2682  010942  6E07               	movwf	___awdiv@dividend,c
  2683  010944  6A08               	clrf	___awdiv@dividend+1,c
  2684  010946  BE07               	btfsc	___awdiv@dividend,7,c
  2685  010948  0608               	decf	___awdiv@dividend+1,f,c
  2686  01094A  EC16  F08C         	call	___awdiv	;wreg free
  2687  01094E  0E09               	movlw	9
  2688  010950  2407               	addwf	?___awdiv,w,c
  2689  010952  6E0F               	movwf	___wmul@multiplier,c
  2690  010954  0E00               	movlw	0
  2691  010956  2008               	addwfc	?___awdiv+1,w,c
  2692  010958  6E10               	movwf	___wmul@multiplier+1,c
  2693  01095A  0E00               	movlw	0
  2694  01095C  6E12               	movwf	___wmul@multiplicand+1,c
  2695  01095E  0E03               	movlw	3
  2696  010960  6E11               	movwf	___wmul@multiplicand,c
  2697  010962  EC14  F08F         	call	___wmul	;wreg free
  2698  010966  0EA7               	movlw	low __npowers_
  2699  010968  240F               	addwf	?___wmul,w,c
  2700  01096A  6EF6               	movwf	tblptrl,c
  2701  01096C  0EFF               	movlw	high __npowers_
  2702  01096E  2010               	addwfc	?___wmul+1,w,c
  2703  010970  6EF7               	movwf	tblptrh,c
  2704  010972                     	if	1	;There are 3 active tblptr bytes
  2705  010972  6AF8               	clrf	tblptru,c
  2706  010974  0E00               	movlw	low (__mediumconst shr (0+16))
  2707  010976  22F8               	addwfc	tblptru,f,c
  2708  010978                     	endif
  2709  010978  0009               	tblrd		*+
  2710  01097A  CFF5 F015          	movff	tablat,___ftmul@f1
  2711  01097E  0009               	tblrd		*+
  2712  010980  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2713  010984  000A               	tblrd		*-
  2714  010986  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2715  01098A  0E00               	movlw	0
  2716  01098C  6E12               	movwf	___wmul@multiplicand+1,c
  2717  01098E  0E03               	movlw	3
  2718  010990  6E11               	movwf	___wmul@multiplicand,c
  2719  010992  0E00               	movlw	0
  2720  010994  6E04               	movwf	___awmod@divisor+1,c
  2721  010996  0E0A               	movlw	10
  2722  010998  6E03               	movwf	___awmod@divisor,c
  2723  01099A  502A               	movf	scale@scl,w,c
  2724  01099C  6E01               	movwf	___awmod@dividend,c
  2725  01099E  6A02               	clrf	___awmod@dividend+1,c
  2726  0109A0  BE01               	btfsc	___awmod@dividend,7,c
  2727  0109A2  0602               	decf	___awmod@dividend+1,f,c
  2728  0109A4  ECD4  F08C         	call	___awmod	;wreg free
  2729  0109A8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2730  0109AC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2731  0109B0  EC14  F08F         	call	___wmul	;wreg free
  2732  0109B4  0EA7               	movlw	low __npowers_
  2733  0109B6  240F               	addwf	?___wmul,w,c
  2734  0109B8  6EF6               	movwf	tblptrl,c
  2735  0109BA  0EFF               	movlw	high __npowers_
  2736  0109BC  2010               	addwfc	?___wmul+1,w,c
  2737  0109BE  6EF7               	movwf	tblptrh,c
  2738  0109C0                     	if	1	;There are 3 active tblptr bytes
  2739  0109C0  6AF8               	clrf	tblptru,c
  2740  0109C2  0E00               	movlw	low (__mediumconst shr (0+16))
  2741  0109C4  22F8               	addwfc	tblptru,f,c
  2742  0109C6                     	endif
  2743  0109C6  0009               	tblrd		*+
  2744  0109C8  CFF5 F018          	movff	tablat,___ftmul@f2
  2745  0109CC  0009               	tblrd		*+
  2746  0109CE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2747  0109D2  000A               	tblrd		*-
  2748  0109D4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2749  0109D8  ECC8  F089         	call	___ftmul	;wreg free
  2750  0109DC  D7A1               	goto	L3
  2751  0109DE                     l3090:
  2752                           
  2753                           ;doprnt.c: 434: return _npowers_[scl];
  2754  0109DE  502A               	movf	scale@scl,w,c
  2755  0109E0  0D03               	mullw	3
  2756  0109E2  0EA7               	movlw	low __npowers_
  2757  0109E4  24F3               	addwf	prodl,w,c
  2758  0109E6  6EF6               	movwf	tblptrl,c
  2759  0109E8  0EFF               	movlw	high __npowers_
  2760  0109EA  20F4               	addwfc	prodh,w,c
  2761  0109EC  6EF7               	movwf	tblptrh,c
  2762  0109EE                     	if	1	;There are 3 active tblptr bytes
  2763  0109EE  6AF8               	clrf	tblptru,c
  2764  0109F0  0E00               	movlw	low (__mediumconst shr (0+16))
  2765  0109F2  22F8               	addwfc	tblptru,f,c
  2766  0109F4                     	endif
  2767  0109F4  0009               	tblrd		*+
  2768  0109F6  CFF5 F024          	movff	tablat,?_scale
  2769  0109FA  0009               	tblrd		*+
  2770  0109FC  CFF5 F025          	movff	tablat,?_scale+1
  2771  010A00  000A               	tblrd		*-
  2772  010A02  CFF5 F026          	movff	tablat,?_scale+2
  2773  010A06  0012               	return	
  2774  010A08                     l3094:
  2775                           
  2776                           ;doprnt.c: 435: }
  2777                           ;doprnt.c: 436: if(scl>=110)
  2778  010A08  502A               	movf	scale@scl,w,c
  2779  010A0A  0A80               	xorlw	128
  2780  010A0C  0F12               	addlw	-238
  2781  010A0E  A0D8               	btfss	status,0,c
  2782  010A10  D09A               	goto	l3102
  2783                           
  2784                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2785  010A12  0E00               	movlw	0
  2786  010A14  6E12               	movwf	___wmul@multiplicand+1,c
  2787  010A16  0E03               	movlw	3
  2788  010A18  6E11               	movwf	___wmul@multiplicand,c
  2789  010A1A  0E00               	movlw	0
  2790  010A1C  6E0A               	movwf	___awdiv@divisor+1,c
  2791  010A1E  0E0A               	movlw	10
  2792  010A20  6E09               	movwf	___awdiv@divisor,c
  2793  010A22  0E00               	movlw	0
  2794  010A24  6E04               	movwf	___awmod@divisor+1,c
  2795  010A26  0E64               	movlw	100
  2796  010A28  6E03               	movwf	___awmod@divisor,c
  2797  010A2A  502A               	movf	scale@scl,w,c
  2798  010A2C  6E01               	movwf	___awmod@dividend,c
  2799  010A2E  6A02               	clrf	___awmod@dividend+1,c
  2800  010A30  BE01               	btfsc	___awmod@dividend,7,c
  2801  010A32  0602               	decf	___awmod@dividend+1,f,c
  2802  010A34  ECD4  F08C         	call	___awmod	;wreg free
  2803  010A38  C001  F007         	movff	?___awmod,___awdiv@dividend
  2804  010A3C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2805  010A40  EC16  F08C         	call	___awdiv	;wreg free
  2806  010A44  0E09               	movlw	9
  2807  010A46  2407               	addwf	?___awdiv,w,c
  2808  010A48  6E0F               	movwf	___wmul@multiplier,c
  2809  010A4A  0E00               	movlw	0
  2810  010A4C  2008               	addwfc	?___awdiv+1,w,c
  2811  010A4E  6E10               	movwf	___wmul@multiplier+1,c
  2812  010A50  EC14  F08F         	call	___wmul	;wreg free
  2813  010A54  0ECE               	movlw	low __powers_
  2814  010A56  240F               	addwf	?___wmul,w,c
  2815  010A58  6EF6               	movwf	tblptrl,c
  2816  010A5A  0EFF               	movlw	high __powers_
  2817  010A5C  2010               	addwfc	?___wmul+1,w,c
  2818  010A5E  6EF7               	movwf	tblptrh,c
  2819  010A60                     	if	1	;There are 3 active tblptr bytes
  2820  010A60  6AF8               	clrf	tblptru,c
  2821  010A62  0E00               	movlw	low (__mediumconst shr (0+16))
  2822  010A64  22F8               	addwfc	tblptru,f,c
  2823  010A66                     	endif
  2824  010A66  0009               	tblrd		*+
  2825  010A68  CFF5 F018          	movff	tablat,___ftmul@f2
  2826  010A6C  0009               	tblrd		*+
  2827  010A6E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2828  010A72  000A               	tblrd		*-
  2829  010A74  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2830  010A78  0E00               	movlw	0
  2831  010A7A  6E0A               	movwf	___awdiv@divisor+1,c
  2832  010A7C  0E64               	movlw	100
  2833  010A7E  6E09               	movwf	___awdiv@divisor,c
  2834  010A80  502A               	movf	scale@scl,w,c
  2835  010A82  6E07               	movwf	___awdiv@dividend,c
  2836  010A84  6A08               	clrf	___awdiv@dividend+1,c
  2837  010A86  BE07               	btfsc	___awdiv@dividend,7,c
  2838  010A88  0608               	decf	___awdiv@dividend+1,f,c
  2839  010A8A  EC16  F08C         	call	___awdiv	;wreg free
  2840  010A8E  0E12               	movlw	18
  2841  010A90  2407               	addwf	?___awdiv,w,c
  2842  010A92  6E0F               	movwf	___wmul@multiplier,c
  2843  010A94  0E00               	movlw	0
  2844  010A96  2008               	addwfc	?___awdiv+1,w,c
  2845  010A98  6E10               	movwf	___wmul@multiplier+1,c
  2846  010A9A  0E00               	movlw	0
  2847  010A9C  6E12               	movwf	___wmul@multiplicand+1,c
  2848  010A9E  0E03               	movlw	3
  2849  010AA0  6E11               	movwf	___wmul@multiplicand,c
  2850  010AA2  EC14  F08F         	call	___wmul	;wreg free
  2851  010AA6  0ECE               	movlw	low __powers_
  2852  010AA8  240F               	addwf	?___wmul,w,c
  2853  010AAA  6EF6               	movwf	tblptrl,c
  2854  010AAC  0EFF               	movlw	high __powers_
  2855  010AAE  2010               	addwfc	?___wmul+1,w,c
  2856  010AB0  6EF7               	movwf	tblptrh,c
  2857  010AB2                     	if	1	;There are 3 active tblptr bytes
  2858  010AB2  6AF8               	clrf	tblptru,c
  2859  010AB4  0E00               	movlw	low (__mediumconst shr (0+16))
  2860  010AB6  22F8               	addwfc	tblptru,f,c
  2861  010AB8                     	endif
  2862  010AB8  0009               	tblrd		*+
  2863  010ABA  CFF5 F015          	movff	tablat,___ftmul@f1
  2864  010ABE  0009               	tblrd		*+
  2865  010AC0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2866  010AC4  000A               	tblrd		*-
  2867  010AC6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2868  010ACA  ECC8  F089         	call	___ftmul	;wreg free
  2869  010ACE  C015  F027         	movff	?___ftmul,_scale$1854
  2870  010AD2  C016  F028         	movff	?___ftmul+1,_scale$1854+1
  2871  010AD6  C017  F029         	movff	?___ftmul+2,_scale$1854+2
  2872                           
  2873                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2874  010ADA  C027  F015         	movff	_scale$1854,___ftmul@f1
  2875  010ADE  C028  F016         	movff	_scale$1854+1,___ftmul@f1+1
  2876  010AE2  C029  F017         	movff	_scale$1854+2,___ftmul@f1+2
  2877  010AE6  0E00               	movlw	0
  2878  010AE8  6E12               	movwf	___wmul@multiplicand+1,c
  2879  010AEA  0E03               	movlw	3
  2880  010AEC  6E11               	movwf	___wmul@multiplicand,c
  2881  010AEE  0E00               	movlw	0
  2882  010AF0  6E04               	movwf	___awmod@divisor+1,c
  2883  010AF2  0E0A               	movlw	10
  2884  010AF4  6E03               	movwf	___awmod@divisor,c
  2885  010AF6  502A               	movf	scale@scl,w,c
  2886  010AF8  6E01               	movwf	___awmod@dividend,c
  2887  010AFA  6A02               	clrf	___awmod@dividend+1,c
  2888  010AFC  BE01               	btfsc	___awmod@dividend,7,c
  2889  010AFE  0602               	decf	___awmod@dividend+1,f,c
  2890  010B00  ECD4  F08C         	call	___awmod	;wreg free
  2891  010B04  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2892  010B08  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2893  010B0C  EC14  F08F         	call	___wmul	;wreg free
  2894  010B10  0ECE               	movlw	low __powers_
  2895  010B12  240F               	addwf	?___wmul,w,c
  2896  010B14  6EF6               	movwf	tblptrl,c
  2897  010B16  0EFF               	movlw	high __powers_
  2898  010B18  2010               	addwfc	?___wmul+1,w,c
  2899  010B1A  6EF7               	movwf	tblptrh,c
  2900  010B1C                     	if	1	;There are 3 active tblptr bytes
  2901  010B1C  6AF8               	clrf	tblptru,c
  2902  010B1E  0E00               	movlw	low (__mediumconst shr (0+16))
  2903  010B20  22F8               	addwfc	tblptru,f,c
  2904  010B22                     	endif
  2905  010B22  0009               	tblrd		*+
  2906  010B24  CFF5 F018          	movff	tablat,___ftmul@f2
  2907  010B28  0009               	tblrd		*+
  2908  010B2A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2909  010B2E  000A               	tblrd		*-
  2910  010B30  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2911  010B34  ECC8  F089         	call	___ftmul	;wreg free
  2912  010B38  C015  F024         	movff	?___ftmul,?_scale
  2913  010B3C  C016  F025         	movff	?___ftmul+1,?_scale+1
  2914  010B40  C017  F026         	movff	?___ftmul+2,?_scale+2
  2915  010B44  0012               	return	
  2916  010B46                     l3102:
  2917                           
  2918                           ;doprnt.c: 438: else if(scl > 10)
  2919  010B46  502A               	movf	scale@scl,w,c
  2920  010B48  0A80               	xorlw	128
  2921  010B4A  0F75               	addlw	-139
  2922  010B4C  A0D8               	btfss	status,0,c
  2923  010B4E  D053               	goto	l3108
  2924                           
  2925                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2926  010B50  0E00               	movlw	0
  2927  010B52  6E0A               	movwf	___awdiv@divisor+1,c
  2928  010B54  0E0A               	movlw	10
  2929  010B56  6E09               	movwf	___awdiv@divisor,c
  2930  010B58  502A               	movf	scale@scl,w,c
  2931  010B5A  6E07               	movwf	___awdiv@dividend,c
  2932  010B5C  6A08               	clrf	___awdiv@dividend+1,c
  2933  010B5E  BE07               	btfsc	___awdiv@dividend,7,c
  2934  010B60  0608               	decf	___awdiv@dividend+1,f,c
  2935  010B62  EC16  F08C         	call	___awdiv	;wreg free
  2936  010B66  0E09               	movlw	9
  2937  010B68  2407               	addwf	?___awdiv,w,c
  2938  010B6A  6E0F               	movwf	___wmul@multiplier,c
  2939  010B6C  0E00               	movlw	0
  2940  010B6E  2008               	addwfc	?___awdiv+1,w,c
  2941  010B70  6E10               	movwf	___wmul@multiplier+1,c
  2942  010B72  0E00               	movlw	0
  2943  010B74  6E12               	movwf	___wmul@multiplicand+1,c
  2944  010B76  0E03               	movlw	3
  2945  010B78  6E11               	movwf	___wmul@multiplicand,c
  2946  010B7A  EC14  F08F         	call	___wmul	;wreg free
  2947  010B7E  0ECE               	movlw	low __powers_
  2948  010B80  240F               	addwf	?___wmul,w,c
  2949  010B82  6EF6               	movwf	tblptrl,c
  2950  010B84  0EFF               	movlw	high __powers_
  2951  010B86  2010               	addwfc	?___wmul+1,w,c
  2952  010B88  6EF7               	movwf	tblptrh,c
  2953  010B8A                     	if	1	;There are 3 active tblptr bytes
  2954  010B8A  6AF8               	clrf	tblptru,c
  2955  010B8C  0E00               	movlw	low (__mediumconst shr (0+16))
  2956  010B8E  22F8               	addwfc	tblptru,f,c
  2957  010B90                     	endif
  2958  010B90  0009               	tblrd		*+
  2959  010B92  CFF5 F015          	movff	tablat,___ftmul@f1
  2960  010B96  0009               	tblrd		*+
  2961  010B98  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2962  010B9C  000A               	tblrd		*-
  2963  010B9E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2964  010BA2  0E00               	movlw	0
  2965  010BA4  6E12               	movwf	___wmul@multiplicand+1,c
  2966  010BA6  0E03               	movlw	3
  2967  010BA8  6E11               	movwf	___wmul@multiplicand,c
  2968  010BAA  0E00               	movlw	0
  2969  010BAC  6E04               	movwf	___awmod@divisor+1,c
  2970  010BAE  0E0A               	movlw	10
  2971  010BB0  6E03               	movwf	___awmod@divisor,c
  2972  010BB2  502A               	movf	scale@scl,w,c
  2973  010BB4  6E01               	movwf	___awmod@dividend,c
  2974  010BB6  6A02               	clrf	___awmod@dividend+1,c
  2975  010BB8  BE01               	btfsc	___awmod@dividend,7,c
  2976  010BBA  0602               	decf	___awmod@dividend+1,f,c
  2977  010BBC  ECD4  F08C         	call	___awmod	;wreg free
  2978  010BC0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2979  010BC4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2980  010BC8  EC14  F08F         	call	___wmul	;wreg free
  2981  010BCC  0ECE               	movlw	low __powers_
  2982  010BCE  240F               	addwf	?___wmul,w,c
  2983  010BD0  6EF6               	movwf	tblptrl,c
  2984  010BD2  0EFF               	movlw	high __powers_
  2985  010BD4  2010               	addwfc	?___wmul+1,w,c
  2986  010BD6  6EF7               	movwf	tblptrh,c
  2987  010BD8                     	if	1	;There are 3 active tblptr bytes
  2988  010BD8  6AF8               	clrf	tblptru,c
  2989  010BDA  0E00               	movlw	low (__mediumconst shr (0+16))
  2990  010BDC  22F8               	addwfc	tblptru,f,c
  2991  010BDE                     	endif
  2992  010BDE  0009               	tblrd		*+
  2993  010BE0  CFF5 F018          	movff	tablat,___ftmul@f2
  2994  010BE4  0009               	tblrd		*+
  2995  010BE6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2996  010BEA  000A               	tblrd		*-
  2997  010BEC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2998  010BF0  ECC8  F089         	call	___ftmul	;wreg free
  2999  010BF4  D7A1               	goto	L4
  3000  010BF6                     l3108:
  3001                           
  3002                           ;doprnt.c: 440: return _powers_[scl];
  3003  010BF6  502A               	movf	scale@scl,w,c
  3004  010BF8  0D03               	mullw	3
  3005  010BFA  0ECE               	movlw	low __powers_
  3006  010BFC  24F3               	addwf	prodl,w,c
  3007  010BFE  6EF6               	movwf	tblptrl,c
  3008  010C00  0EFF               	movlw	high __powers_
  3009  010C02  20F4               	addwfc	prodh,w,c
  3010  010C04  6EF7               	movwf	tblptrh,c
  3011  010C06                     	if	1	;There are 3 active tblptr bytes
  3012  010C06  6AF8               	clrf	tblptru,c
  3013  010C08  0E00               	movlw	low (__mediumconst shr (0+16))
  3014  010C0A  22F8               	addwfc	tblptru,f,c
  3015  010C0C                     	endif
  3016  010C0C  0009               	tblrd		*+
  3017  010C0E  CFF5 F024          	movff	tablat,?_scale
  3018  010C12  0009               	tblrd		*+
  3019  010C14  CFF5 F025          	movff	tablat,?_scale+1
  3020  010C18  000A               	tblrd		*-
  3021  010C1A  CFF5 F026          	movff	tablat,?_scale+2
  3022  010C1E  0012               	return	
  3023  010C20                     __end_of_scale:
  3024                           	opt stack 0
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           postdec1	equ	0xFE5
  3034                           fsr1l	equ	0xFE1
  3035                           indf2	equ	0xFDF
  3036                           postinc2	equ	0xFDE
  3037                           postdec2	equ	0xFDD
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _isdigit *****************
  3043 ;; Defined at:
  3044 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  c               1    wreg     unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  c               1    2[COMRAM] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, status,0
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;Total ram usage:        3 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_sprintf
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text3
  3072  011E98                     __ptext3:
  3073                           	opt stack 0
  3074  011E98                     _isdigit:
  3075                           	opt stack 29
  3076                           
  3077                           ;incstack = 0
  3078                           ;isdigit@c stored from wreg
  3079  011E98  6E03               	movwf	isdigit@c,c
  3080  011E9A  0E00               	movlw	0
  3081  011E9C  6E02               	movwf	_isdigit$1472,c
  3082  011E9E  0E3A               	movlw	58
  3083  011EA0  6003               	cpfslt	isdigit@c,c
  3084  011EA2  D005               	goto	l3120
  3085  011EA4  0E2F               	movlw	47
  3086  011EA6  6403               	cpfsgt	isdigit@c,c
  3087  011EA8  D002               	goto	l3120
  3088  011EAA  0E01               	movlw	1
  3089  011EAC  6E02               	movwf	_isdigit$1472,c
  3090  011EAE                     l3120:
  3091  011EAE  C002  F001         	movff	_isdigit$1472,??_isdigit
  3092  011EB2  3001               	rrcf	??_isdigit,w,c
  3093  011EB4  0012               	return	
  3094  011EB6                     __end_of_isdigit:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           prodh	equ	0xFF4
  3101                           prodl	equ	0xFF3
  3102                           postinc0	equ	0xFEE
  3103                           wreg	equ	0xFE8
  3104                           postdec1	equ	0xFE5
  3105                           fsr1l	equ	0xFE1
  3106                           indf2	equ	0xFDF
  3107                           postinc2	equ	0xFDE
  3108                           postdec2	equ	0xFDD
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _fround *****************
  3114 ;; Defined at:
  3115 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  prec            1    wreg     unsigned char 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  prec            1   44[COMRAM] unsigned char 
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  3   35[COMRAM] unsigned char 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3129 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;Total ram usage:       10 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    2
  3136 ;; This function calls:
  3137 ;;		___awdiv
  3138 ;;		___awmod
  3139 ;;		___ftmul
  3140 ;;		___wmul
  3141 ;; This function is called by:
  3142 ;;		_sprintf
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text4
  3147  010C20                     __ptext4:
  3148                           	opt stack 0
  3149  010C20                     _fround:
  3150                           	opt stack 27
  3151                           
  3152                           ;incstack = 0
  3153                           ;fround@prec stored from wreg
  3154  010C20  6E2D               	movwf	fround@prec,c
  3155                           
  3156                           ;doprnt.c: 413: if(prec>=110)
  3157  010C22  0E6D               	movlw	109
  3158  010C24  642D               	cpfsgt	fround@prec,c
  3159  010C26  D0A8               	goto	l3062
  3160                           
  3161                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3162  010C28  0E00               	movlw	0
  3163  010C2A  6E12               	movwf	___wmul@multiplicand+1,c
  3164  010C2C  0E03               	movlw	3
  3165  010C2E  6E11               	movwf	___wmul@multiplicand,c
  3166  010C30  0E00               	movlw	0
  3167  010C32  6E0A               	movwf	___awdiv@divisor+1,c
  3168  010C34  0E0A               	movlw	10
  3169  010C36  6E09               	movwf	___awdiv@divisor,c
  3170  010C38  0E00               	movlw	0
  3171  010C3A  6E04               	movwf	___awmod@divisor+1,c
  3172  010C3C  0E64               	movlw	100
  3173  010C3E  6E03               	movwf	___awmod@divisor,c
  3174  010C40  C02D  F001         	movff	fround@prec,___awmod@dividend
  3175  010C44  6A02               	clrf	___awmod@dividend+1,c
  3176  010C46  ECD4  F08C         	call	___awmod	;wreg free
  3177  010C4A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3178  010C4E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3179  010C52  EC16  F08C         	call	___awdiv	;wreg free
  3180  010C56  0E09               	movlw	9
  3181  010C58  2407               	addwf	?___awdiv,w,c
  3182  010C5A  6E0F               	movwf	___wmul@multiplier,c
  3183  010C5C  0E00               	movlw	0
  3184  010C5E  2008               	addwfc	?___awdiv+1,w,c
  3185  010C60  6E10               	movwf	___wmul@multiplier+1,c
  3186  010C62  EC14  F08F         	call	___wmul	;wreg free
  3187  010C66  0EA7               	movlw	low __npowers_
  3188  010C68  240F               	addwf	?___wmul,w,c
  3189  010C6A  6EF6               	movwf	tblptrl,c
  3190  010C6C  0EFF               	movlw	high __npowers_
  3191  010C6E  2010               	addwfc	?___wmul+1,w,c
  3192  010C70  6EF7               	movwf	tblptrh,c
  3193  010C72                     	if	1	;There are 3 active tblptr bytes
  3194  010C72  6AF8               	clrf	tblptru,c
  3195  010C74  0E00               	movlw	low (__mediumconst shr (0+16))
  3196  010C76  22F8               	addwfc	tblptru,f,c
  3197  010C78                     	endif
  3198  010C78  0009               	tblrd		*+
  3199  010C7A  CFF5 F018          	movff	tablat,___ftmul@f2
  3200  010C7E  0009               	tblrd		*+
  3201  010C80  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3202  010C84  000A               	tblrd		*-
  3203  010C86  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3204  010C8A  0E00               	movlw	0
  3205  010C8C  6E0A               	movwf	___awdiv@divisor+1,c
  3206  010C8E  0E64               	movlw	100
  3207  010C90  6E09               	movwf	___awdiv@divisor,c
  3208  010C92  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3209  010C96  6A08               	clrf	___awdiv@dividend+1,c
  3210  010C98  EC16  F08C         	call	___awdiv	;wreg free
  3211  010C9C  0E12               	movlw	18
  3212  010C9E  2407               	addwf	?___awdiv,w,c
  3213  010CA0  6E0F               	movwf	___wmul@multiplier,c
  3214  010CA2  0E00               	movlw	0
  3215  010CA4  2008               	addwfc	?___awdiv+1,w,c
  3216  010CA6  6E10               	movwf	___wmul@multiplier+1,c
  3217  010CA8  0E00               	movlw	0
  3218  010CAA  6E12               	movwf	___wmul@multiplicand+1,c
  3219  010CAC  0E03               	movlw	3
  3220  010CAE  6E11               	movwf	___wmul@multiplicand,c
  3221  010CB0  EC14  F08F         	call	___wmul	;wreg free
  3222  010CB4  0EA7               	movlw	low __npowers_
  3223  010CB6  240F               	addwf	?___wmul,w,c
  3224  010CB8  6EF6               	movwf	tblptrl,c
  3225  010CBA  0EFF               	movlw	high __npowers_
  3226  010CBC  2010               	addwfc	?___wmul+1,w,c
  3227  010CBE  6EF7               	movwf	tblptrh,c
  3228  010CC0                     	if	1	;There are 3 active tblptr bytes
  3229  010CC0  6AF8               	clrf	tblptru,c
  3230  010CC2  0E00               	movlw	low (__mediumconst shr (0+16))
  3231  010CC4  22F8               	addwfc	tblptru,f,c
  3232  010CC6                     	endif
  3233  010CC6  0009               	tblrd		*+
  3234  010CC8  CFF5 F015          	movff	tablat,___ftmul@f1
  3235  010CCC  0009               	tblrd		*+
  3236  010CCE  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3237  010CD2  000A               	tblrd		*-
  3238  010CD4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3239  010CD8  ECC8  F089         	call	___ftmul	;wreg free
  3240  010CDC  C015  F02A         	movff	?___ftmul,_fround$1852
  3241  010CE0  C016  F02B         	movff	?___ftmul+1,_fround$1852+1
  3242  010CE4  C017  F02C         	movff	?___ftmul+2,_fround$1852+2
  3243                           
  3244                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3245  010CE8  0E00               	movlw	0
  3246  010CEA  6E12               	movwf	___wmul@multiplicand+1,c
  3247  010CEC  0E03               	movlw	3
  3248  010CEE  6E11               	movwf	___wmul@multiplicand,c
  3249  010CF0  0E00               	movlw	0
  3250  010CF2  6E04               	movwf	___awmod@divisor+1,c
  3251  010CF4  0E0A               	movlw	10
  3252  010CF6  6E03               	movwf	___awmod@divisor,c
  3253  010CF8  C02D  F001         	movff	fround@prec,___awmod@dividend
  3254  010CFC  6A02               	clrf	___awmod@dividend+1,c
  3255  010CFE  ECD4  F08C         	call	___awmod	;wreg free
  3256  010D02  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3257  010D06  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3258  010D0A  EC14  F08F         	call	___wmul	;wreg free
  3259  010D0E  0EA7               	movlw	low __npowers_
  3260  010D10  240F               	addwf	?___wmul,w,c
  3261  010D12  6EF6               	movwf	tblptrl,c
  3262  010D14  0EFF               	movlw	high __npowers_
  3263  010D16  2010               	addwfc	?___wmul+1,w,c
  3264  010D18  6EF7               	movwf	tblptrh,c
  3265  010D1A                     	if	1	;There are 3 active tblptr bytes
  3266  010D1A  6AF8               	clrf	tblptru,c
  3267  010D1C  0E00               	movlw	low (__mediumconst shr (0+16))
  3268  010D1E  22F8               	addwfc	tblptru,f,c
  3269  010D20                     	endif
  3270  010D20  0009               	tblrd		*+
  3271  010D22  CFF5 F018          	movff	tablat,___ftmul@f2
  3272  010D26  0009               	tblrd		*+
  3273  010D28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3274  010D2C  000A               	tblrd		*-
  3275  010D2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3276  010D32  C02A  F015         	movff	_fround$1852,___ftmul@f1
  3277  010D36  C02B  F016         	movff	_fround$1852+1,___ftmul@f1+1
  3278  010D3A  C02C  F017         	movff	_fround$1852+2,___ftmul@f1+2
  3279  010D3E  ECC8  F089         	call	___ftmul	;wreg free
  3280  010D42  C015  F027         	movff	?___ftmul,_fround$1853
  3281  010D46  C016  F028         	movff	?___ftmul+1,_fround$1853+1
  3282  010D4A  C017  F029         	movff	?___ftmul+2,_fround$1853+2
  3283                           
  3284                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3285  010D4E  C027  F015         	movff	_fround$1853,___ftmul@f1
  3286  010D52  C028  F016         	movff	_fround$1853+1,___ftmul@f1+1
  3287  010D56  C029  F017         	movff	_fround$1853+2,___ftmul@f1+2
  3288  010D5A  0E00               	movlw	0
  3289  010D5C  6E18               	movwf	___ftmul@f2,c
  3290  010D5E  0E00               	movlw	0
  3291  010D60  6E19               	movwf	___ftmul@f2+1,c
  3292  010D62  0E3F               	movlw	63
  3293  010D64  6E1A               	movwf	___ftmul@f2+2,c
  3294  010D66  ECC8  F089         	call	___ftmul	;wreg free
  3295  010D6A  C015  F024         	movff	?___ftmul,?_fround
  3296  010D6E  C016  F025         	movff	?___ftmul+1,?_fround+1
  3297  010D72  C017  F026         	movff	?___ftmul+2,?_fround+2
  3298  010D76  0012               	return	
  3299  010D78                     l3062:
  3300                           
  3301                           ;doprnt.c: 415: else if(prec > 10)
  3302  010D78  0E0A               	movlw	10
  3303  010D7A  642D               	cpfsgt	fround@prec,c
  3304  010D7C  D063               	goto	l3070
  3305                           
  3306                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3307  010D7E  0E00               	movlw	0
  3308  010D80  6E12               	movwf	___wmul@multiplicand+1,c
  3309  010D82  0E03               	movlw	3
  3310  010D84  6E11               	movwf	___wmul@multiplicand,c
  3311  010D86  0E00               	movlw	0
  3312  010D88  6E04               	movwf	___awmod@divisor+1,c
  3313  010D8A  0E0A               	movlw	10
  3314  010D8C  6E03               	movwf	___awmod@divisor,c
  3315  010D8E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3316  010D92  6A02               	clrf	___awmod@dividend+1,c
  3317  010D94  ECD4  F08C         	call	___awmod	;wreg free
  3318  010D98  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3319  010D9C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3320  010DA0  EC14  F08F         	call	___wmul	;wreg free
  3321  010DA4  0EA7               	movlw	low __npowers_
  3322  010DA6  240F               	addwf	?___wmul,w,c
  3323  010DA8  6EF6               	movwf	tblptrl,c
  3324  010DAA  0EFF               	movlw	high __npowers_
  3325  010DAC  2010               	addwfc	?___wmul+1,w,c
  3326  010DAE  6EF7               	movwf	tblptrh,c
  3327  010DB0                     	if	1	;There are 3 active tblptr bytes
  3328  010DB0  6AF8               	clrf	tblptru,c
  3329  010DB2  0E00               	movlw	low (__mediumconst shr (0+16))
  3330  010DB4  22F8               	addwfc	tblptru,f,c
  3331  010DB6                     	endif
  3332  010DB6  0009               	tblrd		*+
  3333  010DB8  CFF5 F018          	movff	tablat,___ftmul@f2
  3334  010DBC  0009               	tblrd		*+
  3335  010DBE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3336  010DC2  000A               	tblrd		*-
  3337  010DC4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3338  010DC8  0E00               	movlw	0
  3339  010DCA  6E0A               	movwf	___awdiv@divisor+1,c
  3340  010DCC  0E0A               	movlw	10
  3341  010DCE  6E09               	movwf	___awdiv@divisor,c
  3342  010DD0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3343  010DD4  6A08               	clrf	___awdiv@dividend+1,c
  3344  010DD6  EC16  F08C         	call	___awdiv	;wreg free
  3345  010DDA  0E09               	movlw	9
  3346  010DDC  2407               	addwf	?___awdiv,w,c
  3347  010DDE  6E0F               	movwf	___wmul@multiplier,c
  3348  010DE0  0E00               	movlw	0
  3349  010DE2  2008               	addwfc	?___awdiv+1,w,c
  3350  010DE4  6E10               	movwf	___wmul@multiplier+1,c
  3351  010DE6  0E00               	movlw	0
  3352  010DE8  6E12               	movwf	___wmul@multiplicand+1,c
  3353  010DEA  0E03               	movlw	3
  3354  010DEC  6E11               	movwf	___wmul@multiplicand,c
  3355  010DEE  EC14  F08F         	call	___wmul	;wreg free
  3356  010DF2  0EA7               	movlw	low __npowers_
  3357  010DF4  240F               	addwf	?___wmul,w,c
  3358  010DF6  6EF6               	movwf	tblptrl,c
  3359  010DF8  0EFF               	movlw	high __npowers_
  3360  010DFA  2010               	addwfc	?___wmul+1,w,c
  3361  010DFC  6EF7               	movwf	tblptrh,c
  3362  010DFE                     	if	1	;There are 3 active tblptr bytes
  3363  010DFE  6AF8               	clrf	tblptru,c
  3364  010E00  0E00               	movlw	low (__mediumconst shr (0+16))
  3365  010E02  22F8               	addwfc	tblptru,f,c
  3366  010E04                     	endif
  3367  010E04  0009               	tblrd		*+
  3368  010E06  CFF5 F015          	movff	tablat,___ftmul@f1
  3369  010E0A  0009               	tblrd		*+
  3370  010E0C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3371  010E10  000A               	tblrd		*-
  3372  010E12  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3373  010E16  ECC8  F089         	call	___ftmul	;wreg free
  3374  010E1A  C015  F02A         	movff	?___ftmul,_fround$1852
  3375  010E1E  C016  F02B         	movff	?___ftmul+1,_fround$1852+1
  3376  010E22  C017  F02C         	movff	?___ftmul+2,_fround$1852+2
  3377                           
  3378                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3379  010E26  C02A  F015         	movff	_fround$1852,___ftmul@f1
  3380  010E2A  C02B  F016         	movff	_fround$1852+1,___ftmul@f1+1
  3381  010E2E  C02C  F017         	movff	_fround$1852+2,___ftmul@f1+2
  3382  010E32  0E00               	movlw	0
  3383  010E34  6E18               	movwf	___ftmul@f2,c
  3384  010E36  0E00               	movlw	0
  3385  010E38  6E19               	movwf	___ftmul@f2+1,c
  3386  010E3A  0E3F               	movlw	63
  3387  010E3C  6E1A               	movwf	___ftmul@f2+2,c
  3388  010E3E  ECC8  F089         	call	___ftmul	;wreg free
  3389  010E42  D793               	goto	L5
  3390  010E44                     l3070:
  3391                           
  3392                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3393  010E44  502D               	movf	fround@prec,w,c
  3394  010E46  0D03               	mullw	3
  3395  010E48  0EA7               	movlw	low __npowers_
  3396  010E4A  24F3               	addwf	prodl,w,c
  3397  010E4C  6EF6               	movwf	tblptrl,c
  3398  010E4E  0EFF               	movlw	high __npowers_
  3399  010E50  20F4               	addwfc	prodh,w,c
  3400  010E52  6EF7               	movwf	tblptrh,c
  3401  010E54                     	if	1	;There are 3 active tblptr bytes
  3402  010E54  6AF8               	clrf	tblptru,c
  3403  010E56  0E00               	movlw	low (__mediumconst shr (0+16))
  3404  010E58  22F8               	addwfc	tblptru,f,c
  3405  010E5A                     	endif
  3406  010E5A  0009               	tblrd		*+
  3407  010E5C  CFF5 F015          	movff	tablat,___ftmul@f1
  3408  010E60  0009               	tblrd		*+
  3409  010E62  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3410  010E66  000A               	tblrd		*-
  3411  010E68  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3412  010E6C  0E00               	movlw	0
  3413  010E6E  6E18               	movwf	___ftmul@f2,c
  3414  010E70  0E00               	movlw	0
  3415  010E72  6E19               	movwf	___ftmul@f2+1,c
  3416  010E74  0E3F               	movlw	63
  3417  010E76  6E1A               	movwf	___ftmul@f2+2,c
  3418  010E78  ECC8  F089         	call	___ftmul	;wreg free
  3419  010E7C  C015  F024         	movff	?___ftmul,?_fround
  3420  010E80  C016  F025         	movff	?___ftmul+1,?_fround+1
  3421  010E84  C017  F026         	movff	?___ftmul+2,?_fround+2
  3422  010E88  0012               	return	
  3423  010E8A                     __end_of_fround:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           postdec1	equ	0xFE5
  3434                           fsr1l	equ	0xFE1
  3435                           indf2	equ	0xFDF
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function ___wmul *****************
  3443 ;; Defined at:
  3444 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  multiplier      2   14[COMRAM] unsigned int 
  3447 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  product         2   18[COMRAM] unsigned int 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  2   14[COMRAM] unsigned int 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0, prodl, prodh
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3459 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;Total ram usage:        6 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; This function calls:
  3466 ;;		Nothing
  3467 ;; This function is called by:
  3468 ;;		_fround
  3469 ;;		_scale
  3470 ;;		_sprintf
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text5
  3475  011E28                     __ptext5:
  3476                           	opt stack 0
  3477  011E28                     ___wmul:
  3478                           	opt stack 28
  3479                           
  3480                           ;incstack = 0
  3481  011E28  500F               	movf	___wmul@multiplier,w,c
  3482  011E2A  0211               	mulwf	___wmul@multiplicand,c
  3483  011E2C  CFF3 F013          	movff	prodl,___wmul@product
  3484  011E30  CFF4 F014          	movff	prodh,___wmul@product+1
  3485  011E34  500F               	movf	___wmul@multiplier,w,c
  3486  011E36  0212               	mulwf	___wmul@multiplicand+1,c
  3487  011E38  50F3               	movf	prodl,w,c
  3488  011E3A  2614               	addwf	___wmul@product+1,f,c
  3489  011E3C  5010               	movf	___wmul@multiplier+1,w,c
  3490  011E3E  0211               	mulwf	___wmul@multiplicand,c
  3491  011E40  50F3               	movf	prodl,w,c
  3492  011E42  2614               	addwf	___wmul@product+1,f,c
  3493  011E44  C013  F00F         	movff	___wmul@product,?___wmul
  3494  011E48  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3495  011E4C  0012               	return	
  3496  011E4E                     __end_of___wmul:
  3497                           	opt stack 0
  3498                           tblptru	equ	0xFF8
  3499                           tblptrh	equ	0xFF7
  3500                           tblptrl	equ	0xFF6
  3501                           tablat	equ	0xFF5
  3502                           prodh	equ	0xFF4
  3503                           prodl	equ	0xFF3
  3504                           postinc0	equ	0xFEE
  3505                           wreg	equ	0xFE8
  3506                           postdec1	equ	0xFE5
  3507                           fsr1l	equ	0xFE1
  3508                           indf2	equ	0xFDF
  3509                           postinc2	equ	0xFDE
  3510                           postdec2	equ	0xFDD
  3511                           fsr2h	equ	0xFDA
  3512                           fsr2l	equ	0xFD9
  3513                           status	equ	0xFD8
  3514                           
  3515 ;; *************** function ___ftmul *****************
  3516 ;; Defined at:
  3517 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  f1              3   20[COMRAM] float 
  3520 ;;  f2              3   23[COMRAM] float 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3523 ;;  sign            1   34[COMRAM] unsigned char 
  3524 ;;  cntr            1   33[COMRAM] unsigned char 
  3525 ;;  exp             1   29[COMRAM] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  3   20[COMRAM] float 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3535 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;Total ram usage:       15 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    1
  3542 ;; This function calls:
  3543 ;;		___ftpack
  3544 ;; This function is called by:
  3545 ;;		_fround
  3546 ;;		_scale
  3547 ;;		_sprintf
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text6
  3552  011390                     __ptext6:
  3553                           	opt stack 0
  3554  011390                     ___ftmul:
  3555                           	opt stack 27
  3556                           
  3557                           ;incstack = 0
  3558  011390  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3559  011394  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3560  011396  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3561  011398  3416               	rlcf	___ftmul@f1+1,w,c
  3562  01139A  361B               	rlcf	??___ftmul& (0+255),f,c
  3563  01139C  E301               	bnc	u2571
  3564  01139E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3565  0113A0                     u2571:
  3566  0113A0  501B               	movf	??___ftmul,w,c
  3567  0113A2  6E1E               	movwf	___ftmul@exp,c
  3568  0113A4  501E               	movf	___ftmul@exp,w,c
  3569  0113A6  A4D8               	btfss	status,2,c
  3570  0113A8  D007               	goto	l2856
  3571  0113AA  0E00               	movlw	0
  3572  0113AC  6E15               	movwf	?___ftmul,c
  3573  0113AE  0E00               	movlw	0
  3574  0113B0  6E16               	movwf	?___ftmul+1,c
  3575  0113B2  0E00               	movlw	0
  3576  0113B4  6E17               	movwf	?___ftmul+2,c
  3577  0113B6  0012               	return	
  3578  0113B8                     l2856:
  3579  0113B8  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3580  0113BC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3581  0113BE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3582  0113C0  3419               	rlcf	___ftmul@f2+1,w,c
  3583  0113C2  361B               	rlcf	??___ftmul& (0+255),f,c
  3584  0113C4  E301               	bnc	u2591
  3585  0113C6  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3586  0113C8                     u2591:
  3587  0113C8  501B               	movf	??___ftmul,w,c
  3588  0113CA  6E23               	movwf	___ftmul@sign,c
  3589  0113CC  5023               	movf	___ftmul@sign,w,c
  3590  0113CE  A4D8               	btfss	status,2,c
  3591  0113D0  D007               	goto	l2862
  3592  0113D2  0E00               	movlw	0
  3593  0113D4  6E15               	movwf	?___ftmul,c
  3594  0113D6  0E00               	movlw	0
  3595  0113D8  6E16               	movwf	?___ftmul+1,c
  3596  0113DA  0E00               	movlw	0
  3597  0113DC  6E17               	movwf	?___ftmul+2,c
  3598  0113DE  0012               	return	
  3599  0113E0                     l2862:
  3600  0113E0  5023               	movf	___ftmul@sign,w,c
  3601  0113E2  0F7B               	addlw	123
  3602  0113E4  261E               	addwf	___ftmul@exp,f,c
  3603  0113E6  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3604  0113EA  501A               	movf	___ftmul@f2+2,w,c
  3605  0113EC  1A23               	xorwf	___ftmul@sign,f,c
  3606  0113EE  0E80               	movlw	128
  3607  0113F0  1623               	andwf	___ftmul@sign,f,c
  3608  0113F2  8E16               	bsf	___ftmul@f1+1,7,c
  3609  0113F4  8E19               	bsf	___ftmul@f2+1,7,c
  3610  0113F6  0EFF               	movlw	255
  3611  0113F8  1618               	andwf	___ftmul@f2,f,c
  3612  0113FA  0EFF               	movlw	255
  3613  0113FC  1619               	andwf	___ftmul@f2+1,f,c
  3614  0113FE  0E00               	movlw	0
  3615  011400  161A               	andwf	___ftmul@f2+2,f,c
  3616  011402  0E00               	movlw	0
  3617  011404  6E1F               	movwf	___ftmul@f3_as_product,c
  3618  011406  0E00               	movlw	0
  3619  011408  6E20               	movwf	___ftmul@f3_as_product+1,c
  3620  01140A  0E00               	movlw	0
  3621  01140C  6E21               	movwf	___ftmul@f3_as_product+2,c
  3622  01140E  0E07               	movlw	7
  3623  011410  6E22               	movwf	___ftmul@cntr,c
  3624  011412                     l2876:
  3625  011412  A015               	btfss	___ftmul@f1,0,c
  3626  011414  D006               	goto	l2880
  3627  011416  5018               	movf	___ftmul@f2,w,c
  3628  011418  261F               	addwf	___ftmul@f3_as_product,f,c
  3629  01141A  5019               	movf	___ftmul@f2+1,w,c
  3630  01141C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3631  01141E  501A               	movf	___ftmul@f2+2,w,c
  3632  011420  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3633  011422                     l2880:
  3634  011422  90D8               	bcf	status,0,c
  3635  011424  3217               	rrcf	___ftmul@f1+2,f,c
  3636  011426  3216               	rrcf	___ftmul@f1+1,f,c
  3637  011428  3215               	rrcf	___ftmul@f1,f,c
  3638  01142A  90D8               	bcf	status,0,c
  3639  01142C  3618               	rlcf	___ftmul@f2,f,c
  3640  01142E  3619               	rlcf	___ftmul@f2+1,f,c
  3641  011430  361A               	rlcf	___ftmul@f2+2,f,c
  3642  011432  2E22               	decfsz	___ftmul@cntr,f,c
  3643  011434  D7EE               	goto	l2876
  3644  011436  0E09               	movlw	9
  3645  011438  6E22               	movwf	___ftmul@cntr,c
  3646  01143A                     l2886:
  3647  01143A  A015               	btfss	___ftmul@f1,0,c
  3648  01143C  D006               	goto	l2890
  3649  01143E  5018               	movf	___ftmul@f2,w,c
  3650  011440  261F               	addwf	___ftmul@f3_as_product,f,c
  3651  011442  5019               	movf	___ftmul@f2+1,w,c
  3652  011444  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3653  011446  501A               	movf	___ftmul@f2+2,w,c
  3654  011448  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3655  01144A                     l2890:
  3656  01144A  90D8               	bcf	status,0,c
  3657  01144C  3217               	rrcf	___ftmul@f1+2,f,c
  3658  01144E  3216               	rrcf	___ftmul@f1+1,f,c
  3659  011450  3215               	rrcf	___ftmul@f1,f,c
  3660  011452  90D8               	bcf	status,0,c
  3661  011454  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3662  011456  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3663  011458  321F               	rrcf	___ftmul@f3_as_product,f,c
  3664  01145A  2E22               	decfsz	___ftmul@cntr,f,c
  3665  01145C  D7EE               	goto	l2886
  3666  01145E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3667  011462  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3668  011466  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3669  01146A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3670  01146E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3671  011472  EC2F  F08B         	call	___ftpack	;wreg free
  3672  011476  C001  F015         	movff	?___ftpack,?___ftmul
  3673  01147A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3674  01147E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3675  011482  0012               	return	
  3676  011484                     __end_of___ftmul:
  3677                           	opt stack 0
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           postinc0	equ	0xFEE
  3685                           wreg	equ	0xFE8
  3686                           postdec1	equ	0xFE5
  3687                           fsr1l	equ	0xFE1
  3688                           indf2	equ	0xFDF
  3689                           postinc2	equ	0xFDE
  3690                           postdec2	equ	0xFDD
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function ___awmod *****************
  3696 ;; Defined at:
  3697 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  dividend        2    0[COMRAM] int 
  3700 ;;  divisor         2    2[COMRAM] int 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  sign            1    5[COMRAM] unsigned char 
  3703 ;;  counter         1    4[COMRAM] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  2    0[COMRAM] int 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3713 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;Total ram usage:        6 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_fround
  3723 ;;		_scale
  3724 ;;		_LCDGetPos
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	text7
  3729  0119A8                     __ptext7:
  3730                           	opt stack 0
  3731  0119A8                     ___awmod:
  3732                           	opt stack 28
  3733                           
  3734                           ;incstack = 0
  3735  0119A8  0E00               	movlw	0
  3736  0119AA  6E06               	movwf	___awmod@sign,c
  3737  0119AC  AE02               	btfss	___awmod@dividend+1,7,c
  3738  0119AE  D006               	goto	l2950
  3739  0119B0  6C01               	negf	___awmod@dividend,c
  3740  0119B2  1E02               	comf	___awmod@dividend+1,f,c
  3741  0119B4  B0D8               	btfsc	status,0,c
  3742  0119B6  2A02               	incf	___awmod@dividend+1,f,c
  3743  0119B8  0E01               	movlw	1
  3744  0119BA  6E06               	movwf	___awmod@sign,c
  3745  0119BC                     l2950:
  3746  0119BC  AE04               	btfss	___awmod@divisor+1,7,c
  3747  0119BE  D004               	goto	l2954
  3748  0119C0  6C03               	negf	___awmod@divisor,c
  3749  0119C2  1E04               	comf	___awmod@divisor+1,f,c
  3750  0119C4  B0D8               	btfsc	status,0,c
  3751  0119C6  2A04               	incf	___awmod@divisor+1,f,c
  3752  0119C8                     l2954:
  3753  0119C8  5003               	movf	___awmod@divisor,w,c
  3754  0119CA  1004               	iorwf	___awmod@divisor+1,w,c
  3755  0119CC  B4D8               	btfsc	status,2,c
  3756  0119CE  D018               	goto	l2970
  3757  0119D0  0E01               	movlw	1
  3758  0119D2  6E05               	movwf	___awmod@counter,c
  3759  0119D4  D004               	goto	l2960
  3760  0119D6                     l2958:
  3761  0119D6  90D8               	bcf	status,0,c
  3762  0119D8  3603               	rlcf	___awmod@divisor,f,c
  3763  0119DA  3604               	rlcf	___awmod@divisor+1,f,c
  3764  0119DC  2A05               	incf	___awmod@counter,f,c
  3765  0119DE                     l2960:
  3766  0119DE  AE04               	btfss	___awmod@divisor+1,7,c
  3767  0119E0  D7FA               	goto	l2958
  3768  0119E2                     l2962:
  3769  0119E2  5003               	movf	___awmod@divisor,w,c
  3770  0119E4  5C01               	subwf	___awmod@dividend,w,c
  3771  0119E6  5004               	movf	___awmod@divisor+1,w,c
  3772  0119E8  5802               	subwfb	___awmod@dividend+1,w,c
  3773  0119EA  A0D8               	btfss	status,0,c
  3774  0119EC  D004               	goto	l2966
  3775  0119EE  5003               	movf	___awmod@divisor,w,c
  3776  0119F0  5E01               	subwf	___awmod@dividend,f,c
  3777  0119F2  5004               	movf	___awmod@divisor+1,w,c
  3778  0119F4  5A02               	subwfb	___awmod@dividend+1,f,c
  3779  0119F6                     l2966:
  3780  0119F6  90D8               	bcf	status,0,c
  3781  0119F8  3204               	rrcf	___awmod@divisor+1,f,c
  3782  0119FA  3203               	rrcf	___awmod@divisor,f,c
  3783  0119FC  2E05               	decfsz	___awmod@counter,f,c
  3784  0119FE  D7F1               	goto	l2962
  3785  011A00                     l2970:
  3786  011A00  5006               	movf	___awmod@sign,w,c
  3787  011A02  B4D8               	btfsc	status,2,c
  3788  011A04  D004               	goto	l2974
  3789  011A06  6C01               	negf	___awmod@dividend,c
  3790  011A08  1E02               	comf	___awmod@dividend+1,f,c
  3791  011A0A  B0D8               	btfsc	status,0,c
  3792  011A0C  2A02               	incf	___awmod@dividend+1,f,c
  3793  011A0E                     l2974:
  3794  011A0E  C001  F001         	movff	___awmod@dividend,?___awmod
  3795  011A12  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3796  011A16  0012               	return	
  3797  011A18                     __end_of___awmod:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           indf2	equ	0xFDF
  3810                           postinc2	equ	0xFDE
  3811                           postdec2	equ	0xFDD
  3812                           fsr2h	equ	0xFDA
  3813                           fsr2l	equ	0xFD9
  3814                           status	equ	0xFD8
  3815                           
  3816 ;; *************** function ___awdiv *****************
  3817 ;; Defined at:
  3818 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  dividend        2    6[COMRAM] int 
  3821 ;;  divisor         2    8[COMRAM] int 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  quotient        2   12[COMRAM] int 
  3824 ;;  sign            1   11[COMRAM] unsigned char 
  3825 ;;  counter         1   10[COMRAM] unsigned char 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  2    6[COMRAM] int 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:        8 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_fround
  3845 ;;		_scale
  3846 ;;		_sprintf
  3847 ;;		_LCDGetPos
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text8
  3852  01182C                     __ptext8:
  3853                           	opt stack 0
  3854  01182C                     ___awdiv:
  3855                           	opt stack 28
  3856                           
  3857                           ;incstack = 0
  3858  01182C  0E00               	movlw	0
  3859  01182E  6E0C               	movwf	___awdiv@sign,c
  3860  011830  AE0A               	btfss	___awdiv@divisor+1,7,c
  3861  011832  D006               	goto	l2906
  3862  011834  6C09               	negf	___awdiv@divisor,c
  3863  011836  1E0A               	comf	___awdiv@divisor+1,f,c
  3864  011838  B0D8               	btfsc	status,0,c
  3865  01183A  2A0A               	incf	___awdiv@divisor+1,f,c
  3866  01183C  0E01               	movlw	1
  3867  01183E  6E0C               	movwf	___awdiv@sign,c
  3868  011840                     l2906:
  3869  011840  AE08               	btfss	___awdiv@dividend+1,7,c
  3870  011842  D006               	goto	l2912
  3871  011844  6C07               	negf	___awdiv@dividend,c
  3872  011846  1E08               	comf	___awdiv@dividend+1,f,c
  3873  011848  B0D8               	btfsc	status,0,c
  3874  01184A  2A08               	incf	___awdiv@dividend+1,f,c
  3875  01184C  0E01               	movlw	1
  3876  01184E  1A0C               	xorwf	___awdiv@sign,f,c
  3877  011850                     l2912:
  3878  011850  0E00               	movlw	0
  3879  011852  6E0E               	movwf	___awdiv@quotient+1,c
  3880  011854  0E00               	movlw	0
  3881  011856  6E0D               	movwf	___awdiv@quotient,c
  3882  011858  5009               	movf	___awdiv@divisor,w,c
  3883  01185A  100A               	iorwf	___awdiv@divisor+1,w,c
  3884  01185C  B4D8               	btfsc	status,2,c
  3885  01185E  D01C               	goto	l2934
  3886  011860  0E01               	movlw	1
  3887  011862  6E0B               	movwf	___awdiv@counter,c
  3888  011864  D004               	goto	l2920
  3889  011866                     l2918:
  3890  011866  90D8               	bcf	status,0,c
  3891  011868  3609               	rlcf	___awdiv@divisor,f,c
  3892  01186A  360A               	rlcf	___awdiv@divisor+1,f,c
  3893  01186C  2A0B               	incf	___awdiv@counter,f,c
  3894  01186E                     l2920:
  3895  01186E  AE0A               	btfss	___awdiv@divisor+1,7,c
  3896  011870  D7FA               	goto	l2918
  3897  011872                     l2922:
  3898  011872  90D8               	bcf	status,0,c
  3899  011874  360D               	rlcf	___awdiv@quotient,f,c
  3900  011876  360E               	rlcf	___awdiv@quotient+1,f,c
  3901  011878  5009               	movf	___awdiv@divisor,w,c
  3902  01187A  5C07               	subwf	___awdiv@dividend,w,c
  3903  01187C  500A               	movf	___awdiv@divisor+1,w,c
  3904  01187E  5808               	subwfb	___awdiv@dividend+1,w,c
  3905  011880  A0D8               	btfss	status,0,c
  3906  011882  D005               	goto	l2930
  3907  011884  5009               	movf	___awdiv@divisor,w,c
  3908  011886  5E07               	subwf	___awdiv@dividend,f,c
  3909  011888  500A               	movf	___awdiv@divisor+1,w,c
  3910  01188A  5A08               	subwfb	___awdiv@dividend+1,f,c
  3911  01188C  800D               	bsf	___awdiv@quotient,0,c
  3912  01188E                     l2930:
  3913  01188E  90D8               	bcf	status,0,c
  3914  011890  320A               	rrcf	___awdiv@divisor+1,f,c
  3915  011892  3209               	rrcf	___awdiv@divisor,f,c
  3916  011894  2E0B               	decfsz	___awdiv@counter,f,c
  3917  011896  D7ED               	goto	l2922
  3918  011898                     l2934:
  3919  011898  500C               	movf	___awdiv@sign,w,c
  3920  01189A  B4D8               	btfsc	status,2,c
  3921  01189C  D004               	goto	l2938
  3922  01189E  6C0D               	negf	___awdiv@quotient,c
  3923  0118A0  1E0E               	comf	___awdiv@quotient+1,f,c
  3924  0118A2  B0D8               	btfsc	status,0,c
  3925  0118A4  2A0E               	incf	___awdiv@quotient+1,f,c
  3926  0118A6                     l2938:
  3927  0118A6  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3928  0118AA  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3929  0118AE  0012               	return	
  3930  0118B0                     __end_of___awdiv:
  3931                           	opt stack 0
  3932                           tblptru	equ	0xFF8
  3933                           tblptrh	equ	0xFF7
  3934                           tblptrl	equ	0xFF6
  3935                           tablat	equ	0xFF5
  3936                           prodh	equ	0xFF4
  3937                           prodl	equ	0xFF3
  3938                           postinc0	equ	0xFEE
  3939                           wreg	equ	0xFE8
  3940                           postdec1	equ	0xFE5
  3941                           fsr1l	equ	0xFE1
  3942                           indf2	equ	0xFDF
  3943                           postinc2	equ	0xFDE
  3944                           postdec2	equ	0xFDD
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function __tdiv_to_l_ *****************
  3950 ;; Defined at:
  3951 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  f1              3    0[COMRAM] float 
  3954 ;;  f2              3    3[COMRAM] float 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  quot            4    9[COMRAM] unsigned long 
  3957 ;;  exp1            1   14[COMRAM] unsigned char 
  3958 ;;  cntr            1   13[COMRAM] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  4    0[COMRAM] unsigned long 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3968 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;Total ram usage:       15 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; This function calls:
  3975 ;;		Nothing
  3976 ;; This function is called by:
  3977 ;;		_sprintf
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text9
  3982  011036                     __ptext9:
  3983                           	opt stack 0
  3984  011036                     __tdiv_to_l_:
  3985                           	opt stack 29
  3986                           
  3987                           ;incstack = 0
  3988  011036  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3989  01103A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3990  01103C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3991  01103E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3992  011040  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3993  011042  E301               	bnc	u2951
  3994  011044  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3995  011046                     u2951:
  3996  011046  5007               	movf	??__tdiv_to_l_,w,c
  3997  011048  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3998  01104A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3999  01104C  A4D8               	btfss	status,2,c
  4000  01104E  D009               	goto	l3130
  4001  011050  0E00               	movlw	0
  4002  011052  6E01               	movwf	?__tdiv_to_l_,c
  4003  011054  0E00               	movlw	0
  4004  011056  6E02               	movwf	?__tdiv_to_l_+1,c
  4005  011058  0E00               	movlw	0
  4006  01105A  6E03               	movwf	?__tdiv_to_l_+2,c
  4007  01105C  0E00               	movlw	0
  4008  01105E  6E04               	movwf	?__tdiv_to_l_+3,c
  4009  011060  0012               	return	
  4010  011062                     l3130:
  4011  011062  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4012  011066  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4013  011068  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4014  01106A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4015  01106C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4016  01106E  E301               	bnc	u2971
  4017  011070  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4018  011072                     u2971:
  4019  011072  5007               	movf	??__tdiv_to_l_,w,c
  4020  011074  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4021  011076  500E               	movf	__tdiv_to_l_@cntr,w,c
  4022  011078  A4D8               	btfss	status,2,c
  4023  01107A  D009               	goto	l3136
  4024  01107C  0E00               	movlw	0
  4025  01107E  6E01               	movwf	?__tdiv_to_l_,c
  4026  011080  0E00               	movlw	0
  4027  011082  6E02               	movwf	?__tdiv_to_l_+1,c
  4028  011084  0E00               	movlw	0
  4029  011086  6E03               	movwf	?__tdiv_to_l_+2,c
  4030  011088  0E00               	movlw	0
  4031  01108A  6E04               	movwf	?__tdiv_to_l_+3,c
  4032  01108C  0012               	return	
  4033  01108E                     l3136:
  4034  01108E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4035  011090  0EFF               	movlw	255
  4036  011092  1601               	andwf	__tdiv_to_l_@f1,f,c
  4037  011094  0EFF               	movlw	255
  4038  011096  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4039  011098  0E00               	movlw	0
  4040  01109A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4041  01109C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4042  01109E  0EFF               	movlw	255
  4043  0110A0  1604               	andwf	__tdiv_to_l_@f2,f,c
  4044  0110A2  0EFF               	movlw	255
  4045  0110A4  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4046  0110A6  0E00               	movlw	0
  4047  0110A8  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4048  0110AA  0E00               	movlw	0
  4049  0110AC  6E0A               	movwf	__tdiv_to_l_@quot,c
  4050  0110AE  0E00               	movlw	0
  4051  0110B0  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4052  0110B2  0E00               	movlw	0
  4053  0110B4  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4054  0110B6  0E00               	movlw	0
  4055  0110B8  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4056  0110BA  0E7F               	movlw	127
  4057  0110BC  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4058  0110BE  500E               	movf	__tdiv_to_l_@cntr,w,c
  4059  0110C0  0F98               	addlw	152
  4060  0110C2  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4061  0110C4  0E18               	movlw	24
  4062  0110C6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4063  0110C8                     l774:
  4064  0110C8  90D8               	bcf	status,0,c
  4065  0110CA  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4066  0110CC  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4067  0110CE  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4068  0110D0  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4069  0110D2  5004               	movf	__tdiv_to_l_@f2,w,c
  4070  0110D4  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4071  0110D6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4072  0110D8  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4073  0110DA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4074  0110DC  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4075  0110DE  A0D8               	btfss	status,0,c
  4076  0110E0  D007               	goto	l775
  4077  0110E2  5004               	movf	__tdiv_to_l_@f2,w,c
  4078  0110E4  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4079  0110E6  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4080  0110E8  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4081  0110EA  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4082  0110EC  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4083  0110EE  800A               	bsf	__tdiv_to_l_@quot,0,c
  4084  0110F0                     l775:
  4085  0110F0  90D8               	bcf	status,0,c
  4086  0110F2  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4087  0110F4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4088  0110F6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4089  0110F8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4090  0110FA  D7E6               	goto	l774
  4091  0110FC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4092  0110FE  D016               	goto	l3170
  4093  011100  500F               	movf	__tdiv_to_l_@exp1,w,c
  4094  011102  0A80               	xorlw	128
  4095  011104  0F97               	addlw	151
  4096  011106  B0D8               	btfsc	status,0,c
  4097  011108  D009               	goto	l3166
  4098  01110A  0E00               	movlw	0
  4099  01110C  6E01               	movwf	?__tdiv_to_l_,c
  4100  01110E  0E00               	movlw	0
  4101  011110  6E02               	movwf	?__tdiv_to_l_+1,c
  4102  011112  0E00               	movlw	0
  4103  011114  6E03               	movwf	?__tdiv_to_l_+2,c
  4104  011116  0E00               	movlw	0
  4105  011118  6E04               	movwf	?__tdiv_to_l_+3,c
  4106  01111A  0012               	return	
  4107  01111C                     l3166:
  4108  01111C  90D8               	bcf	status,0,c
  4109  01111E  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4110  011120  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4111  011122  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4112  011124  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4113  011126  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4114  011128  D7F9               	goto	l3166
  4115  01112A  D015               	goto	l781
  4116  01112C                     l3170:
  4117  01112C  0E17               	movlw	23
  4118  01112E  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4119  011130  D00F               	goto	l3178
  4120  011132  0E00               	movlw	0
  4121  011134  6E01               	movwf	?__tdiv_to_l_,c
  4122  011136  0E00               	movlw	0
  4123  011138  6E02               	movwf	?__tdiv_to_l_+1,c
  4124  01113A  0E00               	movlw	0
  4125  01113C  6E03               	movwf	?__tdiv_to_l_+2,c
  4126  01113E  0E00               	movlw	0
  4127  011140  6E04               	movwf	?__tdiv_to_l_+3,c
  4128  011142  0012               	return	
  4129  011144                     l3176:
  4130  011144  90D8               	bcf	status,0,c
  4131  011146  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4132  011148  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4133  01114A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4134  01114C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4135  01114E  060F               	decf	__tdiv_to_l_@exp1,f,c
  4136  011150                     l3178:
  4137  011150  500F               	movf	__tdiv_to_l_@exp1,w,c
  4138  011152  A4D8               	btfss	status,2,c
  4139  011154  D7F7               	goto	l3176
  4140  011156                     l781:
  4141  011156  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4142  01115A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4143  01115E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4144  011162  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4145  011166  0012               	return		;funcret
  4146  011168                     __end_of__tdiv_to_l_:
  4147                           	opt stack 0
  4148                           tblptru	equ	0xFF8
  4149                           tblptrh	equ	0xFF7
  4150                           tblptrl	equ	0xFF6
  4151                           tablat	equ	0xFF5
  4152                           prodh	equ	0xFF4
  4153                           prodl	equ	0xFF3
  4154                           postinc0	equ	0xFEE
  4155                           wreg	equ	0xFE8
  4156                           postdec1	equ	0xFE5
  4157                           fsr1l	equ	0xFE1
  4158                           indf2	equ	0xFDF
  4159                           postinc2	equ	0xFDE
  4160                           postdec2	equ	0xFDD
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function __div_to_l_ *****************
  4166 ;; Defined at:
  4167 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fldivl.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  f1              3    0[COMRAM] unsigned long 
  4170 ;;  f2              3    3[COMRAM] unsigned long 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  quot            4    6[COMRAM] unsigned long 
  4173 ;;  exp1            1   11[COMRAM] unsigned char 
  4174 ;;  cntr            1   10[COMRAM] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  4    0[COMRAM] unsigned long 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4184 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;Total ram usage:       12 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_sprintf
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text10
  4198  011168                     __ptext10:
  4199                           	opt stack 0
  4200  011168                     __div_to_l_:
  4201                           	opt stack 29
  4202                           
  4203                           ;incstack = 0
  4204  011168  3403               	rlcf	__div_to_l_@f1+2,w,c
  4205  01116A  3404               	rlcf	__div_to_l_@f1+3,w,c
  4206  01116C  6E0C               	movwf	__div_to_l_@exp1,c
  4207  01116E  500C               	movf	__div_to_l_@exp1,w,c
  4208  011170  A4D8               	btfss	status,2,c
  4209  011172  D009               	goto	l3186
  4210  011174  0E00               	movlw	0
  4211  011176  6E01               	movwf	?__div_to_l_,c
  4212  011178  0E00               	movlw	0
  4213  01117A  6E02               	movwf	?__div_to_l_+1,c
  4214  01117C  0E00               	movlw	0
  4215  01117E  6E03               	movwf	?__div_to_l_+2,c
  4216  011180  0E00               	movlw	0
  4217  011182  6E04               	movwf	?__div_to_l_+3,c
  4218  011184  0012               	return	
  4219  011186                     l3186:
  4220  011186  3406               	rlcf	__div_to_l_@f2+2,w,c
  4221  011188  3407               	rlcf	__div_to_l_@f2+3,w,c
  4222  01118A  6E0B               	movwf	__div_to_l_@cntr,c
  4223  01118C  500B               	movf	__div_to_l_@cntr,w,c
  4224  01118E  A4D8               	btfss	status,2,c
  4225  011190  D009               	goto	l3192
  4226  011192  0E00               	movlw	0
  4227  011194  6E01               	movwf	?__div_to_l_,c
  4228  011196  0E00               	movlw	0
  4229  011198  6E02               	movwf	?__div_to_l_+1,c
  4230  01119A  0E00               	movlw	0
  4231  01119C  6E03               	movwf	?__div_to_l_+2,c
  4232  01119E  0E00               	movlw	0
  4233  0111A0  6E04               	movwf	?__div_to_l_+3,c
  4234  0111A2  0012               	return	
  4235  0111A4                     l3192:
  4236  0111A4  8E03               	bsf	__div_to_l_@f1+2,7,c
  4237  0111A6  0EFF               	movlw	255
  4238  0111A8  1601               	andwf	__div_to_l_@f1,f,c
  4239  0111AA  0EFF               	movlw	255
  4240  0111AC  1602               	andwf	__div_to_l_@f1+1,f,c
  4241  0111AE  0EFF               	movlw	255
  4242  0111B0  1603               	andwf	__div_to_l_@f1+2,f,c
  4243  0111B2  0E00               	movlw	0
  4244  0111B4  1604               	andwf	__div_to_l_@f1+3,f,c
  4245  0111B6  8E06               	bsf	__div_to_l_@f2+2,7,c
  4246  0111B8  0EFF               	movlw	255
  4247  0111BA  1604               	andwf	__div_to_l_@f2,f,c
  4248  0111BC  0EFF               	movlw	255
  4249  0111BE  1605               	andwf	__div_to_l_@f2+1,f,c
  4250  0111C0  0EFF               	movlw	255
  4251  0111C2  1606               	andwf	__div_to_l_@f2+2,f,c
  4252  0111C4  0E00               	movlw	0
  4253  0111C6  1607               	andwf	__div_to_l_@f2+3,f,c
  4254  0111C8  0E00               	movlw	0
  4255  0111CA  6E07               	movwf	__div_to_l_@quot,c
  4256  0111CC  0E00               	movlw	0
  4257  0111CE  6E08               	movwf	__div_to_l_@quot+1,c
  4258  0111D0  0E00               	movlw	0
  4259  0111D2  6E09               	movwf	__div_to_l_@quot+2,c
  4260  0111D4  0E00               	movlw	0
  4261  0111D6  6E0A               	movwf	__div_to_l_@quot+3,c
  4262  0111D8  0E7F               	movlw	127
  4263  0111DA  5E0C               	subwf	__div_to_l_@exp1,f,c
  4264  0111DC  500B               	movf	__div_to_l_@cntr,w,c
  4265  0111DE  0FA0               	addlw	160
  4266  0111E0  5E0C               	subwf	__div_to_l_@exp1,f,c
  4267  0111E2  0E20               	movlw	32
  4268  0111E4  6E0B               	movwf	__div_to_l_@cntr,c
  4269  0111E6                     l3206:
  4270  0111E6  90D8               	bcf	status,0,c
  4271  0111E8  3607               	rlcf	__div_to_l_@quot,f,c
  4272  0111EA  3608               	rlcf	__div_to_l_@quot+1,f,c
  4273  0111EC  3609               	rlcf	__div_to_l_@quot+2,f,c
  4274  0111EE  360A               	rlcf	__div_to_l_@quot+3,f,c
  4275  0111F0  5004               	movf	__div_to_l_@f2,w,c
  4276  0111F2  5C01               	subwf	__div_to_l_@f1,w,c
  4277  0111F4  5005               	movf	__div_to_l_@f2+1,w,c
  4278  0111F6  5802               	subwfb	__div_to_l_@f1+1,w,c
  4279  0111F8  5006               	movf	__div_to_l_@f2+2,w,c
  4280  0111FA  5803               	subwfb	__div_to_l_@f1+2,w,c
  4281  0111FC  5007               	movf	__div_to_l_@f2+3,w,c
  4282  0111FE  5804               	subwfb	__div_to_l_@f1+3,w,c
  4283  011200  A0D8               	btfss	status,0,c
  4284  011202  D009               	goto	l3214
  4285  011204  5004               	movf	__div_to_l_@f2,w,c
  4286  011206  5E01               	subwf	__div_to_l_@f1,f,c
  4287  011208  5005               	movf	__div_to_l_@f2+1,w,c
  4288  01120A  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4289  01120C  5006               	movf	__div_to_l_@f2+2,w,c
  4290  01120E  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4291  011210  5007               	movf	__div_to_l_@f2+3,w,c
  4292  011212  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4293  011214  8007               	bsf	__div_to_l_@quot,0,c
  4294  011216                     l3214:
  4295  011216  90D8               	bcf	status,0,c
  4296  011218  3601               	rlcf	__div_to_l_@f1,f,c
  4297  01121A  3602               	rlcf	__div_to_l_@f1+1,f,c
  4298  01121C  3603               	rlcf	__div_to_l_@f1+2,f,c
  4299  01121E  3604               	rlcf	__div_to_l_@f1+3,f,c
  4300  011220  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4301  011222  D7E1               	goto	l3206
  4302  011224  AE0C               	btfss	__div_to_l_@exp1,7,c
  4303  011226  D016               	goto	l3230
  4304  011228  500C               	movf	__div_to_l_@exp1,w,c
  4305  01122A  0A80               	xorlw	128
  4306  01122C  0F9F               	addlw	159
  4307  01122E  B0D8               	btfsc	status,0,c
  4308  011230  D009               	goto	l3226
  4309  011232  0E00               	movlw	0
  4310  011234  6E01               	movwf	?__div_to_l_,c
  4311  011236  0E00               	movlw	0
  4312  011238  6E02               	movwf	?__div_to_l_+1,c
  4313  01123A  0E00               	movlw	0
  4314  01123C  6E03               	movwf	?__div_to_l_+2,c
  4315  01123E  0E00               	movlw	0
  4316  011240  6E04               	movwf	?__div_to_l_+3,c
  4317  011242  0012               	return	
  4318  011244                     l3226:
  4319  011244  90D8               	bcf	status,0,c
  4320  011246  320A               	rrcf	__div_to_l_@quot+3,f,c
  4321  011248  3209               	rrcf	__div_to_l_@quot+2,f,c
  4322  01124A  3208               	rrcf	__div_to_l_@quot+1,f,c
  4323  01124C  3207               	rrcf	__div_to_l_@quot,f,c
  4324  01124E  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4325  011250  D7F9               	goto	l3226
  4326  011252  D015               	goto	l677
  4327  011254                     l3230:
  4328  011254  0E1F               	movlw	31
  4329  011256  640C               	cpfsgt	__div_to_l_@exp1,c
  4330  011258  D00F               	goto	l3238
  4331  01125A  0E00               	movlw	0
  4332  01125C  6E01               	movwf	?__div_to_l_,c
  4333  01125E  0E00               	movlw	0
  4334  011260  6E02               	movwf	?__div_to_l_+1,c
  4335  011262  0E00               	movlw	0
  4336  011264  6E03               	movwf	?__div_to_l_+2,c
  4337  011266  0E00               	movlw	0
  4338  011268  6E04               	movwf	?__div_to_l_+3,c
  4339  01126A  0012               	return	
  4340  01126C                     l3236:
  4341  01126C  90D8               	bcf	status,0,c
  4342  01126E  3607               	rlcf	__div_to_l_@quot,f,c
  4343  011270  3608               	rlcf	__div_to_l_@quot+1,f,c
  4344  011272  3609               	rlcf	__div_to_l_@quot+2,f,c
  4345  011274  360A               	rlcf	__div_to_l_@quot+3,f,c
  4346  011276  060C               	decf	__div_to_l_@exp1,f,c
  4347  011278                     l3238:
  4348  011278  500C               	movf	__div_to_l_@exp1,w,c
  4349  01127A  A4D8               	btfss	status,2,c
  4350  01127C  D7F7               	goto	l3236
  4351  01127E                     l677:
  4352  01127E  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4353  011282  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4354  011286  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4355  01128A  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4356  01128E  0012               	return		;funcret
  4357  011290                     __end_of__div_to_l_:
  4358                           	opt stack 0
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           prodh	equ	0xFF4
  4364                           prodl	equ	0xFF3
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           fsr1l	equ	0xFE1
  4369                           indf2	equ	0xFDF
  4370                           postinc2	equ	0xFDE
  4371                           postdec2	equ	0xFDD
  4372                           fsr2h	equ	0xFDA
  4373                           fsr2l	equ	0xFD9
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function ___lltoft *****************
  4377 ;; Defined at:
  4378 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  c               4    8[COMRAM] unsigned long 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  exp             1   16[COMRAM] unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  3    8[COMRAM] float 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:        9 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    1
  4399 ;; This function calls:
  4400 ;;		___ftpack
  4401 ;; This function is called by:
  4402 ;;		_sprintf
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text11
  4407  011AE2                     __ptext11:
  4408                           	opt stack 0
  4409  011AE2                     ___lltoft:
  4410                           	opt stack 28
  4411                           
  4412                           ;incstack = 0
  4413  011AE2  0E8E               	movlw	142
  4414  011AE4  6E11               	movwf	___lltoft@exp,c
  4415  011AE6  D006               	goto	l3416
  4416  011AE8                     l3414:
  4417  011AE8  90D8               	bcf	status,0,c
  4418  011AEA  320C               	rrcf	___lltoft@c+3,f,c
  4419  011AEC  320B               	rrcf	___lltoft@c+2,f,c
  4420  011AEE  320A               	rrcf	___lltoft@c+1,f,c
  4421  011AF0  3209               	rrcf	___lltoft@c,f,c
  4422  011AF2  2A11               	incf	___lltoft@exp,f,c
  4423  011AF4                     l3416:
  4424  011AF4  0E00               	movlw	0
  4425  011AF6  1409               	andwf	___lltoft@c,w,c
  4426  011AF8  6E0D               	movwf	??___lltoft& (0+255),c
  4427  011AFA  0E00               	movlw	0
  4428  011AFC  140A               	andwf	___lltoft@c+1,w,c
  4429  011AFE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4430  011B00  0E00               	movlw	0
  4431  011B02  140B               	andwf	___lltoft@c+2,w,c
  4432  011B04  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4433  011B06  0EFF               	movlw	255
  4434  011B08  140C               	andwf	___lltoft@c+3,w,c
  4435  011B0A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4436  011B0C  500D               	movf	??___lltoft,w,c
  4437  011B0E  100E               	iorwf	??___lltoft+1,w,c
  4438  011B10  100F               	iorwf	??___lltoft+2,w,c
  4439  011B12  1010               	iorwf	??___lltoft+3,w,c
  4440  011B14  A4D8               	btfss	status,2,c
  4441  011B16  D7E8               	goto	l3414
  4442  011B18  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4443  011B1C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4444  011B20  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4445  011B24  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4446  011B28  0E00               	movlw	0
  4447  011B2A  6E05               	movwf	___ftpack@sign,c
  4448  011B2C  EC2F  F08B         	call	___ftpack	;wreg free
  4449  011B30  C001  F009         	movff	?___ftpack,?___lltoft
  4450  011B34  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4451  011B38  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4452  011B3C  0012               	return	
  4453  011B3E                     __end_of___lltoft:
  4454                           	opt stack 0
  4455                           tblptru	equ	0xFF8
  4456                           tblptrh	equ	0xFF7
  4457                           tblptrl	equ	0xFF6
  4458                           tablat	equ	0xFF5
  4459                           prodh	equ	0xFF4
  4460                           prodl	equ	0xFF3
  4461                           postinc0	equ	0xFEE
  4462                           wreg	equ	0xFE8
  4463                           postdec1	equ	0xFE5
  4464                           fsr1l	equ	0xFE1
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           fsr2h	equ	0xFDA
  4469                           fsr2l	equ	0xFD9
  4470                           status	equ	0xFD8
  4471                           
  4472 ;; *************** function ___llmod *****************
  4473 ;; Defined at:
  4474 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  dividend        4    0[COMRAM] unsigned long 
  4477 ;;  divisor         4    4[COMRAM] unsigned long 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  counter         1    8[COMRAM] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  4    0[COMRAM] unsigned long 
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4489 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;Total ram usage:        9 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; This function calls:
  4496 ;;		Nothing
  4497 ;; This function is called by:
  4498 ;;		_sprintf
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text12
  4503  011A18                     __ptext12:
  4504                           	opt stack 0
  4505  011A18                     ___llmod:
  4506                           	opt stack 29
  4507                           
  4508                           ;incstack = 0
  4509  011A18  5005               	movf	___llmod@divisor,w,c
  4510  011A1A  1006               	iorwf	___llmod@divisor+1,w,c
  4511  011A1C  1007               	iorwf	___llmod@divisor+2,w,c
  4512  011A1E  1008               	iorwf	___llmod@divisor+3,w,c
  4513  011A20  B4D8               	btfsc	status,2,c
  4514  011A22  D024               	goto	l866
  4515  011A24  0E01               	movlw	1
  4516  011A26  6E09               	movwf	___llmod@counter,c
  4517  011A28  D006               	goto	l3402
  4518  011A2A                     l3400:
  4519  011A2A  90D8               	bcf	status,0,c
  4520  011A2C  3605               	rlcf	___llmod@divisor,f,c
  4521  011A2E  3606               	rlcf	___llmod@divisor+1,f,c
  4522  011A30  3607               	rlcf	___llmod@divisor+2,f,c
  4523  011A32  3608               	rlcf	___llmod@divisor+3,f,c
  4524  011A34  2A09               	incf	___llmod@counter,f,c
  4525  011A36                     l3402:
  4526  011A36  AE08               	btfss	___llmod@divisor+3,7,c
  4527  011A38  D7F8               	goto	l3400
  4528  011A3A                     l3404:
  4529  011A3A  5005               	movf	___llmod@divisor,w,c
  4530  011A3C  5C01               	subwf	___llmod@dividend,w,c
  4531  011A3E  5006               	movf	___llmod@divisor+1,w,c
  4532  011A40  5802               	subwfb	___llmod@dividend+1,w,c
  4533  011A42  5007               	movf	___llmod@divisor+2,w,c
  4534  011A44  5803               	subwfb	___llmod@dividend+2,w,c
  4535  011A46  5008               	movf	___llmod@divisor+3,w,c
  4536  011A48  5804               	subwfb	___llmod@dividend+3,w,c
  4537  011A4A  A0D8               	btfss	status,0,c
  4538  011A4C  D008               	goto	l3408
  4539  011A4E  5005               	movf	___llmod@divisor,w,c
  4540  011A50  5E01               	subwf	___llmod@dividend,f,c
  4541  011A52  5006               	movf	___llmod@divisor+1,w,c
  4542  011A54  5A02               	subwfb	___llmod@dividend+1,f,c
  4543  011A56  5007               	movf	___llmod@divisor+2,w,c
  4544  011A58  5A03               	subwfb	___llmod@dividend+2,f,c
  4545  011A5A  5008               	movf	___llmod@divisor+3,w,c
  4546  011A5C  5A04               	subwfb	___llmod@dividend+3,f,c
  4547  011A5E                     l3408:
  4548  011A5E  90D8               	bcf	status,0,c
  4549  011A60  3208               	rrcf	___llmod@divisor+3,f,c
  4550  011A62  3207               	rrcf	___llmod@divisor+2,f,c
  4551  011A64  3206               	rrcf	___llmod@divisor+1,f,c
  4552  011A66  3205               	rrcf	___llmod@divisor,f,c
  4553  011A68  2E09               	decfsz	___llmod@counter,f,c
  4554  011A6A  D7E7               	goto	l3404
  4555  011A6C                     l866:
  4556  011A6C  C001  F001         	movff	___llmod@dividend,?___llmod
  4557  011A70  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4558  011A74  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4559  011A78  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4560  011A7C  0012               	return		;funcret
  4561  011A7E                     __end_of___llmod:
  4562                           	opt stack 0
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           postdec1	equ	0xFE5
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function ___lldiv *****************
  4581 ;; Defined at:
  4582 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  dividend        4    0[COMRAM] unsigned long 
  4585 ;;  divisor         4    4[COMRAM] unsigned long 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  quotient        4    8[COMRAM] unsigned long 
  4588 ;;  counter         1   12[COMRAM] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  4    0[COMRAM] unsigned long 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4598 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;Total ram usage:       13 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_sprintf
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text13
  4612  0118B0                     __ptext13:
  4613                           	opt stack 0
  4614  0118B0                     ___lldiv:
  4615                           	opt stack 29
  4616                           
  4617                           ;incstack = 0
  4618  0118B0  0E00               	movlw	0
  4619  0118B2  6E09               	movwf	___lldiv@quotient,c
  4620  0118B4  0E00               	movlw	0
  4621  0118B6  6E0A               	movwf	___lldiv@quotient+1,c
  4622  0118B8  0E00               	movlw	0
  4623  0118BA  6E0B               	movwf	___lldiv@quotient+2,c
  4624  0118BC  0E00               	movlw	0
  4625  0118BE  6E0C               	movwf	___lldiv@quotient+3,c
  4626  0118C0  5005               	movf	___lldiv@divisor,w,c
  4627  0118C2  1006               	iorwf	___lldiv@divisor+1,w,c
  4628  0118C4  1007               	iorwf	___lldiv@divisor+2,w,c
  4629  0118C6  1008               	iorwf	___lldiv@divisor+3,w,c
  4630  0118C8  B4D8               	btfsc	status,2,c
  4631  0118CA  D02A               	goto	l856
  4632  0118CC  0E01               	movlw	1
  4633  0118CE  6E0D               	movwf	___lldiv@counter,c
  4634  0118D0  D006               	goto	l3382
  4635  0118D2                     l3380:
  4636  0118D2  90D8               	bcf	status,0,c
  4637  0118D4  3605               	rlcf	___lldiv@divisor,f,c
  4638  0118D6  3606               	rlcf	___lldiv@divisor+1,f,c
  4639  0118D8  3607               	rlcf	___lldiv@divisor+2,f,c
  4640  0118DA  3608               	rlcf	___lldiv@divisor+3,f,c
  4641  0118DC  2A0D               	incf	___lldiv@counter,f,c
  4642  0118DE                     l3382:
  4643  0118DE  AE08               	btfss	___lldiv@divisor+3,7,c
  4644  0118E0  D7F8               	goto	l3380
  4645  0118E2                     l3384:
  4646  0118E2  90D8               	bcf	status,0,c
  4647  0118E4  3609               	rlcf	___lldiv@quotient,f,c
  4648  0118E6  360A               	rlcf	___lldiv@quotient+1,f,c
  4649  0118E8  360B               	rlcf	___lldiv@quotient+2,f,c
  4650  0118EA  360C               	rlcf	___lldiv@quotient+3,f,c
  4651  0118EC  5005               	movf	___lldiv@divisor,w,c
  4652  0118EE  5C01               	subwf	___lldiv@dividend,w,c
  4653  0118F0  5006               	movf	___lldiv@divisor+1,w,c
  4654  0118F2  5802               	subwfb	___lldiv@dividend+1,w,c
  4655  0118F4  5007               	movf	___lldiv@divisor+2,w,c
  4656  0118F6  5803               	subwfb	___lldiv@dividend+2,w,c
  4657  0118F8  5008               	movf	___lldiv@divisor+3,w,c
  4658  0118FA  5804               	subwfb	___lldiv@dividend+3,w,c
  4659  0118FC  A0D8               	btfss	status,0,c
  4660  0118FE  D009               	goto	l3392
  4661  011900  5005               	movf	___lldiv@divisor,w,c
  4662  011902  5E01               	subwf	___lldiv@dividend,f,c
  4663  011904  5006               	movf	___lldiv@divisor+1,w,c
  4664  011906  5A02               	subwfb	___lldiv@dividend+1,f,c
  4665  011908  5007               	movf	___lldiv@divisor+2,w,c
  4666  01190A  5A03               	subwfb	___lldiv@dividend+2,f,c
  4667  01190C  5008               	movf	___lldiv@divisor+3,w,c
  4668  01190E  5A04               	subwfb	___lldiv@dividend+3,f,c
  4669  011910  8009               	bsf	___lldiv@quotient,0,c
  4670  011912                     l3392:
  4671  011912  90D8               	bcf	status,0,c
  4672  011914  3208               	rrcf	___lldiv@divisor+3,f,c
  4673  011916  3207               	rrcf	___lldiv@divisor+2,f,c
  4674  011918  3206               	rrcf	___lldiv@divisor+1,f,c
  4675  01191A  3205               	rrcf	___lldiv@divisor,f,c
  4676  01191C  2E0D               	decfsz	___lldiv@counter,f,c
  4677  01191E  D7E1               	goto	l3384
  4678  011920                     l856:
  4679  011920  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4680  011924  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4681  011928  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4682  01192C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4683  011930  0012               	return		;funcret
  4684  011932                     __end_of___lldiv:
  4685                           	opt stack 0
  4686                           tblptru	equ	0xFF8
  4687                           tblptrh	equ	0xFF7
  4688                           tblptrl	equ	0xFF6
  4689                           tablat	equ	0xFF5
  4690                           prodh	equ	0xFF4
  4691                           prodl	equ	0xFF3
  4692                           postinc0	equ	0xFEE
  4693                           wreg	equ	0xFE8
  4694                           postdec1	equ	0xFE5
  4695                           fsr1l	equ	0xFE1
  4696                           indf2	equ	0xFDF
  4697                           postinc2	equ	0xFDE
  4698                           postdec2	equ	0xFDD
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function ___fttol *****************
  4704 ;; Defined at:
  4705 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  f1              3   42[COMRAM] float 
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;  lval            4   52[COMRAM] unsigned long 
  4710 ;;  exp1            1   56[COMRAM] unsigned char 
  4711 ;;  sign1           1   51[COMRAM] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  4   42[COMRAM] long 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4721 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;Total ram usage:       15 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; This function calls:
  4728 ;;		Nothing
  4729 ;; This function is called by:
  4730 ;;		_sprintf
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           	psect	text14
  4735  011484                     __ptext14:
  4736                           	opt stack 0
  4737  011484                     ___fttol:
  4738                           	opt stack 29
  4739                           
  4740                           ;incstack = 0
  4741  011484  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4742  011488  6A30               	clrf	(??___fttol+1)& (0+255),c
  4743  01148A  6A31               	clrf	(??___fttol+2)& (0+255),c
  4744  01148C  342C               	rlcf	___fttol@f1+1,w,c
  4745  01148E  362F               	rlcf	??___fttol& (0+255),f,c
  4746  011490  E301               	bnc	u3221
  4747  011492  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4748  011494                     u3221:
  4749  011494  502F               	movf	??___fttol,w,c
  4750  011496  6E39               	movwf	___fttol@exp1,c
  4751  011498  5039               	movf	___fttol@exp1,w,c
  4752  01149A  A4D8               	btfss	status,2,c
  4753  01149C  D009               	goto	l3334
  4754  01149E  0E00               	movlw	0
  4755  0114A0  6E2B               	movwf	?___fttol,c
  4756  0114A2  0E00               	movlw	0
  4757  0114A4  6E2C               	movwf	?___fttol+1,c
  4758  0114A6  0E00               	movlw	0
  4759  0114A8  6E2D               	movwf	?___fttol+2,c
  4760  0114AA  0E00               	movlw	0
  4761  0114AC  6E2E               	movwf	?___fttol+3,c
  4762  0114AE  0012               	return	
  4763  0114B0                     l3334:
  4764  0114B0  0E17               	movlw	23
  4765  0114B2  6E2F               	movwf	??___fttol& (0+255),c
  4766  0114B4  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4767  0114B8  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4768  0114BC  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4769  0114C0  282F               	incf	??___fttol,w,c
  4770  0114C2  6E33               	movwf	(??___fttol+4)& (0+255),c
  4771  0114C4  D004               	goto	u3240
  4772  0114C6                     u3245:
  4773  0114C6  90D8               	bcf	status,0,c
  4774  0114C8  3232               	rrcf	??___fttol+3,f,c
  4775  0114CA  3231               	rrcf	??___fttol+2,f,c
  4776  0114CC  3230               	rrcf	??___fttol+1,f,c
  4777  0114CE                     u3240:
  4778  0114CE  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4779  0114D0  D7FA               	goto	u3245
  4780  0114D2  5030               	movf	??___fttol+1,w,c
  4781  0114D4  6E34               	movwf	___fttol@sign1,c
  4782  0114D6  8E2C               	bsf	___fttol@f1+1,7,c
  4783  0114D8  0EFF               	movlw	255
  4784  0114DA  162B               	andwf	___fttol@f1,f,c
  4785  0114DC  0EFF               	movlw	255
  4786  0114DE  162C               	andwf	___fttol@f1+1,f,c
  4787  0114E0  0E00               	movlw	0
  4788  0114E2  162D               	andwf	___fttol@f1+2,f,c
  4789  0114E4  502B               	movf	___fttol@f1,w,c
  4790  0114E6  6E35               	movwf	___fttol@lval,c
  4791  0114E8  502C               	movf	___fttol@f1+1,w,c
  4792  0114EA  6E36               	movwf	___fttol@lval+1,c
  4793  0114EC  502D               	movf	___fttol@f1+2,w,c
  4794  0114EE  6E37               	movwf	___fttol@lval+2,c
  4795  0114F0  6A38               	clrf	___fttol@lval+3,c
  4796  0114F2  0E8E               	movlw	142
  4797  0114F4  5E39               	subwf	___fttol@exp1,f,c
  4798  0114F6  AE39               	btfss	___fttol@exp1,7,c
  4799  0114F8  D016               	goto	l3356
  4800  0114FA  5039               	movf	___fttol@exp1,w,c
  4801  0114FC  0A80               	xorlw	128
  4802  0114FE  0F8F               	addlw	143
  4803  011500  B0D8               	btfsc	status,0,c
  4804  011502  D009               	goto	l3352
  4805  011504  0E00               	movlw	0
  4806  011506  6E2B               	movwf	?___fttol,c
  4807  011508  0E00               	movlw	0
  4808  01150A  6E2C               	movwf	?___fttol+1,c
  4809  01150C  0E00               	movlw	0
  4810  01150E  6E2D               	movwf	?___fttol+2,c
  4811  011510  0E00               	movlw	0
  4812  011512  6E2E               	movwf	?___fttol+3,c
  4813  011514  0012               	return	
  4814  011516                     l3352:
  4815  011516  90D8               	bcf	status,0,c
  4816  011518  3238               	rrcf	___fttol@lval+3,f,c
  4817  01151A  3237               	rrcf	___fttol@lval+2,f,c
  4818  01151C  3236               	rrcf	___fttol@lval+1,f,c
  4819  01151E  3235               	rrcf	___fttol@lval,f,c
  4820  011520  3E39               	incfsz	___fttol@exp1,f,c
  4821  011522  D7F9               	goto	l3352
  4822  011524  D015               	goto	l3366
  4823  011526                     l3356:
  4824  011526  0E17               	movlw	23
  4825  011528  6439               	cpfsgt	___fttol@exp1,c
  4826  01152A  D00F               	goto	l3364
  4827  01152C  0E00               	movlw	0
  4828  01152E  6E2B               	movwf	?___fttol,c
  4829  011530  0E00               	movlw	0
  4830  011532  6E2C               	movwf	?___fttol+1,c
  4831  011534  0E00               	movlw	0
  4832  011536  6E2D               	movwf	?___fttol+2,c
  4833  011538  0E00               	movlw	0
  4834  01153A  6E2E               	movwf	?___fttol+3,c
  4835  01153C  0012               	return	
  4836  01153E                     l3362:
  4837  01153E  90D8               	bcf	status,0,c
  4838  011540  3635               	rlcf	___fttol@lval,f,c
  4839  011542  3636               	rlcf	___fttol@lval+1,f,c
  4840  011544  3637               	rlcf	___fttol@lval+2,f,c
  4841  011546  3638               	rlcf	___fttol@lval+3,f,c
  4842  011548  0639               	decf	___fttol@exp1,f,c
  4843  01154A                     l3364:
  4844  01154A  5039               	movf	___fttol@exp1,w,c
  4845  01154C  A4D8               	btfss	status,2,c
  4846  01154E  D7F7               	goto	l3362
  4847  011550                     l3366:
  4848  011550  5034               	movf	___fttol@sign1,w,c
  4849  011552  B4D8               	btfsc	status,2,c
  4850  011554  D008               	goto	l3370
  4851  011556  1E38               	comf	___fttol@lval+3,f,c
  4852  011558  1E37               	comf	___fttol@lval+2,f,c
  4853  01155A  1E36               	comf	___fttol@lval+1,f,c
  4854  01155C  6C35               	negf	___fttol@lval,c
  4855  01155E  0E00               	movlw	0
  4856  011560  2236               	addwfc	___fttol@lval+1,f,c
  4857  011562  2237               	addwfc	___fttol@lval+2,f,c
  4858  011564  2238               	addwfc	___fttol@lval+3,f,c
  4859  011566                     l3370:
  4860  011566  C035  F02B         	movff	___fttol@lval,?___fttol
  4861  01156A  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4862  01156E  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4863  011572  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4864  011576  0012               	return	
  4865  011578                     __end_of___fttol:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           postinc0	equ	0xFEE
  4874                           wreg	equ	0xFE8
  4875                           postdec1	equ	0xFE5
  4876                           fsr1l	equ	0xFE1
  4877                           indf2	equ	0xFDF
  4878                           postinc2	equ	0xFDE
  4879                           postdec2	equ	0xFDD
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8
  4883                           
  4884 ;; *************** function ___ftsub *****************
  4885 ;; Defined at:
  4886 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  f1              3   57[COMRAM] float 
  4889 ;;  f2              3   60[COMRAM] float 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;		None
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  3   57[COMRAM] float 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4901 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;Total ram usage:        6 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    2
  4908 ;; This function calls:
  4909 ;;		___ftadd
  4910 ;; This function is called by:
  4911 ;;		_sprintf
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text15
  4916  011C62                     __ptext15:
  4917                           	opt stack 0
  4918  011C62                     ___ftsub:
  4919                           	opt stack 27
  4920                           
  4921                           ;incstack = 0
  4922  011C62  503D               	movf	___ftsub@f2,w,c
  4923  011C64  103E               	iorwf	___ftsub@f2+1,w,c
  4924  011C66  103F               	iorwf	___ftsub@f2+2,w,c
  4925  011C68  B4D8               	btfsc	status,2,c
  4926  011C6A  D006               	goto	l3290
  4927  011C6C  0E00               	movlw	0
  4928  011C6E  1A3D               	xorwf	___ftsub@f2,f,c
  4929  011C70  0E00               	movlw	0
  4930  011C72  1A3E               	xorwf	___ftsub@f2+1,f,c
  4931  011C74  0E80               	movlw	128
  4932  011C76  1A3F               	xorwf	___ftsub@f2+2,f,c
  4933  011C78                     l3290:
  4934  011C78  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4935  011C7C  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4936  011C80  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4937  011C84  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4938  011C88  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4939  011C8C  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4940  011C90  EC45  F087         	call	___ftadd	;wreg free
  4941  011C94  C02E  F03A         	movff	?___ftadd,?___ftsub
  4942  011C98  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4943  011C9C  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4944  011CA0  0012               	return	
  4945  011CA2                     __end_of___ftsub:
  4946                           	opt stack 0
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postdec1	equ	0xFE5
  4956                           fsr1l	equ	0xFE1
  4957                           indf2	equ	0xFDF
  4958                           postinc2	equ	0xFDE
  4959                           postdec2	equ	0xFDD
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function ___ftadd *****************
  4965 ;; Defined at:
  4966 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  f1              3   45[COMRAM] float 
  4969 ;;  f2              3   48[COMRAM] float 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  exp1            1   56[COMRAM] unsigned char 
  4972 ;;  exp2            1   55[COMRAM] unsigned char 
  4973 ;;  sign            1   54[COMRAM] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  3   45[COMRAM] float 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4983 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;Total ram usage:       12 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    1
  4990 ;; This function calls:
  4991 ;;		___ftpack
  4992 ;; This function is called by:
  4993 ;;		_sprintf
  4994 ;;		___ftsub
  4995 ;;		_ReadDS18B20
  4996 ;;		_ReadDS18B20PAR
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text16
  5001  010E8A                     __ptext16:
  5002                           	opt stack 0
  5003  010E8A                     ___ftadd:
  5004                           	opt stack 27
  5005                           
  5006                           ;incstack = 0
  5007  010E8A  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5008  010E8E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5009  010E90  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5010  010E92  342F               	rlcf	___ftadd@f1+1,w,c
  5011  010E94  3634               	rlcf	??___ftadd& (0+255),f,c
  5012  010E96  E301               	bnc	u2361
  5013  010E98  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5014  010E9A                     u2361:
  5015  010E9A  5034               	movf	??___ftadd,w,c
  5016  010E9C  6E39               	movwf	___ftadd@exp1,c
  5017  010E9E  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5018  010EA2  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5019  010EA4  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5020  010EA6  3432               	rlcf	___ftadd@f2+1,w,c
  5021  010EA8  3634               	rlcf	??___ftadd& (0+255),f,c
  5022  010EAA  E301               	bnc	u2371
  5023  010EAC  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5024  010EAE                     u2371:
  5025  010EAE  5034               	movf	??___ftadd,w,c
  5026  010EB0  6E38               	movwf	___ftadd@exp2,c
  5027  010EB2  5039               	movf	___ftadd@exp1,w,c
  5028  010EB4  B4D8               	btfsc	status,2,c
  5029  010EB6  D00B               	goto	l732
  5030  010EB8  5038               	movf	___ftadd@exp2,w,c
  5031  010EBA  5C39               	subwf	___ftadd@exp1,w,c
  5032  010EBC  B0D8               	btfsc	status,0,c
  5033  010EBE  D00E               	goto	l2788
  5034  010EC0  5039               	movf	___ftadd@exp1,w,c
  5035  010EC2  0800               	sublw	0
  5036  010EC4  2438               	addwf	___ftadd@exp2,w,c
  5037  010EC6  6E34               	movwf	??___ftadd& (0+255),c
  5038  010EC8  0E18               	movlw	24
  5039  010ECA  6434               	cpfsgt	??___ftadd,c
  5040  010ECC  D007               	goto	l2788
  5041  010ECE                     l732:
  5042  010ECE  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5043  010ED2  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5044  010ED6  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5045  010EDA  0012               	return	
  5046  010EDC                     l2788:
  5047  010EDC  5038               	movf	___ftadd@exp2,w,c
  5048  010EDE  B4D8               	btfsc	status,2,c
  5049  010EE0  D00B               	goto	l736
  5050  010EE2  5039               	movf	___ftadd@exp1,w,c
  5051  010EE4  5C38               	subwf	___ftadd@exp2,w,c
  5052  010EE6  B0D8               	btfsc	status,0,c
  5053  010EE8  D00E               	goto	l2794
  5054  010EEA  5038               	movf	___ftadd@exp2,w,c
  5055  010EEC  0800               	sublw	0
  5056  010EEE  2439               	addwf	___ftadd@exp1,w,c
  5057  010EF0  6E34               	movwf	??___ftadd& (0+255),c
  5058  010EF2  0E18               	movlw	24
  5059  010EF4  6434               	cpfsgt	??___ftadd,c
  5060  010EF6  D007               	goto	l2794
  5061  010EF8                     l736:
  5062  010EF8  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5063  010EFC  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5064  010F00  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5065  010F04  0012               	return	
  5066  010F06                     l2794:
  5067  010F06  0E06               	movlw	6
  5068  010F08  6E37               	movwf	___ftadd@sign,c
  5069  010F0A  BE30               	btfsc	___ftadd@f1+2,7,c
  5070  010F0C  8E37               	bsf	___ftadd@sign,7,c
  5071  010F0E  BE33               	btfsc	___ftadd@f2+2,7,c
  5072  010F10  8C37               	bsf	___ftadd@sign,6,c
  5073  010F12  8E2F               	bsf	___ftadd@f1+1,7,c
  5074  010F14  0EFF               	movlw	255
  5075  010F16  162E               	andwf	___ftadd@f1,f,c
  5076  010F18  0EFF               	movlw	255
  5077  010F1A  162F               	andwf	___ftadd@f1+1,f,c
  5078  010F1C  0E00               	movlw	0
  5079  010F1E  1630               	andwf	___ftadd@f1+2,f,c
  5080  010F20  8E32               	bsf	___ftadd@f2+1,7,c
  5081  010F22  0EFF               	movlw	255
  5082  010F24  1631               	andwf	___ftadd@f2,f,c
  5083  010F26  0EFF               	movlw	255
  5084  010F28  1632               	andwf	___ftadd@f2+1,f,c
  5085  010F2A  0E00               	movlw	0
  5086  010F2C  1633               	andwf	___ftadd@f2+2,f,c
  5087  010F2E  5038               	movf	___ftadd@exp2,w,c
  5088  010F30  5C39               	subwf	___ftadd@exp1,w,c
  5089  010F32  B0D8               	btfsc	status,0,c
  5090  010F34  D01B               	goto	l2820
  5091  010F36                     l2810:
  5092  010F36  90D8               	bcf	status,0,c
  5093  010F38  3631               	rlcf	___ftadd@f2,f,c
  5094  010F3A  3632               	rlcf	___ftadd@f2+1,f,c
  5095  010F3C  3633               	rlcf	___ftadd@f2+2,f,c
  5096  010F3E  0638               	decf	___ftadd@exp2,f,c
  5097  010F40  5039               	movf	___ftadd@exp1,w,c
  5098  010F42  1838               	xorwf	___ftadd@exp2,w,c
  5099  010F44  B4D8               	btfsc	status,2,c
  5100  010F46  D00D               	goto	l2818
  5101  010F48  0637               	decf	___ftadd@sign,f,c
  5102  010F4A  C037  F034         	movff	___ftadd@sign,??___ftadd
  5103  010F4E  0E07               	movlw	7
  5104  010F50  1634               	andwf	??___ftadd,f,c
  5105  010F52  B4D8               	btfsc	status,2,c
  5106  010F54  D006               	goto	l2818
  5107  010F56  D7EF               	goto	l2810
  5108  010F58                     l2816:
  5109  010F58  90D8               	bcf	status,0,c
  5110  010F5A  3230               	rrcf	___ftadd@f1+2,f,c
  5111  010F5C  322F               	rrcf	___ftadd@f1+1,f,c
  5112  010F5E  322E               	rrcf	___ftadd@f1,f,c
  5113  010F60  2A39               	incf	___ftadd@exp1,f,c
  5114  010F62                     l2818:
  5115  010F62  5038               	movf	___ftadd@exp2,w,c
  5116  010F64  1839               	xorwf	___ftadd@exp1,w,c
  5117  010F66  B4D8               	btfsc	status,2,c
  5118  010F68  D01F               	goto	l747
  5119  010F6A  D7F6               	goto	l2816
  5120  010F6C                     l2820:
  5121  010F6C  5039               	movf	___ftadd@exp1,w,c
  5122  010F6E  5C38               	subwf	___ftadd@exp2,w,c
  5123  010F70  B0D8               	btfsc	status,0,c
  5124  010F72  D01A               	goto	l747
  5125  010F74                     l2822:
  5126  010F74  90D8               	bcf	status,0,c
  5127  010F76  362E               	rlcf	___ftadd@f1,f,c
  5128  010F78  362F               	rlcf	___ftadd@f1+1,f,c
  5129  010F7A  3630               	rlcf	___ftadd@f1+2,f,c
  5130  010F7C  0639               	decf	___ftadd@exp1,f,c
  5131  010F7E  5039               	movf	___ftadd@exp1,w,c
  5132  010F80  1838               	xorwf	___ftadd@exp2,w,c
  5133  010F82  B4D8               	btfsc	status,2,c
  5134  010F84  D00D               	goto	l2830
  5135  010F86  0637               	decf	___ftadd@sign,f,c
  5136  010F88  C037  F034         	movff	___ftadd@sign,??___ftadd
  5137  010F8C  0E07               	movlw	7
  5138  010F8E  1634               	andwf	??___ftadd,f,c
  5139  010F90  B4D8               	btfsc	status,2,c
  5140  010F92  D006               	goto	l2830
  5141  010F94  D7EF               	goto	l2822
  5142  010F96                     l2828:
  5143  010F96  90D8               	bcf	status,0,c
  5144  010F98  3233               	rrcf	___ftadd@f2+2,f,c
  5145  010F9A  3232               	rrcf	___ftadd@f2+1,f,c
  5146  010F9C  3231               	rrcf	___ftadd@f2,f,c
  5147  010F9E  2A38               	incf	___ftadd@exp2,f,c
  5148  010FA0                     l2830:
  5149  010FA0  5038               	movf	___ftadd@exp2,w,c
  5150  010FA2  1839               	xorwf	___ftadd@exp1,w,c
  5151  010FA4  A4D8               	btfss	status,2,c
  5152  010FA6  D7F7               	goto	l2828
  5153  010FA8                     l747:
  5154  010FA8  AE37               	btfss	___ftadd@sign,7,c
  5155  010FAA  D00C               	goto	l756
  5156  010FAC  0EFF               	movlw	255
  5157  010FAE  1A2E               	xorwf	___ftadd@f1,f,c
  5158  010FB0  0EFF               	movlw	255
  5159  010FB2  1A2F               	xorwf	___ftadd@f1+1,f,c
  5160  010FB4  0EFF               	movlw	255
  5161  010FB6  1A30               	xorwf	___ftadd@f1+2,f,c
  5162  010FB8  0E01               	movlw	1
  5163  010FBA  262E               	addwf	___ftadd@f1,f,c
  5164  010FBC  0E00               	movlw	0
  5165  010FBE  222F               	addwfc	___ftadd@f1+1,f,c
  5166  010FC0  0E00               	movlw	0
  5167  010FC2  2230               	addwfc	___ftadd@f1+2,f,c
  5168  010FC4                     l756:
  5169  010FC4  AC37               	btfss	___ftadd@sign,6,c
  5170  010FC6  D00C               	goto	l2836
  5171  010FC8  0EFF               	movlw	255
  5172  010FCA  1A31               	xorwf	___ftadd@f2,f,c
  5173  010FCC  0EFF               	movlw	255
  5174  010FCE  1A32               	xorwf	___ftadd@f2+1,f,c
  5175  010FD0  0EFF               	movlw	255
  5176  010FD2  1A33               	xorwf	___ftadd@f2+2,f,c
  5177  010FD4  0E01               	movlw	1
  5178  010FD6  2631               	addwf	___ftadd@f2,f,c
  5179  010FD8  0E00               	movlw	0
  5180  010FDA  2232               	addwfc	___ftadd@f2+1,f,c
  5181  010FDC  0E00               	movlw	0
  5182  010FDE  2233               	addwfc	___ftadd@f2+2,f,c
  5183  010FE0                     l2836:
  5184  010FE0  0E00               	movlw	0
  5185  010FE2  6E37               	movwf	___ftadd@sign,c
  5186  010FE4  502E               	movf	___ftadd@f1,w,c
  5187  010FE6  2631               	addwf	___ftadd@f2,f,c
  5188  010FE8  502F               	movf	___ftadd@f1+1,w,c
  5189  010FEA  2232               	addwfc	___ftadd@f2+1,f,c
  5190  010FEC  5030               	movf	___ftadd@f1+2,w,c
  5191  010FEE  2233               	addwfc	___ftadd@f2+2,f,c
  5192  010FF0  AE33               	btfss	___ftadd@f2+2,7,c
  5193  010FF2  D00E               	goto	l2846
  5194  010FF4  0EFF               	movlw	255
  5195  010FF6  1A31               	xorwf	___ftadd@f2,f,c
  5196  010FF8  0EFF               	movlw	255
  5197  010FFA  1A32               	xorwf	___ftadd@f2+1,f,c
  5198  010FFC  0EFF               	movlw	255
  5199  010FFE  1A33               	xorwf	___ftadd@f2+2,f,c
  5200  011000  0E01               	movlw	1
  5201  011002  2631               	addwf	___ftadd@f2,f,c
  5202  011004  0E00               	movlw	0
  5203  011006  2232               	addwfc	___ftadd@f2+1,f,c
  5204  011008  0E00               	movlw	0
  5205  01100A  2233               	addwfc	___ftadd@f2+2,f,c
  5206  01100C  0E01               	movlw	1
  5207  01100E  6E37               	movwf	___ftadd@sign,c
  5208  011010                     l2846:
  5209  011010  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5210  011014  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5211  011018  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5212  01101C  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5213  011020  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5214  011024  EC2F  F08B         	call	___ftpack	;wreg free
  5215  011028  C001  F02E         	movff	?___ftpack,?___ftadd
  5216  01102C  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5217  011030  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5218  011034  0012               	return	
  5219  011036                     __end_of___ftadd:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           fsr1l	equ	0xFE1
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           fsr2h	equ	0xFDA
  5235                           fsr2l	equ	0xFD9
  5236                           status	equ	0xFD8
  5237                           
  5238 ;; *************** function ___ftneg *****************
  5239 ;; Defined at:
  5240 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  f1              3    0[COMRAM] float 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  3    0[COMRAM] float 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5254 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;Total ram usage:        3 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		_sprintf
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text17
  5268  011E74                     __ptext17:
  5269                           	opt stack 0
  5270  011E74                     ___ftneg:
  5271                           	opt stack 29
  5272                           
  5273                           ;incstack = 0
  5274  011E74  5001               	movf	___ftneg@f1,w,c
  5275  011E76  1002               	iorwf	___ftneg@f1+1,w,c
  5276  011E78  1003               	iorwf	___ftneg@f1+2,w,c
  5277  011E7A  B4D8               	btfsc	status,2,c
  5278  011E7C  D006               	goto	l806
  5279  011E7E  0E00               	movlw	0
  5280  011E80  1A01               	xorwf	___ftneg@f1,f,c
  5281  011E82  0E00               	movlw	0
  5282  011E84  1A02               	xorwf	___ftneg@f1+1,f,c
  5283  011E86  0E80               	movlw	128
  5284  011E88  1A03               	xorwf	___ftneg@f1+2,f,c
  5285  011E8A                     l806:
  5286  011E8A  C001  F001         	movff	___ftneg@f1,?___ftneg
  5287  011E8E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5288  011E92  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5289  011E96  0012               	return		;funcret
  5290  011E98                     __end_of___ftneg:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           postinc0	equ	0xFEE
  5299                           wreg	equ	0xFE8
  5300                           postdec1	equ	0xFE5
  5301                           fsr1l	equ	0xFE1
  5302                           indf2	equ	0xFDF
  5303                           postinc2	equ	0xFDE
  5304                           postdec2	equ	0xFDD
  5305                           fsr2h	equ	0xFDA
  5306                           fsr2l	equ	0xFD9
  5307                           status	equ	0xFD8
  5308                           
  5309 ;; *************** function ___ftge *****************
  5310 ;; Defined at:
  5311 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  ff1             3    0[COMRAM] float 
  5314 ;;  ff2             3    3[COMRAM] float 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5326 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;Total ram usage:        9 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; This function calls:
  5333 ;;		Nothing
  5334 ;; This function is called by:
  5335 ;;		_sprintf
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text18
  5340  01170C                     __ptext18:
  5341                           	opt stack 0
  5342  01170C                     ___ftge:
  5343                           	opt stack 29
  5344                           
  5345                           ;incstack = 0
  5346  01170C  AE03               	btfss	___ftge@ff1+2,7,c
  5347  01170E  D016               	goto	l3310
  5348  011710  C001  F007         	movff	___ftge@ff1,??___ftge
  5349  011714  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5350  011718  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5351  01171C  1E07               	comf	??___ftge,f,c
  5352  01171E  1E08               	comf	??___ftge+1,f,c
  5353  011720  1E09               	comf	??___ftge+2,f,c
  5354  011722  2A07               	incf	??___ftge,f,c
  5355  011724  0E00               	movlw	0
  5356  011726  2208               	addwfc	??___ftge+1,f,c
  5357  011728  2209               	addwfc	??___ftge+2,f,c
  5358  01172A  0E00               	movlw	0
  5359  01172C  2407               	addwf	??___ftge,w,c
  5360  01172E  6E01               	movwf	___ftge@ff1,c
  5361  011730  0E00               	movlw	0
  5362  011732  2008               	addwfc	??___ftge+1,w,c
  5363  011734  6E02               	movwf	___ftge@ff1+1,c
  5364  011736  0E80               	movlw	128
  5365  011738  2009               	addwfc	??___ftge+2,w,c
  5366  01173A  6E03               	movwf	___ftge@ff1+2,c
  5367  01173C                     l3310:
  5368  01173C  AE06               	btfss	___ftge@ff2+2,7,c
  5369  01173E  D016               	goto	l3314
  5370  011740  C004  F007         	movff	___ftge@ff2,??___ftge
  5371  011744  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5372  011748  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5373  01174C  1E07               	comf	??___ftge,f,c
  5374  01174E  1E08               	comf	??___ftge+1,f,c
  5375  011750  1E09               	comf	??___ftge+2,f,c
  5376  011752  2A07               	incf	??___ftge,f,c
  5377  011754  0E00               	movlw	0
  5378  011756  2208               	addwfc	??___ftge+1,f,c
  5379  011758  2209               	addwfc	??___ftge+2,f,c
  5380  01175A  0E00               	movlw	0
  5381  01175C  2407               	addwf	??___ftge,w,c
  5382  01175E  6E04               	movwf	___ftge@ff2,c
  5383  011760  0E00               	movlw	0
  5384  011762  2008               	addwfc	??___ftge+1,w,c
  5385  011764  6E05               	movwf	___ftge@ff2+1,c
  5386  011766  0E80               	movlw	128
  5387  011768  2009               	addwfc	??___ftge+2,w,c
  5388  01176A  6E06               	movwf	___ftge@ff2+2,c
  5389  01176C                     l3314:
  5390  01176C  0E00               	movlw	0
  5391  01176E  1A01               	xorwf	___ftge@ff1,f,c
  5392  011770  0E00               	movlw	0
  5393  011772  1A02               	xorwf	___ftge@ff1+1,f,c
  5394  011774  0E80               	movlw	128
  5395  011776  1A03               	xorwf	___ftge@ff1+2,f,c
  5396  011778  0E00               	movlw	0
  5397  01177A  1A04               	xorwf	___ftge@ff2,f,c
  5398  01177C  0E00               	movlw	0
  5399  01177E  1A05               	xorwf	___ftge@ff2+1,f,c
  5400  011780  0E80               	movlw	128
  5401  011782  1A06               	xorwf	___ftge@ff2+2,f,c
  5402  011784  5004               	movf	___ftge@ff2,w,c
  5403  011786  5C01               	subwf	___ftge@ff1,w,c
  5404  011788  5005               	movf	___ftge@ff2+1,w,c
  5405  01178A  5802               	subwfb	___ftge@ff1+1,w,c
  5406  01178C  5006               	movf	___ftge@ff2+2,w,c
  5407  01178E  5803               	subwfb	___ftge@ff1+2,w,c
  5408  011790  B0D8               	btfsc	status,0,c
  5409  011792  D002               	goto	l3320
  5410  011794  90D8               	bcf	status,0,c
  5411  011796  0012               	return	
  5412  011798                     l3320:
  5413  011798  80D8               	bsf	status,0,c
  5414  01179A  0012               	return	
  5415  01179C                     __end_of___ftge:
  5416                           	opt stack 0
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           prodh	equ	0xFF4
  5422                           prodl	equ	0xFF3
  5423                           postinc0	equ	0xFEE
  5424                           wreg	equ	0xFE8
  5425                           postdec1	equ	0xFE5
  5426                           fsr1l	equ	0xFE1
  5427                           indf2	equ	0xFDF
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function _ReadDS18S20PAR *****************
  5435 ;; Defined at:
  5436 ;;		line 41 in file "DS18x20.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  rc              2   27[COMRAM] PTR struct .
  5439 ;;		 -> NULL(0), 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  sp              9   32[COMRAM] struct .
  5442 ;;  i               1   31[COMRAM] unsigned char 
  5443 ;; Return value:  Size  Location     Type
  5444 ;;                  3   27[COMRAM] unsigned char 
  5445 ;; Registers used:
  5446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5452 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;Total ram usage:       14 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:    2
  5459 ;; This function calls:
  5460 ;;		_OWCRC
  5461 ;;		_OWReadBytes
  5462 ;;		_OWReset
  5463 ;;		_OWWriteByte
  5464 ;;		_OWWriteBytes
  5465 ;;		___awtoft
  5466 ;;		___ftdiv
  5467 ;; This function is called by:
  5468 ;;		_main
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           	psect	text19
  5473  011290                     __ptext19:
  5474                           	opt stack 0
  5475  011290                     _ReadDS18S20PAR:
  5476                           	opt stack 28
  5477                           
  5478                           ;DS18x20.c: 42: DS18S20Scratchpad sp;
  5479                           ;DS18x20.c: 43: char i;
  5480                           ;DS18x20.c: 45: OWReset();
  5481                           
  5482                           ;incstack = 0
  5483  011290  EC10  F08E         	call	_OWReset	;wreg free
  5484                           
  5485                           ;DS18x20.c: 46: if (rc == (0)) {
  5486  011294  501C               	movf	ReadDS18S20PAR@rc,w,c
  5487  011296  101D               	iorwf	ReadDS18S20PAR@rc+1,w,c
  5488  011298  A4D8               	btfss	status,2,c
  5489  01129A  D004               	goto	l3456
  5490                           
  5491                           ;DS18x20.c: 47: OWWriteByte(OW_SKIP_ROM);
  5492  01129C  0ECC               	movlw	204
  5493  01129E  ECEE  F08D         	call	_OWWriteByte
  5494                           
  5495                           ;DS18x20.c: 48: } else {
  5496  0112A2  D00D               	goto	l3460
  5497  0112A4                     l3456:
  5498                           
  5499                           ;DS18x20.c: 49: OWWriteByte(OW_MATCH_ROM);
  5500  0112A4  0E55               	movlw	85
  5501  0112A6  ECEE  F08D         	call	_OWWriteByte
  5502                           
  5503                           ;DS18x20.c: 50: OWWriteBytes(rc->bytes, sizeof(OWRomCode));
  5504  0112AA  C01C  F003         	movff	ReadDS18S20PAR@rc,OWWriteBytes@buff
  5505  0112AE  C01D  F004         	movff	ReadDS18S20PAR@rc+1,OWWriteBytes@buff+1
  5506  0112B2  0E00               	movlw	0
  5507  0112B4  6E06               	movwf	OWWriteBytes@len+1,c
  5508  0112B6  0E08               	movlw	8
  5509  0112B8  6E05               	movwf	OWWriteBytes@len,c
  5510  0112BA  ECC6  F08E         	call	_OWWriteBytes	;wreg free
  5511  0112BE                     l3460:
  5512                           
  5513                           ;DS18x20.c: 51: }
  5514                           ;DS18x20.c: 52: OWWriteByte(0x44);
  5515  0112BE  0E44               	movlw	68
  5516  0112C0  ECEE  F08D         	call	_OWWriteByte
  5517                           
  5518                           ;DS18x20.c: 53: LATJbits.LATJ0 = 1; TRISJbits.TRISJ0 = 0;
  5519  0112C4  8091               	bsf	3985,0,c	;volatile
  5520  0112C6  909A               	bcf	3994,0,c	;volatile
  5521                           
  5522                           ;DS18x20.c: 54: for (i = 0; i < 75; ++i) {
  5523  0112C8  0E00               	movlw	0
  5524  0112CA  6E20               	movwf	ReadDS18S20PAR@i,c
  5525  0112CC                     l3468:
  5526  0112CC  0E4A               	movlw	74
  5527  0112CE  6420               	cpfsgt	ReadDS18S20PAR@i,c
  5528  0112D0  D001               	goto	l3472
  5529  0112D2  D009               	goto	l171
  5530  0112D4                     l3472:
  5531                           
  5532                           ;DS18x20.c: 55: _delay((unsigned long)((10)*(40000000L/4000.0)));
  5533  0112D4  0E82               	movlw	130
  5534  0112D6  6E1F               	movwf	??_ReadDS18S20PAR& (0+255),c
  5535  0112D8  0EDE               	movlw	222
  5536  0112DA                     u4307:
  5537  0112DA  2EE8               	decfsz	wreg,f,c
  5538  0112DC  D7FE               	goto	u4307
  5539  0112DE  2E1F               	decfsz	??_ReadDS18S20PAR& (0+255),f,c
  5540  0112E0  D7FC               	goto	u4307
  5541  0112E2  2A20               	incf	ReadDS18S20PAR@i,f,c
  5542  0112E4  D7F3               	goto	l3468
  5543  0112E6                     l171:
  5544                           
  5545                           ;DS18x20.c: 56: }
  5546                           ;DS18x20.c: 57: TRISJbits.TRISJ0 = 1; LATJbits.LATJ0 = 0;;
  5547  0112E6  809A               	bsf	3994,0,c	;volatile
  5548  0112E8  9091               	bcf	3985,0,c	;volatile
  5549                           
  5550                           ;DS18x20.c: 58: OWReset();
  5551  0112EA  EC10  F08E         	call	_OWReset	;wreg free
  5552                           
  5553                           ;DS18x20.c: 59: if (rc == (0)) {
  5554  0112EE  501C               	movf	ReadDS18S20PAR@rc,w,c
  5555  0112F0  101D               	iorwf	ReadDS18S20PAR@rc+1,w,c
  5556  0112F2  A4D8               	btfss	status,2,c
  5557  0112F4  D004               	goto	l3482
  5558                           
  5559                           ;DS18x20.c: 60: OWWriteByte(OW_SKIP_ROM);
  5560  0112F6  0ECC               	movlw	204
  5561  0112F8  ECEE  F08D         	call	_OWWriteByte
  5562                           
  5563                           ;DS18x20.c: 61: } else {
  5564  0112FC  D00D               	goto	l3486
  5565  0112FE                     l3482:
  5566                           
  5567                           ;DS18x20.c: 62: OWWriteByte(OW_MATCH_ROM);
  5568  0112FE  0E55               	movlw	85
  5569  011300  ECEE  F08D         	call	_OWWriteByte
  5570                           
  5571                           ;DS18x20.c: 63: OWWriteBytes(rc->bytes, sizeof(OWRomCode));
  5572  011304  C01C  F003         	movff	ReadDS18S20PAR@rc,OWWriteBytes@buff
  5573  011308  C01D  F004         	movff	ReadDS18S20PAR@rc+1,OWWriteBytes@buff+1
  5574  01130C  0E00               	movlw	0
  5575  01130E  6E06               	movwf	OWWriteBytes@len+1,c
  5576  011310  0E08               	movlw	8
  5577  011312  6E05               	movwf	OWWriteBytes@len,c
  5578  011314  ECC6  F08E         	call	_OWWriteBytes	;wreg free
  5579  011318                     l3486:
  5580                           
  5581                           ;DS18x20.c: 64: }
  5582                           ;DS18x20.c: 65: OWWriteByte(0xBE);
  5583  011318  0EBE               	movlw	190
  5584  01131A  ECEE  F08D         	call	_OWWriteByte
  5585                           
  5586                           ;DS18x20.c: 66: OWReadBytes(sp.bytes, 9);
  5587  01131E  0E21               	movlw	low ReadDS18S20PAR@sp
  5588  011320  6E03               	movwf	OWReadBytes@buff,c
  5589  011322  0E00               	movlw	high ReadDS18S20PAR@sp
  5590  011324  6E04               	movwf	OWReadBytes@buff+1,c
  5591  011326  0E00               	movlw	0
  5592  011328  6E06               	movwf	OWReadBytes@len+1,c
  5593  01132A  0E09               	movlw	9
  5594  01132C  6E05               	movwf	OWReadBytes@len,c
  5595  01132E  ECE1  F08E         	call	_OWReadBytes	;wreg free
  5596                           
  5597                           ;DS18x20.c: 67: if (OWCRC(sp.bytes, 9)) {
  5598  011332  0E21               	movlw	low ReadDS18S20PAR@sp
  5599  011334  6E01               	movwf	OWCRC@buff,c
  5600  011336  0E00               	movlw	high ReadDS18S20PAR@sp
  5601  011338  6E02               	movwf	OWCRC@buff+1,c
  5602  01133A  0E00               	movlw	0
  5603  01133C  6E04               	movwf	OWCRC@len+1,c
  5604  01133E  0E09               	movlw	9
  5605  011340  6E03               	movwf	OWCRC@len,c
  5606  011342  EC3F  F08D         	call	_OWCRC	;wreg free
  5607  011346  0900               	iorlw	0
  5608  011348  B4D8               	btfsc	status,2,c
  5609  01134A  D01B               	goto	l3496
  5610                           
  5611                           ;DS18x20.c: 68: return (sp.temperature / 2.0);
  5612  01134C  C021  F009         	movff	ReadDS18S20PAR@sp,___awtoft@c
  5613  011350  C022  F00A         	movff	ReadDS18S20PAR@sp+1,___awtoft@c+1
  5614  011354  EC8E  F08E         	call	___awtoft	;wreg free
  5615  011358  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5616  01135C  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5617  011360  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5618  011364  0E00               	movlw	0
  5619  011366  6E10               	movwf	___ftdiv@f2,c
  5620  011368  0E00               	movlw	0
  5621  01136A  6E11               	movwf	___ftdiv@f2+1,c
  5622  01136C  0E40               	movlw	64
  5623  01136E  6E12               	movwf	___ftdiv@f2+2,c
  5624  011370  ECBC  F08A         	call	___ftdiv	;wreg free
  5625  011374  C00D  F01C         	movff	?___ftdiv,?_ReadDS18S20PAR
  5626  011378  C00E  F01D         	movff	?___ftdiv+1,?_ReadDS18S20PAR+1
  5627  01137C  C00F  F01E         	movff	?___ftdiv+2,?_ReadDS18S20PAR+2
  5628                           
  5629                           ;DS18x20.c: 69: } else {
  5630  011380  0012               	return	
  5631  011382                     l3496:
  5632                           
  5633                           ;DS18x20.c: 70: return -999.9;
  5634  011382  0EFA               	movlw	250
  5635  011384  6E1C               	movwf	?_ReadDS18S20PAR,c
  5636  011386  0E79               	movlw	121
  5637  011388  6E1D               	movwf	?_ReadDS18S20PAR+1,c
  5638  01138A  0EC4               	movlw	196
  5639  01138C  6E1E               	movwf	?_ReadDS18S20PAR+2,c
  5640  01138E  0012               	return	
  5641  011390                     __end_of_ReadDS18S20PAR:
  5642                           	opt stack 0
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           postinc0	equ	0xFEE
  5650                           wreg	equ	0xFE8
  5651                           postdec1	equ	0xFE5
  5652                           fsr1l	equ	0xFE1
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function ___ftdiv *****************
  5661 ;; Defined at:
  5662 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  f1              3   12[COMRAM] float 
  5665 ;;  f2              3   15[COMRAM] float 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  f3              3   22[COMRAM] float 
  5668 ;;  sign            1   26[COMRAM] unsigned char 
  5669 ;;  exp             1   25[COMRAM] unsigned char 
  5670 ;;  cntr            1   21[COMRAM] unsigned char 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  3   12[COMRAM] float 
  5673 ;; Registers used:
  5674 ;;		wreg, status,2, status,0, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5680 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;Total ram usage:       15 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    1
  5687 ;; This function calls:
  5688 ;;		___ftpack
  5689 ;; This function is called by:
  5690 ;;		_ReadDS18S20PAR
  5691 ;;		_ReadDS18S20
  5692 ;;		_ReadDS18B20
  5693 ;;		_ReadDS18B20PAR
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text20
  5698  011578                     __ptext20:
  5699                           	opt stack 0
  5700  011578                     ___ftdiv:
  5701                           	opt stack 28
  5702                           
  5703                           ;incstack = 0
  5704  011578  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5705  01157C  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5706  01157E  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5707  011580  340E               	rlcf	___ftdiv@f1+1,w,c
  5708  011582  3613               	rlcf	??___ftdiv& (0+255),f,c
  5709  011584  E301               	bnc	u3111
  5710  011586  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5711  011588                     u3111:
  5712  011588  5013               	movf	??___ftdiv,w,c
  5713  01158A  6E1A               	movwf	___ftdiv@exp,c
  5714  01158C  501A               	movf	___ftdiv@exp,w,c
  5715  01158E  A4D8               	btfss	status,2,c
  5716  011590  D007               	goto	l3246
  5717  011592  0E00               	movlw	0
  5718  011594  6E0D               	movwf	?___ftdiv,c
  5719  011596  0E00               	movlw	0
  5720  011598  6E0E               	movwf	?___ftdiv+1,c
  5721  01159A  0E00               	movlw	0
  5722  01159C  6E0F               	movwf	?___ftdiv+2,c
  5723  01159E  0012               	return	
  5724  0115A0                     l3246:
  5725  0115A0  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5726  0115A4  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5727  0115A6  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5728  0115A8  3411               	rlcf	___ftdiv@f2+1,w,c
  5729  0115AA  3613               	rlcf	??___ftdiv& (0+255),f,c
  5730  0115AC  E301               	bnc	u3131
  5731  0115AE  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5732  0115B0                     u3131:
  5733  0115B0  5013               	movf	??___ftdiv,w,c
  5734  0115B2  6E1B               	movwf	___ftdiv@sign,c
  5735  0115B4  501B               	movf	___ftdiv@sign,w,c
  5736  0115B6  A4D8               	btfss	status,2,c
  5737  0115B8  D007               	goto	l3252
  5738  0115BA  0E00               	movlw	0
  5739  0115BC  6E0D               	movwf	?___ftdiv,c
  5740  0115BE  0E00               	movlw	0
  5741  0115C0  6E0E               	movwf	?___ftdiv+1,c
  5742  0115C2  0E00               	movlw	0
  5743  0115C4  6E0F               	movwf	?___ftdiv+2,c
  5744  0115C6  0012               	return	
  5745  0115C8                     l3252:
  5746  0115C8  0E00               	movlw	0
  5747  0115CA  6E17               	movwf	___ftdiv@f3,c
  5748  0115CC  0E00               	movlw	0
  5749  0115CE  6E18               	movwf	___ftdiv@f3+1,c
  5750  0115D0  0E00               	movlw	0
  5751  0115D2  6E19               	movwf	___ftdiv@f3+2,c
  5752  0115D4  501B               	movf	___ftdiv@sign,w,c
  5753  0115D6  0F89               	addlw	137
  5754  0115D8  5E1A               	subwf	___ftdiv@exp,f,c
  5755  0115DA  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5756  0115DE  5012               	movf	___ftdiv@f2+2,w,c
  5757  0115E0  1A1B               	xorwf	___ftdiv@sign,f,c
  5758  0115E2  0E80               	movlw	128
  5759  0115E4  161B               	andwf	___ftdiv@sign,f,c
  5760  0115E6  8E0E               	bsf	___ftdiv@f1+1,7,c
  5761  0115E8  0EFF               	movlw	255
  5762  0115EA  160D               	andwf	___ftdiv@f1,f,c
  5763  0115EC  0EFF               	movlw	255
  5764  0115EE  160E               	andwf	___ftdiv@f1+1,f,c
  5765  0115F0  0E00               	movlw	0
  5766  0115F2  160F               	andwf	___ftdiv@f1+2,f,c
  5767  0115F4  8E11               	bsf	___ftdiv@f2+1,7,c
  5768  0115F6  0EFF               	movlw	255
  5769  0115F8  1610               	andwf	___ftdiv@f2,f,c
  5770  0115FA  0EFF               	movlw	255
  5771  0115FC  1611               	andwf	___ftdiv@f2+1,f,c
  5772  0115FE  0E00               	movlw	0
  5773  011600  1612               	andwf	___ftdiv@f2+2,f,c
  5774  011602  0E18               	movlw	24
  5775  011604  6E16               	movwf	___ftdiv@cntr,c
  5776  011606                     l3272:
  5777  011606  90D8               	bcf	status,0,c
  5778  011608  3617               	rlcf	___ftdiv@f3,f,c
  5779  01160A  3618               	rlcf	___ftdiv@f3+1,f,c
  5780  01160C  3619               	rlcf	___ftdiv@f3+2,f,c
  5781  01160E  5010               	movf	___ftdiv@f2,w,c
  5782  011610  5C0D               	subwf	___ftdiv@f1,w,c
  5783  011612  5011               	movf	___ftdiv@f2+1,w,c
  5784  011614  580E               	subwfb	___ftdiv@f1+1,w,c
  5785  011616  5012               	movf	___ftdiv@f2+2,w,c
  5786  011618  580F               	subwfb	___ftdiv@f1+2,w,c
  5787  01161A  A0D8               	btfss	status,0,c
  5788  01161C  D007               	goto	l767
  5789  01161E  5010               	movf	___ftdiv@f2,w,c
  5790  011620  5E0D               	subwf	___ftdiv@f1,f,c
  5791  011622  5011               	movf	___ftdiv@f2+1,w,c
  5792  011624  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5793  011626  5012               	movf	___ftdiv@f2+2,w,c
  5794  011628  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5795  01162A  8017               	bsf	___ftdiv@f3,0,c
  5796  01162C                     l767:
  5797  01162C  90D8               	bcf	status,0,c
  5798  01162E  360D               	rlcf	___ftdiv@f1,f,c
  5799  011630  360E               	rlcf	___ftdiv@f1+1,f,c
  5800  011632  360F               	rlcf	___ftdiv@f1+2,f,c
  5801  011634  2E16               	decfsz	___ftdiv@cntr,f,c
  5802  011636  D7E7               	goto	l3272
  5803  011638  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5804  01163C  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5805  011640  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5806  011644  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5807  011648  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5808  01164C  EC2F  F08B         	call	___ftpack	;wreg free
  5809  011650  C001  F00D         	movff	?___ftpack,?___ftdiv
  5810  011654  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5811  011658  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5812  01165C  0012               	return	
  5813  01165E                     __end_of___ftdiv:
  5814                           	opt stack 0
  5815                           tblptru	equ	0xFF8
  5816                           tblptrh	equ	0xFF7
  5817                           tblptrl	equ	0xFF6
  5818                           tablat	equ	0xFF5
  5819                           prodh	equ	0xFF4
  5820                           prodl	equ	0xFF3
  5821                           postinc0	equ	0xFEE
  5822                           wreg	equ	0xFE8
  5823                           postdec1	equ	0xFE5
  5824                           fsr1l	equ	0xFE1
  5825                           indf2	equ	0xFDF
  5826                           postinc2	equ	0xFDE
  5827                           postdec2	equ	0xFDD
  5828                           fsr2h	equ	0xFDA
  5829                           fsr2l	equ	0xFD9
  5830                           status	equ	0xFD8
  5831                           
  5832 ;; *************** function ___awtoft *****************
  5833 ;; Defined at:
  5834 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  c               2    8[COMRAM] int 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  sign            1   11[COMRAM] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  3    8[COMRAM] float 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5848 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;Total ram usage:        4 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    1
  5855 ;; This function calls:
  5856 ;;		___ftpack
  5857 ;; This function is called by:
  5858 ;;		_ReadDS18S20PAR
  5859 ;;		_ReadDS18S20
  5860 ;;		_ReadDS18B20
  5861 ;;		_ReadDS18B20PAR
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           	psect	text21
  5866  011D1C                     __ptext21:
  5867                           	opt stack 0
  5868  011D1C                     ___awtoft:
  5869                           	opt stack 28
  5870                           
  5871                           ;incstack = 0
  5872  011D1C  0E00               	movlw	0
  5873  011D1E  6E0C               	movwf	___awtoft@sign,c
  5874  011D20  AE0A               	btfss	___awtoft@c+1,7,c
  5875  011D22  D006               	goto	l3302
  5876  011D24  6C09               	negf	___awtoft@c,c
  5877  011D26  1E0A               	comf	___awtoft@c+1,f,c
  5878  011D28  B0D8               	btfsc	status,0,c
  5879  011D2A  2A0A               	incf	___awtoft@c+1,f,c
  5880  011D2C  0E01               	movlw	1
  5881  011D2E  6E0C               	movwf	___awtoft@sign,c
  5882  011D30                     l3302:
  5883  011D30  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5884  011D34  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5885  011D38  6A03               	clrf	___ftpack@arg+2,c
  5886  011D3A  0E8E               	movlw	142
  5887  011D3C  6E04               	movwf	___ftpack@exp,c
  5888  011D3E  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5889  011D42  EC2F  F08B         	call	___ftpack	;wreg free
  5890  011D46  C001  F009         	movff	?___ftpack,?___awtoft
  5891  011D4A  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5892  011D4E  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5893  011D52  0012               	return	
  5894  011D54                     __end_of___awtoft:
  5895                           	opt stack 0
  5896                           tblptru	equ	0xFF8
  5897                           tblptrh	equ	0xFF7
  5898                           tblptrl	equ	0xFF6
  5899                           tablat	equ	0xFF5
  5900                           prodh	equ	0xFF4
  5901                           prodl	equ	0xFF3
  5902                           postinc0	equ	0xFEE
  5903                           wreg	equ	0xFE8
  5904                           postdec1	equ	0xFE5
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           postinc2	equ	0xFDE
  5908                           postdec2	equ	0xFDD
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function ___ftpack *****************
  5914 ;; Defined at:
  5915 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  arg             3    0[COMRAM] unsigned um
  5918 ;;  exp             1    3[COMRAM] unsigned char 
  5919 ;;  sign            1    4[COMRAM] unsigned char 
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;		None
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  3    0[COMRAM] float 
  5924 ;; Registers used:
  5925 ;;		wreg, status,2, status,0
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5931 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;Total ram usage:        8 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; This function calls:
  5938 ;;		Nothing
  5939 ;; This function is called by:
  5940 ;;		___awtoft
  5941 ;;		___ftadd
  5942 ;;		___ftdiv
  5943 ;;		___ftmul
  5944 ;;		___lltoft
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text22
  5949  01165E                     __ptext22:
  5950                           	opt stack 0
  5951  01165E                     ___ftpack:
  5952                           	opt stack 27
  5953                           
  5954                           ;incstack = 0
  5955  01165E  5004               	movf	___ftpack@exp,w,c
  5956  011660  B4D8               	btfsc	status,2,c
  5957  011662  D005               	goto	l2672
  5958  011664  5001               	movf	___ftpack@arg,w,c
  5959  011666  1002               	iorwf	___ftpack@arg+1,w,c
  5960  011668  1003               	iorwf	___ftpack@arg+2,w,c
  5961  01166A  A4D8               	btfss	status,2,c
  5962  01166C  D00C               	goto	l2678
  5963  01166E                     l2672:
  5964  01166E  0E00               	movlw	0
  5965  011670  6E01               	movwf	?___ftpack,c
  5966  011672  0E00               	movlw	0
  5967  011674  6E02               	movwf	?___ftpack+1,c
  5968  011676  0E00               	movlw	0
  5969  011678  6E03               	movwf	?___ftpack+2,c
  5970  01167A  0012               	return	
  5971  01167C                     l2676:
  5972  01167C  2A04               	incf	___ftpack@exp,f,c
  5973  01167E  90D8               	bcf	status,0,c
  5974  011680  3203               	rrcf	___ftpack@arg+2,f,c
  5975  011682  3202               	rrcf	___ftpack@arg+1,f,c
  5976  011684  3201               	rrcf	___ftpack@arg,f,c
  5977  011686                     l2678:
  5978  011686  0E00               	movlw	0
  5979  011688  1401               	andwf	___ftpack@arg,w,c
  5980  01168A  6E06               	movwf	??___ftpack& (0+255),c
  5981  01168C  0E00               	movlw	0
  5982  01168E  1402               	andwf	___ftpack@arg+1,w,c
  5983  011690  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5984  011692  0EFE               	movlw	254
  5985  011694  1403               	andwf	___ftpack@arg+2,w,c
  5986  011696  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5987  011698  5006               	movf	??___ftpack,w,c
  5988  01169A  1007               	iorwf	??___ftpack+1,w,c
  5989  01169C  1008               	iorwf	??___ftpack+2,w,c
  5990  01169E  B4D8               	btfsc	status,2,c
  5991  0116A0  D00C               	goto	l2684
  5992  0116A2  D7EC               	goto	l2676
  5993  0116A4                     l2680:
  5994  0116A4  2A04               	incf	___ftpack@exp,f,c
  5995  0116A6  0E01               	movlw	1
  5996  0116A8  2601               	addwf	___ftpack@arg,f,c
  5997  0116AA  0E00               	movlw	0
  5998  0116AC  2202               	addwfc	___ftpack@arg+1,f,c
  5999  0116AE  0E00               	movlw	0
  6000  0116B0  2203               	addwfc	___ftpack@arg+2,f,c
  6001  0116B2  90D8               	bcf	status,0,c
  6002  0116B4  3203               	rrcf	___ftpack@arg+2,f,c
  6003  0116B6  3202               	rrcf	___ftpack@arg+1,f,c
  6004  0116B8  3201               	rrcf	___ftpack@arg,f,c
  6005  0116BA                     l2684:
  6006  0116BA  0E00               	movlw	0
  6007  0116BC  1401               	andwf	___ftpack@arg,w,c
  6008  0116BE  6E06               	movwf	??___ftpack& (0+255),c
  6009  0116C0  0E00               	movlw	0
  6010  0116C2  1402               	andwf	___ftpack@arg+1,w,c
  6011  0116C4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6012  0116C6  0EFF               	movlw	255
  6013  0116C8  1403               	andwf	___ftpack@arg+2,w,c
  6014  0116CA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6015  0116CC  5006               	movf	??___ftpack,w,c
  6016  0116CE  1007               	iorwf	??___ftpack+1,w,c
  6017  0116D0  1008               	iorwf	??___ftpack+2,w,c
  6018  0116D2  B4D8               	btfsc	status,2,c
  6019  0116D4  D006               	goto	l2688
  6020  0116D6  D7E6               	goto	l2680
  6021  0116D8                     l2686:
  6022  0116D8  0604               	decf	___ftpack@exp,f,c
  6023  0116DA  90D8               	bcf	status,0,c
  6024  0116DC  3601               	rlcf	___ftpack@arg,f,c
  6025  0116DE  3602               	rlcf	___ftpack@arg+1,f,c
  6026  0116E0  3603               	rlcf	___ftpack@arg+2,f,c
  6027  0116E2                     l2688:
  6028  0116E2  BE02               	btfsc	___ftpack@arg+1,7,c
  6029  0116E4  D003               	goto	l709
  6030  0116E6  0E02               	movlw	2
  6031  0116E8  6004               	cpfslt	___ftpack@exp,c
  6032  0116EA  D7F6               	goto	l2686
  6033  0116EC                     l709:
  6034  0116EC  A004               	btfss	___ftpack@exp,0,c
  6035  0116EE  9E02               	bcf	___ftpack@arg+1,7,c
  6036  0116F0  90D8               	bcf	status,0,c
  6037  0116F2  3204               	rrcf	___ftpack@exp,f,c
  6038  0116F4  5004               	movf	___ftpack@exp,w,c
  6039  0116F6  1203               	iorwf	___ftpack@arg+2,f,c
  6040  0116F8  5005               	movf	___ftpack@sign,w,c
  6041  0116FA  A4D8               	btfss	status,2,c
  6042  0116FC  8E03               	bsf	___ftpack@arg+2,7,c
  6043  0116FE  C001  F001         	movff	___ftpack@arg,?___ftpack
  6044  011702  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6045  011706  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6046  01170A  0012               	return	
  6047  01170C                     __end_of___ftpack:
  6048                           	opt stack 0
  6049                           tblptru	equ	0xFF8
  6050                           tblptrh	equ	0xFF7
  6051                           tblptrl	equ	0xFF6
  6052                           tablat	equ	0xFF5
  6053                           prodh	equ	0xFF4
  6054                           prodl	equ	0xFF3
  6055                           postinc0	equ	0xFEE
  6056                           wreg	equ	0xFE8
  6057                           postdec1	equ	0xFE5
  6058                           fsr1l	equ	0xFE1
  6059                           indf2	equ	0xFDF
  6060                           postinc2	equ	0xFDE
  6061                           postdec2	equ	0xFDD
  6062                           fsr2h	equ	0xFDA
  6063                           fsr2l	equ	0xFD9
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _OWWriteBytes *****************
  6067 ;; Defined at:
  6068 ;;		line 74 in file "OneWire.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  buff            2    2[COMRAM] PTR unsigned char 
  6071 ;;		 -> NULL(0), 
  6072 ;;  len             2    4[COMRAM] int 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  i               2    7[COMRAM] int 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  2    2[COMRAM] int 
  6077 ;; Registers used:
  6078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6084 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;Total ram usage:        7 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    1
  6091 ;; This function calls:
  6092 ;;		_OWWriteByte
  6093 ;; This function is called by:
  6094 ;;		_ReadDS18S20PAR
  6095 ;;		_ReadDS18S20
  6096 ;;		_ReadDS18B20
  6097 ;;		_ReadDS18B20PAR
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           	psect	text23
  6102  011D8C                     __ptext23:
  6103                           	opt stack 0
  6104  011D8C                     _OWWriteBytes:
  6105                           	opt stack 28
  6106                           
  6107                           ;OneWire.c: 75: int i;
  6108                           ;OneWire.c: 76: for (i = 0; i < len; ++i) {
  6109                           
  6110                           ;incstack = 0
  6111  011D8C  0E00               	movlw	0
  6112  011D8E  6E09               	movwf	OWWriteBytes@i+1,c
  6113  011D90  0E00               	movlw	0
  6114  011D92  6E08               	movwf	OWWriteBytes@i,c
  6115  011D94  D00B               	goto	l3002
  6116  011D96                     l2998:
  6117                           
  6118                           ;OneWire.c: 77: OWWriteByte(buff[i]);
  6119  011D96  5008               	movf	OWWriteBytes@i,w,c
  6120  011D98  2403               	addwf	OWWriteBytes@buff,w,c
  6121  011D9A  6ED9               	movwf	fsr2l,c
  6122  011D9C  5009               	movf	OWWriteBytes@i+1,w,c
  6123  011D9E  2004               	addwfc	OWWriteBytes@buff+1,w,c
  6124  011DA0  6EDA               	movwf	fsr2h,c
  6125  011DA2  50DF               	movf	indf2,w,c
  6126  011DA4  ECEE  F08D         	call	_OWWriteByte
  6127  011DA8  4A08               	infsnz	OWWriteBytes@i,f,c
  6128  011DAA  2A09               	incf	OWWriteBytes@i+1,f,c
  6129  011DAC                     l3002:
  6130  011DAC  5005               	movf	OWWriteBytes@len,w,c
  6131  011DAE  5C08               	subwf	OWWriteBytes@i,w,c
  6132  011DB0  5009               	movf	OWWriteBytes@i+1,w,c
  6133  011DB2  0A80               	xorlw	128
  6134  011DB4  6E07               	movwf	??_OWWriteBytes& (0+255),c
  6135  011DB6  5006               	movf	OWWriteBytes@len+1,w,c
  6136  011DB8  0A80               	xorlw	128
  6137  011DBA  5807               	subwfb	??_OWWriteBytes& (0+255),w,c
  6138  011DBC  B0D8               	btfsc	status,0,c
  6139  011DBE  0012               	return	
  6140  011DC0  D7EA               	goto	l2998
  6141  011DC2                     __end_of_OWWriteBytes:
  6142                           	opt stack 0
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodh	equ	0xFF4
  6148                           prodl	equ	0xFF3
  6149                           postinc0	equ	0xFEE
  6150                           wreg	equ	0xFE8
  6151                           postdec1	equ	0xFE5
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           postinc2	equ	0xFDE
  6155                           postdec2	equ	0xFDD
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _OWWriteByte *****************
  6161 ;; Defined at:
  6162 ;;		line 48 in file "OneWire.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;  b               1    wreg     unsigned char 
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;  b               1    0[COMRAM] unsigned char 
  6167 ;;  i               1    1[COMRAM] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;		None               void
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;Total ram usage:        2 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; This function calls:
  6184 ;;		Nothing
  6185 ;; This function is called by:
  6186 ;;		_OWWriteBytes
  6187 ;;		_ReadDS18S20PAR
  6188 ;;		_OWReadROM
  6189 ;;		_OWNextROM
  6190 ;;		_ReadDS18S20
  6191 ;;		_ReadDS18B20
  6192 ;;		_ReadDS18B20PAR
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           	psect	text24
  6197  011BDC                     __ptext24:
  6198                           	opt stack 0
  6199  011BDC                     _OWWriteByte:
  6200                           	opt stack 28
  6201                           
  6202                           ;incstack = 0
  6203                           ;OWWriteByte@b stored from wreg
  6204  011BDC  6E01               	movwf	OWWriteByte@b,c
  6205                           
  6206                           ;OneWire.c: 49: char i;
  6207                           ;OneWire.c: 50: for (i = 0; i < 8; ++i) {
  6208  011BDE  0E00               	movlw	0
  6209  011BE0  6E02               	movwf	OWWriteByte@i,c
  6210  011BE2                     l2736:
  6211  011BE2  0E07               	movlw	7
  6212  011BE4  6402               	cpfsgt	OWWriteByte@i,c
  6213  011BE6  D001               	goto	l63
  6214  011BE8  0012               	return	
  6215  011BEA                     l63:
  6216                           
  6217                           ;OneWire.c: 51: if (b & 1) {
  6218  011BEA  A001               	btfss	OWWriteByte@b,0,c
  6219  011BEC  D00B               	goto	l65
  6220                           
  6221                           ;OneWire.c: 52: TRISJbits.TRISJ0 = 0;;
  6222  011BEE  909A               	bcf	3994,0,c	;volatile
  6223                           
  6224                           ;OneWire.c: 53: _delay((unsigned long)((2)*(40000000L/4000000.0)));
  6225  011BF0  0E06               	movlw	6
  6226  011BF2                     u4317:
  6227  011BF2  2EE8               	decfsz	wreg,f,c
  6228  011BF4  D7FE               	goto	u4317
  6229  011BF6  D000               	nop2		;nop
  6230                           
  6231                           ;OneWire.c: 54: TRISJbits.TRISJ0 = 1;
  6232  011BF8  809A               	bsf	3994,0,c	;volatile
  6233                           
  6234                           ;OneWire.c: 55: _delay((unsigned long)((59)*(40000000L/4000000.0)));
  6235  011BFA  0EC4               	movlw	196
  6236  011BFC                     u4327:
  6237  011BFC  2EE8               	decfsz	wreg,f,c
  6238  011BFE  D7FE               	goto	u4327
  6239  011C00  D000               	nop2		;nop
  6240                           
  6241                           ;OneWire.c: 56: } else {
  6242  011C02  D006               	goto	l2750
  6243  011C04                     l65:
  6244                           
  6245                           ;OneWire.c: 57: TRISJbits.TRISJ0 = 0;;
  6246  011C04  909A               	bcf	3994,0,c	;volatile
  6247                           
  6248                           ;OneWire.c: 58: _delay((unsigned long)((61)*(40000000L/4000000.0)));
  6249  011C06  0ECB               	movlw	203
  6250  011C08                     u4337:
  6251  011C08  2EE8               	decfsz	wreg,f,c
  6252  011C0A  D7FE               	goto	u4337
  6253  011C0C  F000               	nop	
  6254                           
  6255                           ;OneWire.c: 59: TRISJbits.TRISJ0 = 1;
  6256  011C0E  809A               	bsf	3994,0,c	;volatile
  6257  011C10                     l2750:
  6258                           
  6259                           ;OneWire.c: 60: }
  6260                           ;OneWire.c: 61: b >>= 1;
  6261  011C10  90D8               	bcf	status,0,c
  6262  011C12  3201               	rrcf	OWWriteByte@b,f,c
  6263                           
  6264                           ;OneWire.c: 62: _delay((unsigned long)((1)*(40000000L/4000000.0)));
  6265  011C14  0E03               	movlw	3
  6266  011C16                     u4347:
  6267  011C16  2EE8               	decfsz	wreg,f,c
  6268  011C18  D7FE               	goto	u4347
  6269  011C1A  F000               	nop	
  6270  011C1C  2A02               	incf	OWWriteByte@i,f,c
  6271  011C1E  D7E1               	goto	l2736
  6272  011C20                     __end_of_OWWriteByte:
  6273                           	opt stack 0
  6274                           tblptru	equ	0xFF8
  6275                           tblptrh	equ	0xFF7
  6276                           tblptrl	equ	0xFF6
  6277                           tablat	equ	0xFF5
  6278                           prodh	equ	0xFF4
  6279                           prodl	equ	0xFF3
  6280                           postinc0	equ	0xFEE
  6281                           wreg	equ	0xFE8
  6282                           postdec1	equ	0xFE5
  6283                           fsr1l	equ	0xFE1
  6284                           indf2	equ	0xFDF
  6285                           postinc2	equ	0xFDE
  6286                           postdec2	equ	0xFDD
  6287                           fsr2h	equ	0xFDA
  6288                           fsr2l	equ	0xFD9
  6289                           status	equ	0xFD8
  6290                           
  6291 ;; *************** function _OWReset *****************
  6292 ;; Defined at:
  6293 ;;		line 20 in file "OneWire.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;		None
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  presence        1    1[COMRAM] unsigned char 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      unsigned char 
  6300 ;; Registers used:
  6301 ;;		wreg, status,2
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;Total ram usage:        2 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_ReadDS18S20PAR
  6317 ;;		_OWStop
  6318 ;;		_OWReadROM
  6319 ;;		_OWNextROM
  6320 ;;		_ReadDS18S20
  6321 ;;		_ReadDS18B20
  6322 ;;		_ReadDS18B20PAR
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text25
  6327  011C20                     __ptext25:
  6328                           	opt stack 0
  6329  011C20                     _OWReset:
  6330                           	opt stack 29
  6331                           
  6332                           ;OneWire.c: 21: char presence;
  6333                           ;OneWire.c: 22: TRISJbits.TRISJ0 = 0;;
  6334                           
  6335                           ;incstack = 0
  6336  011C20  909A               	bcf	3994,0,c	;volatile
  6337                           
  6338                           ;OneWire.c: 23: _delay((unsigned long)((480)*(40000000L/4000000.0)));
  6339  011C22  0E07               	movlw	7
  6340  011C24  6E01               	movwf	??_OWReset& (0+255),c
  6341  011C26  0E3A               	movlw	58
  6342  011C28                     u4357:
  6343  011C28  2EE8               	decfsz	wreg,f,c
  6344  011C2A  D7FE               	goto	u4357
  6345  011C2C  2E01               	decfsz	??_OWReset& (0+255),f,c
  6346  011C2E  D7FC               	goto	u4357
  6347  011C30  D000               	nop2	
  6348                           
  6349                           ;OneWire.c: 24: TRISJbits.TRISJ0 = 1;
  6350  011C32  809A               	bsf	3994,0,c	;volatile
  6351                           
  6352                           ;OneWire.c: 25: _delay((unsigned long)((80)*(40000000L/4000000.0)));
  6353  011C34  0EC8               	movlw	200
  6354  011C36                     u4367:
  6355  011C36  F000               	nop	
  6356  011C38  2EE8               	decfsz	wreg,f,c
  6357  011C3A  D7FD               	goto	u4367
  6358                           
  6359                           ;OneWire.c: 26: presence = PORTJbits.RJ0;
  6360  011C3C  0E00               	movlw	0
  6361  011C3E  B088               	btfsc	3976,0,c	;volatile
  6362  011C40  0E01               	movlw	1
  6363  011C42  6E02               	movwf	OWReset@presence,c
  6364                           
  6365                           ;OneWire.c: 27: _delay((unsigned long)((400)*(40000000L/4000000.0)));
  6366  011C44  0E06               	movlw	6
  6367  011C46  6E01               	movwf	??_OWReset& (0+255),c
  6368  011C48  0E30               	movlw	48
  6369  011C4A                     u4377:
  6370  011C4A  2EE8               	decfsz	wreg,f,c
  6371  011C4C  D7FE               	goto	u4377
  6372  011C4E  2E01               	decfsz	??_OWReset& (0+255),f,c
  6373  011C50  D7FC               	goto	u4377
  6374  011C52  D000               	nop2	
  6375                           
  6376                           ;OneWire.c: 28: return (!presence);
  6377  011C54  5002               	movf	OWReset@presence,w,c
  6378  011C56  A4D8               	btfss	status,2,c
  6379  011C58  D002               	goto	u2750
  6380  011C5A  0E01               	movlw	1
  6381  011C5C  0012               	return	
  6382  011C5E                     u2750:
  6383  011C5E  0E00               	movlw	0
  6384  011C60  0012               	return	
  6385  011C62                     __end_of_OWReset:
  6386                           	opt stack 0
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           postdec1	equ	0xFE5
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _OWReadBytes *****************
  6405 ;; Defined at:
  6406 ;;		line 66 in file "OneWire.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  buff            2    2[COMRAM] PTR unsigned char 
  6409 ;;		 -> ReadDS18B20PAR@sp(9), ReadDS18B20@sp(9), ReadDS18S20PAR@sp(9), ReadDS18S20@sp(9), 
  6410 ;;  len             2    4[COMRAM] int 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  i               2    7[COMRAM] int 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  2    2[COMRAM] int 
  6415 ;; Registers used:
  6416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;Total ram usage:        7 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    1
  6429 ;; This function calls:
  6430 ;;		_OWReadByte
  6431 ;; This function is called by:
  6432 ;;		_ReadDS18S20PAR
  6433 ;;		_ReadDS18S20
  6434 ;;		_ReadDS18B20
  6435 ;;		_ReadDS18B20PAR
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           	psect	text26
  6440  011DC2                     __ptext26:
  6441                           	opt stack 0
  6442  011DC2                     _OWReadBytes:
  6443                           	opt stack 28
  6444                           
  6445                           ;OneWire.c: 67: int i;
  6446                           ;OneWire.c: 68: for (i = 0; i < len; ++i) {
  6447                           
  6448                           ;incstack = 0
  6449  011DC2  0E00               	movlw	0
  6450  011DC4  6E09               	movwf	OWReadBytes@i+1,c
  6451  011DC6  0E00               	movlw	0
  6452  011DC8  6E08               	movwf	OWReadBytes@i,c
  6453  011DCA  D00B               	goto	l2994
  6454  011DCC                     l2990:
  6455                           
  6456                           ;OneWire.c: 69: buff[i] = OWReadByte();
  6457  011DCC  5008               	movf	OWReadBytes@i,w,c
  6458  011DCE  2403               	addwf	OWReadBytes@buff,w,c
  6459  011DD0  6ED9               	movwf	fsr2l,c
  6460  011DD2  5009               	movf	OWReadBytes@i+1,w,c
  6461  011DD4  2004               	addwfc	OWReadBytes@buff+1,w,c
  6462  011DD6  6EDA               	movwf	fsr2h,c
  6463  011DD8  ECAA  F08E         	call	_OWReadByte	;wreg free
  6464  011DDC  6EDF               	movwf	indf2,c
  6465  011DDE  4A08               	infsnz	OWReadBytes@i,f,c
  6466  011DE0  2A09               	incf	OWReadBytes@i+1,f,c
  6467  011DE2                     l2994:
  6468  011DE2  5005               	movf	OWReadBytes@len,w,c
  6469  011DE4  5C08               	subwf	OWReadBytes@i,w,c
  6470  011DE6  5009               	movf	OWReadBytes@i+1,w,c
  6471  011DE8  0A80               	xorlw	128
  6472  011DEA  6E07               	movwf	??_OWReadBytes& (0+255),c
  6473  011DEC  5006               	movf	OWReadBytes@len+1,w,c
  6474  011DEE  0A80               	xorlw	128
  6475  011DF0  5807               	subwfb	??_OWReadBytes& (0+255),w,c
  6476  011DF2  B0D8               	btfsc	status,0,c
  6477  011DF4  0012               	return	
  6478  011DF6  D7EA               	goto	l2990
  6479  011DF8                     __end_of_OWReadBytes:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           postinc0	equ	0xFEE
  6488                           wreg	equ	0xFE8
  6489                           postdec1	equ	0xFE5
  6490                           fsr1l	equ	0xFE1
  6491                           indf2	equ	0xFDF
  6492                           postinc2	equ	0xFDE
  6493                           postdec2	equ	0xFDD
  6494                           fsr2h	equ	0xFDA
  6495                           fsr2l	equ	0xFD9
  6496                           status	equ	0xFD8
  6497                           
  6498 ;; *************** function _OWReadByte *****************
  6499 ;; Defined at:
  6500 ;;		line 31 in file "OneWire.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;		None
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  i               1    1[COMRAM] unsigned char 
  6505 ;;  b               1    0[COMRAM] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      unsigned char 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;Total ram usage:        2 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; This function calls:
  6522 ;;		Nothing
  6523 ;; This function is called by:
  6524 ;;		_OWReadBytes
  6525 ;;		_OWReadROM
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           	psect	text27
  6530  011D54                     __ptext27:
  6531                           	opt stack 0
  6532  011D54                     _OWReadByte:
  6533                           	opt stack 28
  6534                           
  6535                           ;OneWire.c: 32: unsigned char b = 0;
  6536                           
  6537                           ;incstack = 0
  6538  011D54  0E00               	movlw	0
  6539  011D56  6E01               	movwf	OWReadByte@b,c
  6540                           
  6541                           ;OneWire.c: 33: char i;
  6542                           ;OneWire.c: 34: for (i = 0; i < 8; ++i) {
  6543  011D58  0E00               	movlw	0
  6544  011D5A  6E02               	movwf	OWReadByte@i,c
  6545  011D5C                     l2706:
  6546  011D5C  0E07               	movlw	7
  6547  011D5E  6402               	cpfsgt	OWReadByte@i,c
  6548  011D60  D001               	goto	l2710
  6549  011D62  D012               	goto	l2730
  6550  011D64                     l2710:
  6551                           
  6552                           ;OneWire.c: 35: b >>= 1;
  6553  011D64  90D8               	bcf	status,0,c
  6554  011D66  3201               	rrcf	OWReadByte@b,f,c
  6555                           
  6556                           ;OneWire.c: 36: TRISJbits.TRISJ0 = 0;;
  6557  011D68  909A               	bcf	3994,0,c	;volatile
  6558                           
  6559                           ;OneWire.c: 37: _delay((unsigned long)((1)*(40000000L/4000000.0)));
  6560  011D6A  0E03               	movlw	3
  6561  011D6C                     u4387:
  6562  011D6C  2EE8               	decfsz	wreg,f,c
  6563  011D6E  D7FE               	goto	u4387
  6564  011D70  F000               	nop	
  6565                           
  6566                           ;OneWire.c: 38: TRISJbits.TRISJ0 = 1;
  6567  011D72  809A               	bsf	3994,0,c	;volatile
  6568                           
  6569                           ;OneWire.c: 39: _delay((unsigned long)((12)*(40000000L/4000000.0)));
  6570  011D74  0E28               	movlw	40
  6571  011D76                     u4397:
  6572  011D76  2EE8               	decfsz	wreg,f,c
  6573  011D78  D7FE               	goto	u4397
  6574                           
  6575                           ;OneWire.c: 40: if (PORTJbits.RJ0) {
  6576  011D7A  B088               	btfsc	3976,0,c	;volatile
  6577                           
  6578                           ;OneWire.c: 41: b |= 0b10000000;
  6579  011D7C  8E01               	bsf	OWReadByte@b,7,c
  6580                           
  6581                           ;OneWire.c: 42: }
  6582                           ;OneWire.c: 43: _delay((unsigned long)((48)*(40000000L/4000000.0)));
  6583  011D7E  0EA0               	movlw	160
  6584  011D80                     u4407:
  6585  011D80  2EE8               	decfsz	wreg,f,c
  6586  011D82  D7FE               	goto	u4407
  6587  011D84  2A02               	incf	OWReadByte@i,f,c
  6588  011D86  D7EA               	goto	l2706
  6589  011D88                     l2730:
  6590                           
  6591                           ;OneWire.c: 44: }
  6592                           ;OneWire.c: 45: return b;
  6593  011D88  5001               	movf	OWReadByte@b,w,c
  6594  011D8A  0012               	return	
  6595  011D8C                     __end_of_OWReadByte:
  6596                           	opt stack 0
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           postinc0	equ	0xFEE
  6604                           wreg	equ	0xFE8
  6605                           postdec1	equ	0xFE5
  6606                           fsr1l	equ	0xFE1
  6607                           indf2	equ	0xFDF
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _OWCRC *****************
  6615 ;; Defined at:
  6616 ;;		line 149 in file "OneWire.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  buff            2    0[COMRAM] PTR unsigned char 
  6619 ;;		 -> ReadDS18B20PAR@sp(9), ReadDS18B20@sp(9), ReadDS18S20PAR@sp(9), ReadDS18S20@sp(9), 
  6620 ;;		 -> OWSearchRomCode(8), 
  6621 ;;  len             2    2[COMRAM] int 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  i               1    8[COMRAM] unsigned char 
  6624 ;;  crc             1    7[COMRAM] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      unsigned char 
  6627 ;; Registers used:
  6628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6634 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6637 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;Total ram usage:        9 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; This function calls:
  6641 ;;		Nothing
  6642 ;; This function is called by:
  6643 ;;		_ReadDS18S20PAR
  6644 ;;		_OWReadROM
  6645 ;;		_OWNextROM
  6646 ;;		_ReadDS18S20
  6647 ;;		_ReadDS18B20
  6648 ;;		_ReadDS18B20PAR
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text28
  6653  011A7E                     __ptext28:
  6654                           	opt stack 0
  6655  011A7E                     _OWCRC:
  6656                           	opt stack 29
  6657                           
  6658                           ;OneWire.c: 150: unsigned char crc = 0;
  6659                           
  6660                           ;incstack = 0
  6661  011A7E  0E00               	movlw	0
  6662  011A80  6E08               	movwf	OWCRC@crc,c
  6663                           
  6664                           ;OneWire.c: 151: char i;
  6665                           ;OneWire.c: 152: for (i = 0; i < len; ++i) {
  6666  011A82  0E00               	movlw	0
  6667  011A84  6E09               	movwf	OWCRC@i,c
  6668  011A86  D019               	goto	l3010
  6669  011A88                     l3006:
  6670                           
  6671                           ;OneWire.c: 153: crc = OWCRCTable[crc ^ buff[i]];
  6672  011A88  5009               	movf	OWCRC@i,w,c
  6673  011A8A  0D01               	mullw	1
  6674  011A8C  50F3               	movf	prodl,w,c
  6675  011A8E  2401               	addwf	OWCRC@buff,w,c
  6676  011A90  6ED9               	movwf	fsr2l,c
  6677  011A92  50F4               	movf	prodh,w,c
  6678  011A94  2002               	addwfc	OWCRC@buff+1,w,c
  6679  011A96  6EDA               	movwf	fsr2h,c
  6680  011A98  50DF               	movf	indf2,w,c
  6681  011A9A  1808               	xorwf	OWCRC@crc,w,c
  6682  011A9C  6E05               	movwf	??_OWCRC& (0+255),c
  6683  011A9E  6A06               	clrf	(??_OWCRC+1)& (0+255),c
  6684  011AA0  0E7F               	movlw	low _OWCRCTable
  6685  011AA2  2405               	addwf	??_OWCRC,w,c
  6686  011AA4  6EF6               	movwf	tblptrl,c
  6687  011AA6  0EFE               	movlw	high _OWCRCTable
  6688  011AA8  2006               	addwfc	??_OWCRC+1,w,c
  6689  011AAA  6EF7               	movwf	tblptrh,c
  6690  011AAC                     	if	1	;There are 3 active tblptr bytes
  6691  011AAC  6AF8               	clrf	tblptru,c
  6692  011AAE  0E00               	movlw	low (__mediumconst shr (0+16))
  6693  011AB0  22F8               	addwfc	tblptru,f,c
  6694  011AB2                     	endif
  6695  011AB2  0008               	tblrd		*
  6696  011AB4  CFF5 F008          	movff	tablat,OWCRC@crc
  6697  011AB8  2A09               	incf	OWCRC@i,f,c
  6698  011ABA                     l3010:
  6699  011ABA  5009               	movf	OWCRC@i,w,c
  6700  011ABC  6E05               	movwf	??_OWCRC& (0+255),c
  6701  011ABE  6A06               	clrf	(??_OWCRC+1)& (0+255),c
  6702  011AC0  5003               	movf	OWCRC@len,w,c
  6703  011AC2  5C05               	subwf	??_OWCRC,w,c
  6704  011AC4  5006               	movf	??_OWCRC+1,w,c
  6705  011AC6  0A80               	xorlw	128
  6706  011AC8  6E07               	movwf	(??_OWCRC+2)& (0+255),c
  6707  011ACA  5004               	movf	OWCRC@len+1,w,c
  6708  011ACC  0A80               	xorlw	128
  6709  011ACE  5807               	subwfb	(??_OWCRC+2)& (0+255),w,c
  6710  011AD0  A0D8               	btfss	status,0,c
  6711  011AD2  D7DA               	goto	l3006
  6712                           
  6713                           ;OneWire.c: 154: }
  6714                           ;OneWire.c: 155: return !crc;
  6715  011AD4  5008               	movf	OWCRC@crc,w,c
  6716  011AD6  A4D8               	btfss	status,2,c
  6717  011AD8  D002               	goto	u2800
  6718  011ADA  0E01               	movlw	1
  6719  011ADC  0012               	return	
  6720  011ADE                     u2800:
  6721  011ADE  0E00               	movlw	0
  6722  011AE0  0012               	return	
  6723  011AE2                     __end_of_OWCRC:
  6724                           	opt stack 0
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _OWInit *****************
  6743 ;; Defined at:
  6744 ;;		line 15 in file "OneWire.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;		None
  6749 ;; Return value:  Size  Location     Type
  6750 ;;		None               void
  6751 ;; Registers used:
  6752 ;;		None
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;Total ram usage:        0 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; This function calls:
  6765 ;;		Nothing
  6766 ;; This function is called by:
  6767 ;;		_main
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text29
  6772  011F44                     __ptext29:
  6773                           	opt stack 0
  6774  011F44                     _OWInit:
  6775                           	opt stack 30
  6776                           
  6777                           ;OneWire.c: 16: TRISJbits.TRISJ0 = 1; LATJbits.LATJ0 = 0;;
  6778                           
  6779                           ;incstack = 0
  6780  011F44  809A               	bsf	3994,0,c	;volatile
  6781  011F46  9091               	bcf	3985,0,c	;volatile
  6782                           
  6783                           ;OneWire.c: 17: TRISJbits.TRISJ0 = 1;
  6784  011F48  809A               	bsf	3994,0,c	;volatile
  6785  011F4A  0012               	return		;funcret
  6786  011F4C                     __end_of_OWInit:
  6787                           	opt stack 0
  6788                           tblptru	equ	0xFF8
  6789                           tblptrh	equ	0xFF7
  6790                           tblptrl	equ	0xFF6
  6791                           tablat	equ	0xFF5
  6792                           prodh	equ	0xFF4
  6793                           prodl	equ	0xFF3
  6794                           postinc0	equ	0xFEE
  6795                           wreg	equ	0xFE8
  6796                           postdec1	equ	0xFE5
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805 ;; *************** function _LCDWriteLine *****************
  6806 ;; Defined at:
  6807 ;;		line 59 in file "LCD.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  str             2   13[COMRAM] PTR const unsigned char 
  6810 ;;		 -> LCDScroll@str(17), str0(17), 
  6811 ;;  line            1   15[COMRAM] unsigned char 
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;		None
  6814 ;; Return value:  Size  Location     Type
  6815 ;;		None               void
  6816 ;; Registers used:
  6817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6823 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6826 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;Total ram usage:        4 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    4
  6830 ;; This function calls:
  6831 ;;		_LCDSetPos
  6832 ;;		_LCDWriteData
  6833 ;; This function is called by:
  6834 ;;		_main
  6835 ;;		_LCDScroll
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text30
  6840  01179C                     __ptext30:
  6841                           	opt stack 0
  6842  01179C                     _LCDWriteLine:
  6843                           	opt stack 26
  6844                           
  6845                           ;LCD.c: 60: if (line >= 2) {
  6846                           
  6847                           ;incstack = 0
  6848  01179C  0E01               	movlw	1
  6849  01179E  6410               	cpfsgt	LCDWriteLine@line,c
  6850  0117A0  D001               	goto	l3710
  6851  0117A2  0012               	return	
  6852  0117A4                     l3710:
  6853                           
  6854                           ;LCD.c: 62: }
  6855                           ;LCD.c: 63: LCDSetPos(line, 0);
  6856  0117A4  C010  F007         	movff	LCDWriteLine@line,LCDSetPos@row
  6857  0117A8  6A08               	clrf	LCDSetPos@row+1,c
  6858  0117AA  0E00               	movlw	0
  6859  0117AC  6E0A               	movwf	LCDSetPos@col+1,c
  6860  0117AE  0E00               	movlw	0
  6861  0117B0  6E09               	movwf	LCDSetPos@col,c
  6862  0117B2  ECCB  F08D         	call	_LCDSetPos	;wreg free
  6863                           
  6864                           ;LCD.c: 64: while (*str) {
  6865  0117B6  D032               	goto	l3730
  6866  0117B8                     l3712:
  6867                           
  6868                           ;LCD.c: 65: if (*str == '\n') {
  6869  0117B8  C00E  FFD9         	movff	LCDWriteLine@str,fsr2l
  6870  0117BC  C00F  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  6871  0117C0  0E0A               	movlw	10
  6872  0117C2  18DE               	xorwf	postinc2,w,c
  6873  0117C4  A4D8               	btfss	status,2,c
  6874  0117C6  D007               	goto	l3720
  6875                           
  6876                           ;LCD.c: 66: ++line;
  6877  0117C8  2A10               	incf	LCDWriteLine@line,f,c
  6878                           
  6879                           ;LCD.c: 67: if (line == 2) {
  6880  0117CA  0E02               	movlw	2
  6881  0117CC  1810               	xorwf	LCDWriteLine@line,w,c
  6882  0117CE  A4D8               	btfss	status,2,c
  6883  0117D0  D002               	goto	l3720
  6884                           
  6885                           ;LCD.c: 68: line = 0;
  6886  0117D2  0E00               	movlw	0
  6887  0117D4  6E10               	movwf	LCDWriteLine@line,c
  6888  0117D6                     l3720:
  6889                           
  6890                           ;LCD.c: 69: }
  6891                           ;LCD.c: 70: }
  6892                           ;LCD.c: 71: if (*str == '\r' || *str == '\n') {
  6893  0117D6  C00E  FFD9         	movff	LCDWriteLine@str,fsr2l
  6894  0117DA  C00F  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  6895  0117DE  0E0D               	movlw	13
  6896  0117E0  18DE               	xorwf	postinc2,w,c
  6897  0117E2  B4D8               	btfsc	status,2,c
  6898  0117E4  D008               	goto	l3724
  6899  0117E6  C00E  FFD9         	movff	LCDWriteLine@str,fsr2l
  6900  0117EA  C00F  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  6901  0117EE  0E0A               	movlw	10
  6902  0117F0  18DE               	xorwf	postinc2,w,c
  6903  0117F2  A4D8               	btfss	status,2,c
  6904  0117F4  D00A               	goto	l3726
  6905  0117F6                     l3724:
  6906                           
  6907                           ;LCD.c: 72: LCDSetPos(line, 0);
  6908  0117F6  C010  F007         	movff	LCDWriteLine@line,LCDSetPos@row
  6909  0117FA  6A08               	clrf	LCDSetPos@row+1,c
  6910  0117FC  0E00               	movlw	0
  6911  0117FE  6E0A               	movwf	LCDSetPos@col+1,c
  6912  011800  0E00               	movlw	0
  6913  011802  6E09               	movwf	LCDSetPos@col,c
  6914  011804  ECCB  F08D         	call	_LCDSetPos	;wreg free
  6915                           
  6916                           ;LCD.c: 73: } else {
  6917  011808  D007               	goto	l3728
  6918  01180A                     l3726:
  6919                           
  6920                           ;LCD.c: 74: LCDWriteData(*str);
  6921  01180A  C00E  FFD9         	movff	LCDWriteLine@str,fsr2l
  6922  01180E  C00F  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  6923  011812  50DF               	movf	indf2,w,c
  6924  011814  EC6A  F08F         	call	_LCDWriteData
  6925  011818                     l3728:
  6926                           
  6927                           ;LCD.c: 75: }
  6928                           ;LCD.c: 76: ++str;
  6929  011818  4A0E               	infsnz	LCDWriteLine@str,f,c
  6930  01181A  2A0F               	incf	LCDWriteLine@str+1,f,c
  6931  01181C                     l3730:
  6932  01181C  C00E  FFD9         	movff	LCDWriteLine@str,fsr2l
  6933  011820  C00F  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  6934  011824  50DF               	movf	indf2,w,c
  6935  011826  B4D8               	btfsc	status,2,c
  6936  011828  0012               	return	
  6937  01182A  D7C6               	goto	l3712
  6938  01182C                     __end_of_LCDWriteLine:
  6939                           	opt stack 0
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           postinc0	equ	0xFEE
  6947                           wreg	equ	0xFE8
  6948                           postdec1	equ	0xFE5
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _LCDWriteData *****************
  6958 ;; Defined at:
  6959 ;;		line 197 in file "LCD.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;  c               1    wreg     unsigned char 
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;  c               1    5[COMRAM] unsigned char 
  6964 ;; Return value:  Size  Location     Type
  6965 ;;		None               void
  6966 ;; Registers used:
  6967 ;;		wreg, status,2, status,0, cstack
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;Total ram usage:        1 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    2
  6980 ;; This function calls:
  6981 ;;		_LCDWriteByte
  6982 ;;		_shortDelay
  6983 ;;		_wait
  6984 ;; This function is called by:
  6985 ;;		_LCDWriteLine
  6986 ;;		_LCDPutStr
  6987 ;;		_LCDClearLine
  6988 ;;		_LCDPutChar
  6989 ;;		_LCDLoadCustomChar
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text31
  6994  011ED4                     __ptext31:
  6995                           	opt stack 0
  6996  011ED4                     _LCDWriteData:
  6997                           	opt stack 27
  6998                           
  6999                           ;incstack = 0
  7000                           ;LCDWriteData@c stored from wreg
  7001  011ED4  6E06               	movwf	LCDWriteData@c,c
  7002                           
  7003                           ;LCD.c: 198: wait();
  7004  011ED6  ECA6  F08F         	call	_wait	;wreg free
  7005                           
  7006                           ;LCD.c: 199: LCDWriteByte(c, 1);
  7007  011EDA  0E01               	movlw	1
  7008  011EDC  6E03               	movwf	LCDWriteByte@rs,c
  7009  011EDE  5006               	movf	LCDWriteData@c,w,c
  7010  011EE0  EC70  F08E         	call	_LCDWriteByte
  7011                           
  7012                           ;LCD.c: 200: shortDelay();
  7013  011EE4  EC9D  F08F         	call	_shortDelay	;wreg free
  7014  011EE8  0012               	return		;funcret
  7015  011EEA                     __end_of_LCDWriteData:
  7016                           	opt stack 0
  7017                           tblptru	equ	0xFF8
  7018                           tblptrh	equ	0xFF7
  7019                           tblptrl	equ	0xFF6
  7020                           tablat	equ	0xFF5
  7021                           prodh	equ	0xFF4
  7022                           prodl	equ	0xFF3
  7023                           postinc0	equ	0xFEE
  7024                           wreg	equ	0xFE8
  7025                           postdec1	equ	0xFE5
  7026                           fsr1l	equ	0xFE1
  7027                           indf2	equ	0xFDF
  7028                           postinc2	equ	0xFDE
  7029                           postdec2	equ	0xFDD
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _LCDSetPos *****************
  7035 ;; Defined at:
  7036 ;;		line 96 in file "LCD.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  row             2    6[COMRAM] int 
  7039 ;;  col             2    8[COMRAM] int 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  pos             2   11[COMRAM] int 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;		None               void
  7044 ;; Registers used:
  7045 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7051 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;Total ram usage:        7 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    3
  7058 ;; This function calls:
  7059 ;;		_LCDCommand
  7060 ;;		_calculateBase
  7061 ;; This function is called by:
  7062 ;;		_LCDWriteLine
  7063 ;;		_LCDClearLine
  7064 ;;		_LCDReadLine
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           	psect	text32
  7069  011B96                     __ptext32:
  7070                           	opt stack 0
  7071  011B96                     _LCDSetPos:
  7072                           	opt stack 26
  7073                           
  7074                           ;LCD.c: 97: int pos;
  7075                           ;LCD.c: 98: if (row < 0 || col < 0 || row >= 2 || col >= 16) {
  7076                           
  7077                           ;incstack = 0
  7078  011B96  BE08               	btfsc	LCDSetPos@row+1,7,c
  7079  011B98  0012               	return	
  7080  011B9A  BE0A               	btfsc	LCDSetPos@col+1,7,c
  7081  011B9C  0012               	return	
  7082  011B9E  BE08               	btfsc	LCDSetPos@row+1,7,c
  7083  011BA0  D006               	goto	l3046
  7084  011BA2  5008               	movf	LCDSetPos@row+1,w,c
  7085  011BA4  E11A               	bnz	l284
  7086  011BA6  0E02               	movlw	2
  7087  011BA8  5C07               	subwf	LCDSetPos@row,w,c
  7088  011BAA  B0D8               	btfsc	status,0,c
  7089  011BAC  0012               	return	
  7090  011BAE                     l3046:
  7091  011BAE  BE0A               	btfsc	LCDSetPos@col+1,7,c
  7092  011BB0  D006               	goto	l3048
  7093  011BB2  500A               	movf	LCDSetPos@col+1,w,c
  7094  011BB4  E112               	bnz	l284
  7095  011BB6  0E10               	movlw	16
  7096  011BB8  5C09               	subwf	LCDSetPos@col,w,c
  7097  011BBA  B0D8               	btfsc	status,0,c
  7098  011BBC  0012               	return	
  7099  011BBE                     l3048:
  7100                           
  7101                           ;LCD.c: 100: }
  7102                           ;LCD.c: 101: pos = calculateBase(row) + col;
  7103  011BBE  5007               	movf	LCDSetPos@row,w,c
  7104  011BC0  EC5B  F08F         	call	_calculateBase
  7105  011BC4  6E0B               	movwf	??_LCDSetPos& (0+255),c
  7106  011BC6  500B               	movf	??_LCDSetPos,w,c
  7107  011BC8  2409               	addwf	LCDSetPos@col,w,c
  7108  011BCA  6E0C               	movwf	LCDSetPos@pos,c
  7109  011BCC  0E00               	movlw	0
  7110  011BCE  200A               	addwfc	LCDSetPos@col+1,w,c
  7111  011BD0  6E0D               	movwf	LCDSetPos@pos+1,c
  7112                           
  7113                           ;LCD.c: 102: LCDCommand(128 + pos);
  7114  011BD2  500C               	movf	LCDSetPos@pos,w,c
  7115  011BD4  0F80               	addlw	128
  7116  011BD6  EC75  F08F         	call	_LCDCommand
  7117  011BDA                     l284:
  7118  011BDA  0012               	return		;funcret
  7119  011BDC                     __end_of_LCDSetPos:
  7120                           	opt stack 0
  7121                           tblptru	equ	0xFF8
  7122                           tblptrh	equ	0xFF7
  7123                           tblptrl	equ	0xFF6
  7124                           tablat	equ	0xFF5
  7125                           prodh	equ	0xFF4
  7126                           prodl	equ	0xFF3
  7127                           postinc0	equ	0xFEE
  7128                           wreg	equ	0xFE8
  7129                           postdec1	equ	0xFE5
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           fsr2h	equ	0xFDA
  7135                           fsr2l	equ	0xFD9
  7136                           status	equ	0xFD8
  7137                           
  7138 ;; *************** function _calculateBase *****************
  7139 ;; Defined at:
  7140 ;;		line 225 in file "LCD.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;  line            1    wreg     unsigned char 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  line            1    1[COMRAM] unsigned char 
  7145 ;;  base            1    0[COMRAM] unsigned char 
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      unsigned char 
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0, prodl, prodh
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;Total ram usage:        2 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		_LCDSetPos
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           	psect	text33
  7169  011EB6                     __ptext33:
  7170                           	opt stack 0
  7171  011EB6                     _calculateBase:
  7172                           	opt stack 28
  7173                           
  7174                           ;incstack = 0
  7175                           ;calculateBase@line stored from wreg
  7176  011EB6  6E02               	movwf	calculateBase@line,c
  7177                           
  7178                           ;LCD.c: 226: char base;
  7179                           ;LCD.c: 227: if (line % 2 == 0) {
  7180  011EB8  B002               	btfsc	calculateBase@line,0,c
  7181  011EBA  D005               	goto	l2768
  7182                           
  7183                           ;LCD.c: 228: base = line * 10;
  7184  011EBC  5002               	movf	calculateBase@line,w,c
  7185  011EBE  0D0A               	mullw	10
  7186  011EC0  CFF3 F001          	movff	prodl,calculateBase@base
  7187                           
  7188                           ;LCD.c: 229: } else {
  7189  011EC4  D005               	goto	l2770
  7190  011EC6                     l2768:
  7191                           
  7192                           ;LCD.c: 230: base = 54 + line * 10;
  7193  011EC6  5002               	movf	calculateBase@line,w,c
  7194  011EC8  0D0A               	mullw	10
  7195  011ECA  50F3               	movf	prodl,w,c
  7196  011ECC  0F36               	addlw	54
  7197  011ECE  6E01               	movwf	calculateBase@base,c
  7198  011ED0                     l2770:
  7199                           
  7200                           ;LCD.c: 231: }
  7201                           ;LCD.c: 232: return base;
  7202  011ED0  5001               	movf	calculateBase@base,w,c
  7203  011ED2  0012               	return	
  7204  011ED4                     __end_of_calculateBase:
  7205                           	opt stack 0
  7206                           tblptru	equ	0xFF8
  7207                           tblptrh	equ	0xFF7
  7208                           tblptrl	equ	0xFF6
  7209                           tablat	equ	0xFF5
  7210                           prodh	equ	0xFF4
  7211                           prodl	equ	0xFF3
  7212                           postinc0	equ	0xFEE
  7213                           wreg	equ	0xFE8
  7214                           postdec1	equ	0xFE5
  7215                           fsr1l	equ	0xFE1
  7216                           indf2	equ	0xFDF
  7217                           postinc2	equ	0xFDE
  7218                           postdec2	equ	0xFDD
  7219                           fsr2h	equ	0xFDA
  7220                           fsr2l	equ	0xFD9
  7221                           status	equ	0xFD8
  7222                           
  7223 ;; *************** function _LCDInit *****************
  7224 ;; Defined at:
  7225 ;;		line 24 in file "LCD.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;  functionSet     1    7[COMRAM] unsigned char 
  7230 ;; Return value:  Size  Location     Type
  7231 ;;		None               void
  7232 ;; Registers used:
  7233 ;;		wreg, status,2, status,0, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7243 ;;Total ram usage:        2 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    3
  7246 ;; This function calls:
  7247 ;;		_LCDInitCommand
  7248 ;;		_LCDInitPort
  7249 ;; This function is called by:
  7250 ;;		_main
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           	psect	text34
  7255  011B3E                     __ptext34:
  7256                           	opt stack 0
  7257  011B3E                     _LCDInit:
  7258                           	opt stack 27
  7259                           
  7260                           ;LCD.c: 25: char functionSet = 0b00111000;
  7261                           
  7262                           ;incstack = 0
  7263  011B3E  0E38               	movlw	56
  7264  011B40  6E08               	movwf	LCDInit@functionSet,c
  7265                           
  7266                           ;LCD.c: 26: LCDInitPort();
  7267  011B42  ECFC  F08E         	call	_LCDInitPort	;wreg free
  7268                           
  7269                           ;LCD.c: 27: _delay((unsigned long)((10)*(40000000L/4000.0)));
  7270  011B46  0E82               	movlw	130
  7271  011B48  6E07               	movwf	??_LCDInit& (0+255),c
  7272  011B4A  0EDE               	movlw	222
  7273  011B4C                     u4417:
  7274  011B4C  2EE8               	decfsz	wreg,f,c
  7275  011B4E  D7FE               	goto	u4417
  7276  011B50  2E07               	decfsz	??_LCDInit& (0+255),f,c
  7277  011B52  D7FC               	goto	u4417
  7278                           
  7279                           ;LCD.c: 37: LCDInitCommand(functionSet);
  7280  011B54  5008               	movf	LCDInit@functionSet,w,c
  7281  011B56  EC90  F08F         	call	_LCDInitCommand
  7282                           
  7283                           ;LCD.c: 38: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  7284  011B5A  0E85               	movlw	133
  7285  011B5C                     u4427:
  7286  011B5C  2EE8               	decfsz	wreg,f,c
  7287  011B5E  D7FE               	goto	u4427
  7288  011B60  F000               	nop	
  7289                           
  7290                           ;LCD.c: 39: LCDInitCommand(0b00001100);
  7291  011B62  0E0C               	movlw	12
  7292  011B64  EC90  F08F         	call	_LCDInitCommand
  7293                           
  7294                           ;LCD.c: 40: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  7295  011B68  0E85               	movlw	133
  7296  011B6A                     u4437:
  7297  011B6A  2EE8               	decfsz	wreg,f,c
  7298  011B6C  D7FE               	goto	u4437
  7299  011B6E  F000               	nop	
  7300                           
  7301                           ;LCD.c: 41: LCDInitCommand(0b00000001);
  7302  011B70  0E01               	movlw	1
  7303  011B72  EC90  F08F         	call	_LCDInitCommand
  7304                           
  7305                           ;LCD.c: 42: _delay((unsigned long)((1700)*(40000000L/4000000.0)));
  7306  011B76  0E17               	movlw	23
  7307  011B78  6E07               	movwf	??_LCDInit& (0+255),c
  7308  011B7A  0E12               	movlw	18
  7309  011B7C                     u4447:
  7310  011B7C  2EE8               	decfsz	wreg,f,c
  7311  011B7E  D7FE               	goto	u4447
  7312  011B80  2E07               	decfsz	??_LCDInit& (0+255),f,c
  7313  011B82  D7FC               	goto	u4447
  7314  011B84  D000               	nop2	
  7315                           
  7316                           ;LCD.c: 43: LCDInitCommand(0b00000110);
  7317  011B86  0E06               	movlw	6
  7318  011B88  EC90  F08F         	call	_LCDInitCommand
  7319                           
  7320                           ;LCD.c: 44: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  7321  011B8C  0E85               	movlw	133
  7322  011B8E                     u4457:
  7323  011B8E  2EE8               	decfsz	wreg,f,c
  7324  011B90  D7FE               	goto	u4457
  7325  011B92  F000               	nop	
  7326  011B94  0012               	return		;funcret
  7327  011B96                     __end_of_LCDInit:
  7328                           	opt stack 0
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           postinc0	equ	0xFEE
  7336                           wreg	equ	0xFE8
  7337                           postdec1	equ	0xFE5
  7338                           fsr1l	equ	0xFE1
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function _LCDInitPort *****************
  7347 ;; Defined at:
  7348 ;;		line 287 in file "LCD.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;		None
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;		None               void
  7355 ;; Registers used:
  7356 ;;		wreg, status,2, cstack
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;Total ram usage:        0 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; Hardware stack levels required when called:    1
  7369 ;; This function calls:
  7370 ;;		_WriteRegister
  7371 ;; This function is called by:
  7372 ;;		_LCDInit
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           	psect	text35
  7377  011DF8                     __ptext35:
  7378                           	opt stack 0
  7379  011DF8                     _LCDInitPort:
  7380                           	opt stack 28
  7381                           
  7382                           ;LCD.c: 288: TRISAbits.TRISA2 = 0;
  7383                           
  7384                           ;incstack = 0
  7385  011DF8  9492               	bcf	3986,2,c	;volatile
  7386                           
  7387                           ;LCD.c: 289: LATAbits.LATA2 = 1;
  7388  011DFA  8489               	bsf	3977,2,c	;volatile
  7389                           
  7390                           ;LCD.c: 304: TRISCbits.TRISC3 = 0;
  7391  011DFC  9694               	bcf	3988,3,c	;volatile
  7392                           
  7393                           ;LCD.c: 305: TRISCbits.TRISC5 = 0;
  7394  011DFE  9A94               	bcf	3988,5,c	;volatile
  7395                           
  7396                           ;LCD.c: 307: SSPCON1 = 0x21;
  7397  011E00  0E21               	movlw	33
  7398  011E02  6EC6               	movwf	4038,c	;volatile
  7399                           
  7400                           ;LCD.c: 308: SSPSTATbits.CKE = 1;
  7401  011E04  8CC7               	bsf	4039,6,c	;volatile
  7402                           
  7403                           ;LCD.c: 309: SSPIF = 0;
  7404  011E06  969E               	bcf	3998,3,c	;volatile
  7405                           
  7406                           ;LCD.c: 310: WriteRegister(0, 0);
  7407  011E08  0E00               	movlw	0
  7408  011E0A  6E01               	movwf	WriteRegister@b,c
  7409  011E0C  0E00               	movlw	0
  7410  011E0E  EC27  F08F         	call	_WriteRegister
  7411                           
  7412                           ;LCD.c: 311: WriteRegister(1, 0);
  7413  011E12  0E00               	movlw	0
  7414  011E14  6E01               	movwf	WriteRegister@b,c
  7415  011E16  0E01               	movlw	1
  7416  011E18  EC27  F08F         	call	_WriteRegister
  7417                           
  7418                           ;LCD.c: 312: WriteRegister(0x12, 0);
  7419  011E1C  0E00               	movlw	0
  7420  011E1E  6E01               	movwf	WriteRegister@b,c
  7421  011E20  0E12               	movlw	18
  7422  011E22  EC27  F08F         	call	_WriteRegister
  7423  011E26  0012               	return		;funcret
  7424  011E28                     __end_of_LCDInitPort:
  7425                           	opt stack 0
  7426                           tblptru	equ	0xFF8
  7427                           tblptrh	equ	0xFF7
  7428                           tblptrl	equ	0xFF6
  7429                           tablat	equ	0xFF5
  7430                           prodh	equ	0xFF4
  7431                           prodl	equ	0xFF3
  7432                           postinc0	equ	0xFEE
  7433                           wreg	equ	0xFE8
  7434                           postdec1	equ	0xFE5
  7435                           fsr1l	equ	0xFE1
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           postdec2	equ	0xFDD
  7439                           fsr2h	equ	0xFDA
  7440                           fsr2l	equ	0xFD9
  7441                           status	equ	0xFD8
  7442                           
  7443 ;; *************** function _LCDInitCommand *****************
  7444 ;; Defined at:
  7445 ;;		line 193 in file "LCD.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  command         1    wreg     unsigned char 
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;  command         1    5[COMRAM] unsigned char 
  7450 ;; Return value:  Size  Location     Type
  7451 ;;		None               void
  7452 ;; Registers used:
  7453 ;;		wreg, status,2, status,0, cstack
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;Total ram usage:        1 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    2
  7466 ;; This function calls:
  7467 ;;		_LCDWriteByte
  7468 ;; This function is called by:
  7469 ;;		_LCDInit
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           	psect	text36
  7474  011F20                     __ptext36:
  7475                           	opt stack 0
  7476  011F20                     _LCDInitCommand:
  7477                           	opt stack 27
  7478                           
  7479                           ;incstack = 0
  7480                           ;LCDInitCommand@command stored from wreg
  7481  011F20  6E06               	movwf	LCDInitCommand@command,c
  7482                           
  7483                           ;LCD.c: 194: LCDWriteByte(command, 0);
  7484  011F22  0E00               	movlw	0
  7485  011F24  6E03               	movwf	LCDWriteByte@rs,c
  7486  011F26  5006               	movf	LCDInitCommand@command,w,c
  7487  011F28  EC70  F08E         	call	_LCDWriteByte
  7488  011F2C  0012               	return		;funcret
  7489  011F2E                     __end_of_LCDInitCommand:
  7490                           	opt stack 0
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           postdec1	equ	0xFE5
  7500                           fsr1l	equ	0xFE1
  7501                           indf2	equ	0xFDF
  7502                           postinc2	equ	0xFDE
  7503                           postdec2	equ	0xFDD
  7504                           fsr2h	equ	0xFDA
  7505                           fsr2l	equ	0xFD9
  7506                           status	equ	0xFD8
  7507                           
  7508 ;; *************** function _LCDClear *****************
  7509 ;; Defined at:
  7510 ;;		line 47 in file "LCD.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;		None
  7515 ;; Return value:  Size  Location     Type
  7516 ;;		None               void
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;Total ram usage:        0 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    3
  7531 ;; This function calls:
  7532 ;;		_LCDCommand
  7533 ;;		_longDelay
  7534 ;; This function is called by:
  7535 ;;		_main
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           	psect	text37
  7540  011F2E                     __ptext37:
  7541                           	opt stack 0
  7542  011F2E                     _LCDClear:
  7543                           	opt stack 27
  7544                           
  7545                           ;LCD.c: 48: LCDCommand(0b00000001);
  7546                           
  7547                           ;incstack = 0
  7548  011F2E  0E01               	movlw	1
  7549  011F30  EC75  F08F         	call	_LCDCommand
  7550                           
  7551                           ;LCD.c: 49: longDelay();
  7552  011F34  EC88  F08F         	call	_longDelay	;wreg free
  7553  011F38  0012               	return		;funcret
  7554  011F3A                     __end_of_LCDClear:
  7555                           	opt stack 0
  7556                           tblptru	equ	0xFF8
  7557                           tblptrh	equ	0xFF7
  7558                           tblptrl	equ	0xFF6
  7559                           tablat	equ	0xFF5
  7560                           prodh	equ	0xFF4
  7561                           prodl	equ	0xFF3
  7562                           postinc0	equ	0xFEE
  7563                           wreg	equ	0xFE8
  7564                           postdec1	equ	0xFE5
  7565                           fsr1l	equ	0xFE1
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           fsr2h	equ	0xFDA
  7570                           fsr2l	equ	0xFD9
  7571                           status	equ	0xFD8
  7572                           
  7573 ;; *************** function _longDelay *****************
  7574 ;; Defined at:
  7575 ;;		line 241 in file "LCD.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;		None
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;		None
  7580 ;; Return value:  Size  Location     Type
  7581 ;;		None               void
  7582 ;; Registers used:
  7583 ;;		wreg
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;Total ram usage:        1 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; This function calls:
  7596 ;;		Nothing
  7597 ;; This function is called by:
  7598 ;;		_LCDClear
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text38
  7603  011F10                     __ptext38:
  7604                           	opt stack 0
  7605  011F10                     _longDelay:
  7606                           	opt stack 29
  7607                           
  7608                           ;LCD.c: 243: _delay((unsigned long)((1660)*(40000000L/4000000.0)));
  7609                           
  7610                           ;incstack = 0
  7611  011F10  0E16               	movlw	22
  7612  011F12  6E01               	movwf	??_longDelay& (0+255),c
  7613  011F14  0E8E               	movlw	142
  7614  011F16                     u4467:
  7615  011F16  2EE8               	decfsz	wreg,f,c
  7616  011F18  D7FE               	goto	u4467
  7617  011F1A  2E01               	decfsz	??_longDelay& (0+255),f,c
  7618  011F1C  D7FC               	goto	u4467
  7619  011F1E  0012               	return		;funcret
  7620  011F20                     __end_of_longDelay:
  7621                           	opt stack 0
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           postdec1	equ	0xFE5
  7631                           fsr1l	equ	0xFE1
  7632                           indf2	equ	0xFDF
  7633                           postinc2	equ	0xFDE
  7634                           postdec2	equ	0xFDD
  7635                           fsr2h	equ	0xFDA
  7636                           fsr2l	equ	0xFD9
  7637                           status	equ	0xFD8
  7638                           
  7639 ;; *************** function _LCDCommand *****************
  7640 ;; Defined at:
  7641 ;;		line 187 in file "LCD.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  command         1    wreg     unsigned char 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  command         1    5[COMRAM] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;		None               void
  7648 ;; Registers used:
  7649 ;;		wreg, status,2, status,0, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;Total ram usage:        1 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    2
  7662 ;; This function calls:
  7663 ;;		_LCDWriteByte
  7664 ;;		_shortDelay
  7665 ;;		_wait
  7666 ;; This function is called by:
  7667 ;;		_LCDClear
  7668 ;;		_LCDSetPos
  7669 ;;		_LCDLoadCustomChar
  7670 ;;		_LCDScroll
  7671 ;;		_LCDDisplay
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           	psect	text39
  7676  011EEA                     __ptext39:
  7677                           	opt stack 0
  7678  011EEA                     _LCDCommand:
  7679                           	opt stack 26
  7680                           
  7681                           ;incstack = 0
  7682                           ;LCDCommand@command stored from wreg
  7683  011EEA  6E06               	movwf	LCDCommand@command,c
  7684                           
  7685                           ;LCD.c: 188: wait();
  7686  011EEC  ECA6  F08F         	call	_wait	;wreg free
  7687                           
  7688                           ;LCD.c: 189: LCDWriteByte(command, 0);
  7689  011EF0  0E00               	movlw	0
  7690  011EF2  6E03               	movwf	LCDWriteByte@rs,c
  7691  011EF4  5006               	movf	LCDCommand@command,w,c
  7692  011EF6  EC70  F08E         	call	_LCDWriteByte
  7693                           
  7694                           ;LCD.c: 190: shortDelay();
  7695  011EFA  EC9D  F08F         	call	_shortDelay	;wreg free
  7696  011EFE  0012               	return		;funcret
  7697  011F00                     __end_of_LCDCommand:
  7698                           	opt stack 0
  7699                           tblptru	equ	0xFF8
  7700                           tblptrh	equ	0xFF7
  7701                           tblptrl	equ	0xFF6
  7702                           tablat	equ	0xFF5
  7703                           prodh	equ	0xFF4
  7704                           prodl	equ	0xFF3
  7705                           postinc0	equ	0xFEE
  7706                           wreg	equ	0xFE8
  7707                           postdec1	equ	0xFE5
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8
  7715                           
  7716 ;; *************** function _wait *****************
  7717 ;; Defined at:
  7718 ;;		line 235 in file "LCD.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;		None
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;		None               void
  7725 ;; Registers used:
  7726 ;;		None
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7736 ;;Total ram usage:        0 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; This function calls:
  7739 ;;		Nothing
  7740 ;; This function is called by:
  7741 ;;		_LCDCommand
  7742 ;;		_LCDWriteData
  7743 ;;		_LCDReadData
  7744 ;;		_LCDGetAC
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text40
  7749  011F4C                     __ptext40:
  7750                           	opt stack 0
  7751  011F4C                     _wait:
  7752                           	opt stack 28
  7753                           
  7754                           ;incstack = 0
  7755  011F4C  0012               	return		;funcret
  7756  011F4E                     __end_of_wait:
  7757                           	opt stack 0
  7758                           tblptru	equ	0xFF8
  7759                           tblptrh	equ	0xFF7
  7760                           tblptrl	equ	0xFF6
  7761                           tablat	equ	0xFF5
  7762                           prodh	equ	0xFF4
  7763                           prodl	equ	0xFF3
  7764                           postinc0	equ	0xFEE
  7765                           wreg	equ	0xFE8
  7766                           postdec1	equ	0xFE5
  7767                           fsr1l	equ	0xFE1
  7768                           indf2	equ	0xFDF
  7769                           postinc2	equ	0xFDE
  7770                           postdec2	equ	0xFDD
  7771                           fsr2h	equ	0xFDA
  7772                           fsr2l	equ	0xFD9
  7773                           status	equ	0xFD8
  7774                           
  7775 ;; *************** function _shortDelay *****************
  7776 ;; Defined at:
  7777 ;;		line 247 in file "LCD.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;		None
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;		None
  7782 ;; Return value:  Size  Location     Type
  7783 ;;		None               void
  7784 ;; Registers used:
  7785 ;;		wreg
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;Total ram usage:        0 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; This function calls:
  7798 ;;		Nothing
  7799 ;; This function is called by:
  7800 ;;		_LCDCommand
  7801 ;;		_LCDWriteData
  7802 ;;		_LCDReadData
  7803 ;;		_LCDGetAC
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text41
  7808  011F3A                     __ptext41:
  7809                           	opt stack 0
  7810  011F3A                     _shortDelay:
  7811                           	opt stack 28
  7812                           
  7813                           ;LCD.c: 249: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  7814                           
  7815                           ;incstack = 0
  7816  011F3A  0E85               	movlw	133
  7817  011F3C                     u4477:
  7818  011F3C  2EE8               	decfsz	wreg,f,c
  7819  011F3E  D7FE               	goto	u4477
  7820  011F40  F000               	nop	
  7821  011F42  0012               	return		;funcret
  7822  011F44                     __end_of_shortDelay:
  7823                           	opt stack 0
  7824                           tblptru	equ	0xFF8
  7825                           tblptrh	equ	0xFF7
  7826                           tblptrl	equ	0xFF6
  7827                           tablat	equ	0xFF5
  7828                           prodh	equ	0xFF4
  7829                           prodl	equ	0xFF3
  7830                           postinc0	equ	0xFEE
  7831                           wreg	equ	0xFE8
  7832                           postdec1	equ	0xFE5
  7833                           fsr1l	equ	0xFE1
  7834                           indf2	equ	0xFDF
  7835                           postinc2	equ	0xFDE
  7836                           postdec2	equ	0xFDD
  7837                           fsr2h	equ	0xFDA
  7838                           fsr2l	equ	0xFD9
  7839                           status	equ	0xFD8
  7840                           
  7841 ;; *************** function _LCDWriteByte *****************
  7842 ;; Defined at:
  7843 ;;		line 260 in file "LCD.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;  c               1    wreg     unsigned char 
  7846 ;;  rs              1    2[COMRAM] unsigned char 
  7847 ;; Auto vars:     Size  Location     Type
  7848 ;;  c               1    3[COMRAM] unsigned char 
  7849 ;;  comFlags        1    4[COMRAM] unsigned char 
  7850 ;; Return value:  Size  Location     Type
  7851 ;;		None               void
  7852 ;; Registers used:
  7853 ;;		wreg, status,2, status,0, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7859 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7862 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;Total ram usage:        3 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:    1
  7866 ;; This function calls:
  7867 ;;		_WriteRegister
  7868 ;; This function is called by:
  7869 ;;		_LCDCommand
  7870 ;;		_LCDInitCommand
  7871 ;;		_LCDWriteData
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text42
  7876  011CE0                     __ptext42:
  7877                           	opt stack 0
  7878  011CE0                     _LCDWriteByte:
  7879                           	opt stack 27
  7880                           
  7881                           ;incstack = 0
  7882                           ;LCDWriteByte@c stored from wreg
  7883  011CE0  6E04               	movwf	LCDWriteByte@c,c
  7884                           
  7885                           ;LCD.c: 261: unsigned char comFlags = 0;
  7886  011CE2  0E00               	movlw	0
  7887  011CE4  6E05               	movwf	LCDWriteByte@comFlags,c
  7888                           
  7889                           ;LCD.c: 262: if (rs) {
  7890  011CE6  5003               	movf	LCDWriteByte@rs,w,c
  7891  011CE8  B4D8               	btfsc	status,2,c
  7892  011CEA  D002               	goto	l2658
  7893                           
  7894                           ;LCD.c: 263: comFlags = 0b10000000;
  7895  011CEC  0E80               	movlw	128
  7896  011CEE  6E05               	movwf	LCDWriteByte@comFlags,c
  7897  011CF0                     l2658:
  7898                           
  7899                           ;LCD.c: 264: }
  7900                           ;LCD.c: 265: WriteRegister(0x12, comFlags);
  7901  011CF0  C005  F001         	movff	LCDWriteByte@comFlags,WriteRegister@b
  7902  011CF4  0E12               	movlw	18
  7903  011CF6  EC27  F08F         	call	_WriteRegister
  7904                           
  7905                           ;LCD.c: 266: WriteRegister(0x13, c);
  7906  011CFA  C004  F001         	movff	LCDWriteByte@c,WriteRegister@b
  7907  011CFE  0E13               	movlw	19
  7908  011D00  EC27  F08F         	call	_WriteRegister
  7909                           
  7910                           ;LCD.c: 267: WriteRegister(0x12, comFlags | 0b01000000);
  7911  011D04  5005               	movf	LCDWriteByte@comFlags,w,c
  7912  011D06  0940               	iorlw	64
  7913  011D08  6E01               	movwf	WriteRegister@b,c
  7914  011D0A  0E12               	movlw	18
  7915  011D0C  EC27  F08F         	call	_WriteRegister
  7916                           
  7917                           ;LCD.c: 268: WriteRegister(0x12, comFlags);
  7918  011D10  C005  F001         	movff	LCDWriteByte@comFlags,WriteRegister@b
  7919  011D14  0E12               	movlw	18
  7920  011D16  EC27  F08F         	call	_WriteRegister
  7921  011D1A  0012               	return		;funcret
  7922  011D1C                     __end_of_LCDWriteByte:
  7923                           	opt stack 0
  7924                           tblptru	equ	0xFF8
  7925                           tblptrh	equ	0xFF7
  7926                           tblptrl	equ	0xFF6
  7927                           tablat	equ	0xFF5
  7928                           prodh	equ	0xFF4
  7929                           prodl	equ	0xFF3
  7930                           postinc0	equ	0xFEE
  7931                           wreg	equ	0xFE8
  7932                           postdec1	equ	0xFE5
  7933                           fsr1l	equ	0xFE1
  7934                           indf2	equ	0xFDF
  7935                           postinc2	equ	0xFDE
  7936                           postdec2	equ	0xFDD
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function _WriteRegister *****************
  7942 ;; Defined at:
  7943 ;;		line 320 in file "LCD.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;  reg             1    wreg     unsigned char 
  7946 ;;  b               1    0[COMRAM] unsigned char 
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  reg             1    1[COMRAM] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;		None               void
  7951 ;; Registers used:
  7952 ;;		wreg, status,2
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7958 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;Total ram usage:        2 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_LCDWriteByte
  7968 ;;		_LCDInitPort
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text43
  7973  011E4E                     __ptext43:
  7974                           	opt stack 0
  7975  011E4E                     _WriteRegister:
  7976                           	opt stack 27
  7977                           
  7978                           ;incstack = 0
  7979                           ;WriteRegister@reg stored from wreg
  7980  011E4E  6E02               	movwf	WriteRegister@reg,c
  7981                           
  7982                           ;LCD.c: 321: LATAbits.LATA2 = 0;
  7983  011E50  9489               	bcf	3977,2,c	;volatile
  7984                           
  7985                           ;LCD.c: 322: SSPBUF = 0x40;
  7986  011E52  0E40               	movlw	64
  7987  011E54  6EC9               	movwf	4041,c	;volatile
  7988  011E56                     l365:
  7989  011E56  A69E               	btfss	3998,3,c	;volatile
  7990  011E58  D7FE               	goto	l365
  7991                           
  7992                           ;LCD.c: 324: SSPIF = 0;
  7993  011E5A  969E               	bcf	3998,3,c	;volatile
  7994                           
  7995                           ;LCD.c: 325: SSPBUF = reg;
  7996  011E5C  C002  FFC9         	movff	WriteRegister@reg,4041	;volatile
  7997  011E60                     l368:
  7998  011E60  A69E               	btfss	3998,3,c	;volatile
  7999  011E62  D7FE               	goto	l368
  8000                           
  8001                           ;LCD.c: 327: SSPIF = 0;
  8002  011E64  969E               	bcf	3998,3,c	;volatile
  8003                           
  8004                           ;LCD.c: 328: SSPBUF = b;
  8005  011E66  C001  FFC9         	movff	WriteRegister@b,4041	;volatile
  8006  011E6A                     l371:
  8007  011E6A  A69E               	btfss	3998,3,c	;volatile
  8008  011E6C  D7FE               	goto	l371
  8009                           
  8010                           ;LCD.c: 330: SSPIF = 0;
  8011  011E6E  969E               	bcf	3998,3,c	;volatile
  8012                           
  8013                           ;LCD.c: 331: LATAbits.LATA2 = 1;
  8014  011E70  8489               	bsf	3977,2,c	;volatile
  8015  011E72  0012               	return		;funcret
  8016  011E74                     __end_of_WriteRegister:
  8017                           	opt stack 0
  8018                           tblptru	equ	0xFF8
  8019                           tblptrh	equ	0xFF7
  8020                           tblptrl	equ	0xFF6
  8021                           tablat	equ	0xFF5
  8022                           prodh	equ	0xFF4
  8023                           prodl	equ	0xFF3
  8024                           postinc0	equ	0xFEE
  8025                           wreg	equ	0xFE8
  8026                           postdec1	equ	0xFE5
  8027                           fsr1l	equ	0xFE1
  8028                           indf2	equ	0xFDF
  8029                           postinc2	equ	0xFDE
  8030                           postdec2	equ	0xFDD
  8031                           fsr2h	equ	0xFDA
  8032                           fsr2l	equ	0xFD9
  8033                           status	equ	0xFD8
  8034                           tblptru	equ	0xFF8
  8035                           tblptrh	equ	0xFF7
  8036                           tblptrl	equ	0xFF6
  8037                           tablat	equ	0xFF5
  8038                           prodh	equ	0xFF4
  8039                           prodl	equ	0xFF3
  8040                           postinc0	equ	0xFEE
  8041                           wreg	equ	0xFE8
  8042                           postdec1	equ	0xFE5
  8043                           fsr1l	equ	0xFE1
  8044                           indf2	equ	0xFDF
  8045                           postinc2	equ	0xFDE
  8046                           postdec2	equ	0xFDD
  8047                           fsr2h	equ	0xFDA
  8048                           fsr2l	equ	0xFD9
  8049                           status	equ	0xFD8
  8050                           
  8051                           	psect	rparam
  8052  0000                     tblptru	equ	0xFF8
  8053                           tblptrh	equ	0xFF7
  8054                           tblptrl	equ	0xFF6
  8055                           tablat	equ	0xFF5
  8056                           prodh	equ	0xFF4
  8057                           prodl	equ	0xFF3
  8058                           postinc0	equ	0xFEE
  8059                           wreg	equ	0xFE8
  8060                           postdec1	equ	0xFE5
  8061                           fsr1l	equ	0xFE1
  8062                           indf2	equ	0xFDF
  8063                           postinc2	equ	0xFDE
  8064                           postdec2	equ	0xFDD
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    374
    Data        16
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      92
    BANK0           160     23      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 17
		 -> str0(BANK0[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCDWriteLine@str	PTR const unsigned char  size(2) Largest target is 17
		 -> LCDScroll@str(COMRAM[17]), str0(BANK0[17]), 

    ReadDS18S20PAR@rc	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    OWCRC@buff	PTR unsigned char  size(2) Largest target is 9
		 -> ReadDS18B20PAR@sp(COMRAM[9]), ReadDS18B20@sp(COMRAM[9]), ReadDS18S20PAR@sp(COMRAM[9]), ReadDS18S20@sp(COMRAM[9]), 
		 -> OWSearchRomCode(COMRAM[8]), 

    OWWriteBytes@buff	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    OWReadBytes@buff	PTR unsigned char  size(2) Largest target is 9
		 -> ReadDS18B20PAR@sp(COMRAM[9]), ReadDS18B20@sp(COMRAM[9]), ReadDS18S20PAR@sp(COMRAM[9]), ReadDS18S20@sp(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _ReadDS18S20PAR->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _OWWriteBytes->_OWWriteByte
    _OWReadBytes->_OWReadByte
    _LCDWriteLine->_LCDSetPos
    _LCDWriteData->_LCDWriteByte
    _LCDSetPos->_LCDCommand
    _LCDInit->_LCDInitCommand
    _LCDInitPort->_WriteRegister
    _LCDInitCommand->_LCDWriteByte
    _LCDClear->_LCDCommand
    _LCDCommand->_LCDWriteByte
    _LCDWriteByte->_WriteRegister

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   57709
                                             76 COMRAM     6     6      0
                           _LCDClear
                            _LCDInit
                       _LCDWriteLine
                             _OWInit
                     _ReadDS18S20PAR
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   43837
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10437
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10239
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4329
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1708
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3860
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3563
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _ReadDS18S20PAR                                      14    11      3    8718
                                             27 COMRAM    14    11      3
                              _OWCRC
                        _OWReadBytes
                            _OWReset
                        _OWWriteByte
                       _OWWriteBytes
                           ___awtoft
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3003
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2584
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _OWWriteBytes                                         7     3      4    1189
                                              2 COMRAM     7     3      4
                        _OWWriteByte
 ---------------------------------------------------------------------------------
 (3) _OWWriteByte                                          2     2      0      69
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _OWReset                                              2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _OWReadBytes                                          7     3      4     679
                                              2 COMRAM     7     3      4
                         _OWReadByte
 ---------------------------------------------------------------------------------
 (3) _OWReadByte                                           2     2      0      71
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _OWCRC                                                9     5      4     904
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _OWInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteLine                                         4     1      3    2978
                                             13 COMRAM     4     1      3
                          _LCDSetPos
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (2) _LCDWriteData                                         1     1      0     818
                                              5 COMRAM     1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (2) _LCDSetPos                                            7     3      4    1575
                                              6 COMRAM     7     3      4
                         _LCDCommand
                      _calculateBase
 ---------------------------------------------------------------------------------
 (3) _calculateBase                                        2     2      0      90
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0    1333
                                              6 COMRAM     2     2      0
                     _LCDInitCommand
                        _LCDInitPort
 ---------------------------------------------------------------------------------
 (2) _LCDInitPort                                          0     0      0     492
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _LCDInitCommand                                       1     1      0     818
                                              5 COMRAM     1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             0     0      0     818
                         _LCDCommand
                          _longDelay
 ---------------------------------------------------------------------------------
 (2) _longDelay                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCDCommand                                           1     1      0     818
                                              5 COMRAM     1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (3) _wait                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _shortDelay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCDWriteByte                                         3     2      1     796
                                              2 COMRAM     3     2      1
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _WriteRegister                                        2     1      1     492
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDClear
     _LCDCommand
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
     _longDelay
   _LCDInit
     _LCDInitCommand
       _LCDWriteByte
         _WriteRegister
     _LCDInitPort
       _WriteRegister
   _LCDWriteLine
     _LCDSetPos
       _LCDCommand
         _LCDWriteByte
           _WriteRegister
         _shortDelay
         _wait
       _calculateBase
     _LCDWriteData
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
   _OWInit
   _ReadDS18S20PAR
     _OWCRC
     _OWReadBytes
       _OWReadByte
     _OWReset
     _OWWriteByte
     _OWWriteBytes
       _OWWriteByte
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0       0      37        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      49       5       45.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     52      5C       1       96.8%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5      12        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 06 18:13:11 2017

    __end_of_OWWriteByte 1C20             ?_LCDInitPort 0001     __end_of_OWWriteBytes 1DC2  
            _SSPSTATbits 000FC7                       l63 1BEA                       l65 1C04  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011             ___ftadd@exp1 0039  
           ___ftadd@exp2 0038             ___ftadd@sign 0037                      l171 12E6  
                    l371 1E6A                      l284 1BDA                      l452 0576  
                    l365 1E56                      l368 1E60                      l732 0ECE  
                    l709 16EC                      l806 1E8A                      l736 0EF8  
                    l747 0FA8                      l756 0FC4                      l677 127E  
                    l781 1156                      l774 10C8                      l767 162C  
                    l775 10F0                      l856 1920                      l866 1A6C  
             _OWReadByte 1D54             ___awmod@sign 0006          ?_LCDInitCommand 0001  
                    wreg 000FE8          __end_of_LCDInit 1B96             ___ftdiv@cntr 0016  
           ___ftdiv@sign 001B                     l3010 1ABA                     l3002 1DAC  
                   l3006 1A88                     l3102 0B46                     l3120 1EAE  
                   l3130 1062                     l3108 0BF6                     l3046 1BAE  
                   l3302 1D30                     l3310 173C                     l3230 1254  
                   l3214 1216                     l3206 11E6                     l3070 0E44  
                   l3062 0D78                     l3048 1BBE                     l3320 1798  
                   l3400 1A2A                     l3136 108E                     l3314 176C  
                   l3402 1A36                     l3226 1244                     l3170 112C  
                   l3090 09DE                     l3252 15C8                     l3404 1A3A  
                   l3236 126C                     l3084 092E                     l2710 1D64  
                   l3246 15A0                     l3334 14B0                     l3414 1AE8  
                   l3238 1278                     l3166 111C                     l3094 0A08  
                   l3502 000E                     l3272 1606                     l3352 1516  
                   l3408 1A5E                     l3416 1AF4                     l3192 11A4  
                   l3176 1144                     l3520 0098                     l2730 1D88  
                   l2706 1D5C                     l2810 0F36                     l3290 1C78  
                   l3370 1566                     l3362 153E                     l3186 1186  
                   l3178 1150                     l3602 03A2                     l3530 00C8  
                   l3522 00B2                     l3460 12BE                     l2820 0F6C  
                   l3364 154A                     l3356 1526                     l3380 18D2  
                   l3620 045A                     l3532 00F0                     l3516 005A  
                   l3508 0026                     l3700 07BC                     l3710 17A4  
                   l2750 1C10                     l2830 0FA0                     l2822 0F74  
                   l3366 1550                     l3382 18DE                     l3606 0408  
                   l3526 00C2                     l3702 07DA                     l3720 17D6  
                   l3712 17B8                     l2736 1BE2                     l2680 16A4  
                   l2672 166E                     l3472 12D4                     l3456 12A4  
                   l2816 0F58                     l3392 1912                     l3384 18E2  
                   l2920 186E                     l2912 1850                     l3624 047E  
                   l3608 040E                     l2658 1CF0                     l2770 1ED0  
                   l3730 181C                     l3482 12FE                     l2818 0F62  
                   l2930 188E                     l2922 1872                     l2906 1840  
                   l3642 0544                     l3626 0484                     l3634 051E  
                   l3538 010A                     l3724 17F6                     l2684 16BA  
                   l2676 167C                     l3468 12CC                     l2836 0FE0  
                   l2828 0F96                     l3660 05FA                     l3644 0558  
                   l3636 052C                     l3580 02C6                     l3572 025A  
                   l3564 01F2                     l3548 0150                     l3726 180A  
                   l2686 16D8                     l2678 1686                     l3486 1318  
                   l2846 1010                     l2918 1866                     l2934 1898  
                   l2950 19BC                     l2862 13E0                     l3670 06EA  
                   l3582 02DC                     l2768 1EC6                     l3728 1818  
                   l2688 16E2                     l3496 1382                     l2960 19DE  
                   l2880 1422                     l2856 13B8                     l3672 06F8  
                   l3656 05A8                     l3648 057A                     l3592 0344  
                   l3576 0280                     l3680 071E                     l2794 0F06  
                   l2938 18A6                     l2962 19E2                     l2970 1A00  
                   l2954 19C8                     l2890 144A                     l3690 0768  
                   l3578 0296                     l2788 0EDC                     l2876 1412  
                   l3588 031E                     l2990 1DCC                     l2974 1A0E  
                   l2966 19F6                     l2958 19D6                     l2886 143A  
                   l3694 0794                     l3686 0744                     l3678 0710  
                   l2994 1DE2                     l3698 07B8                     l3778 195C  
                   l2998 1D96                     STR_1 FFF5                     u3111 1588  
                   u3131 15B0                     u3221 1494                     u3240 14CE  
                   u2361 0E9A                     u2371 0EAE                     u3245 14C6  
                   u2800 1ADE                     u4307 12DA                     u2571 13A0  
                   u4317 1BF2                     u2750 1C5E                     u4407 1D80  
                   u4327 1BFC                     u2591 13C8                     u4417 1B4C  
                   u4337 1C08                     u3650 056E                     u3490 0190  
                   u4427 1B5C                     u4347 1C16                     u4437 1B6A  
                   u4357 1C28                     u4447 1B7C                     u4367 1C36  
                   u2951 1046                     u3495 0186                     u4457 1B8E  
                   u4377 1C4A                     u4467 1F16                     u4387 1D6C  
                   u2971 1072                     u4477 1F3C                     u4397 1D76  
                   _main 1932             ___ftpack@arg 0001             ___ftpack@exp 0004  
            _OWReadBytes 1DC2                     _str0 0071                     _str1 0060  
                   _wait 1F4C                     fsr2h 000FDA                     fsr1l 000FE1  
                   indf2 000FDF                     fsr2l 000FD9       __size_of_LCDSetPos 0046  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
        __end_of_OWReset 1C62             _sprintf$1855 0082             ___ftmul@cntr 0022  
           ___param_bank 000010             ___ftmul@sign 0023         __end_of_LCDClear 1F3A  
           ___fttol@exp1 0039             ___fttol@lval 0035            ?_LCDWriteData 0001  
          ?_LCDWriteByte 0003            ?_LCDWriteLine 000E                    ?_main 0001  
        __end_of___awdiv 18B0          __end_of___ftadd 1036          __end_of___awmod 1A18  
                  ?_wait 0001          __end_of___ftdiv 165E          __end_of___ftneg 1E98  
        __end_of___lldiv 1932          __end_of___ftmul 1484          ___awdiv@divisor 0009  
        __end_of___llmod 1A7E          __end_of___ftsub 1CA2          __end_of___fttol 1578  
        ___awdiv@counter 000B                    _OWCRC 1A7E                    _TRISD 000F95  
                  _SSPIF 007CF3   __size_of_WriteRegister 0026             ___lltoft@exp 0011  
    __size_of_LCDCommand 0016                    _code0 0099                    _code1 00A1  
          ___awtoft@sign 000C          __end_of_dpowers FFA7                    _scale 07E8  
        __end_of_isdigit 1EB6            ___ftpack@sign 0005                    tablat 000FF5  
                  status 000FD8          _OWSearchRomCode 0055          __end_of_sprintf 07E8  
            _OWWriteByte 1BDC          __initialization 1CA2             LCDSetPos@col 0009  
           LCDSetPos@pos 000C             LCDSetPos@row 0007             __end_of_main 19A8  
           __end_of_wait 1F4E           ??_LCDWriteData 0006           ??_LCDWriteByte 0004  
         ??_LCDWriteLine 0011                   ??_main 004D            ___fttol@sign1 0034  
                 ??_wait 0001            __activetblptr 000003        __end_of_LCDSetPos 1BDC  
              ??_LCDInit 0007                   ?_OWCRC 0001              ?_OWReadByte 0001  
   __size_of__tdiv_to_l_ 0132                   OWCRC@i 0009         ___llmod@dividend 0001  
                 ?_scale 0024         ___awdiv@dividend 0007         __end_of___awtoft 1D54  
       __end_of___ftpack 170C         __end_of___lltoft 1B3E                ??_OWReset 0001  
         __CFG_WDTEN$OFF 000000                   _SSPBUF 000FC9                   _OWInit 1F44  
       ??_ReadDS18S20PAR 001F            _WriteRegister 1E4E    __size_of_OWWriteBytes 0036  
         __CFG_XINST$OFF 000000         __end_of__powers_ FFF5                   ___ftge 170C  
                 ___wmul 1E28                ??___awdiv 000B                ??___ftadd 0034  
              ??___awmod 0005                ??___ftdiv 0013                ??___ftneg 0004  
              ??___lldiv 0009                ??___ftmul 001B                ??___llmod 0009  
              ??___ftsub 0040                ??___fttol 002F                   _fround 0C20  
                 clear_0 1CA8                   clear_1 1CB4     __size_of_LCDInitPort 0030  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
                 main@t0 0050                   main@t1 004D    ___ftmul@f3_as_product 001F  
              ??_isdigit 0001             __mediumconst FE7E                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0047  
           _OWWriteBytes 1D8C          __CFG_FOSC$HSPLL 000000                ?_LCDClear 0001  
          OWWriteBytes@i 0008               __accesstop 0060  __end_of__initialization 1CDA  
             ___ftadd@f1 002E               ___ftadd@f2 0031               ___ftge@ff1 0001  
             ___ftge@ff2 0004           ?_WriteRegister 0001            ___rparam_used 000001  
             ___ftdiv@f1 000D               ___ftdiv@f2 0010               ___ftdiv@f3 0017  
             ___ftneg@f1 0001            __end_of_OWCRC 1AE2               ___awtoft@c 0009  
           ??_LCDCommand 0006      __size_of_OWReadByte 0038         WriteRegister@reg 0002  
             ___ftmul@f1 0015               ___ftmul@f2 0018               ___ftsub@f1 003A  
             ___ftsub@f2 003D               ___fttol@f1 002B           __pcstackCOMRAM 0001  
           __pidataBANK0 1F00               ___lltoft@c 0009            __end_of_scale 0C20  
       ??_LCDInitCommand 0006               __div_to_l_ 1168                  ??_OWCRC 0005  
        __div_to_l_@exp1 000C       __end_of_LCDCommand 1F00          __div_to_l_@cntr 000B  
                ??_scale 0027          __div_to_l_@quot 0007     __end_of_LCDWriteData 1EEA  
             __pbssBANK0 0060     __end_of_LCDWriteByte 1D1C     __end_of_LCDWriteLine 182C  
             ??_LCDClear 0007           WriteRegister@b 0001             ?_OWReadBytes 0003  
                ?_OWInit 0001            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
     __size_of_longDelay 0010          ReadDS18S20PAR@i 0020    LCDInitCommand@command 0006  
                ?___ftge 0001                  ?___wmul 000F                OWCRC@buff 0001  
                ?_fround 0024                ?___awtoft 0009                ?___ftpack 0001  
           OWReadBytes@i 0008                ?___lltoft 0009   __size_of_calculateBase 001E  
                _LCDInit 1B3E                  _SSPCON1 000FC6                  _OWReset 1C20  
        ??_WriteRegister 0002       LCDInit@functionSet 0008             ?_OWWriteByte 0001  
             _lastDevice 0053          __size_of_OWInit 0008        __end_of__npowers_ FFCE  
                __Hparam 0000               _scale$1854 0027                  __Lparam 0000  
     __end_of_OWCRCTable FF7F           OWReadBytes@len 0005          __size_of___ftge 0090  
                ___awdiv 182C                  ___ftadd 0E8A                  ___awmod 19A8  
                ___ftdiv 1578                  ___ftneg 1E74                  ___lldiv 18B0  
        __size_of___wmul 0026                  ___ftmul 1390                  ___llmod 1A18  
                ___ftsub 1C62                  ___fttol 1484                  __pcinit 1CA2  
             ??___awtoft 000C               ??___ftpack 0006          __size_of_fround 026A  
                __ramtop 1000               ??___lltoft 000D                  __ptext0 1932  
                __ptext1 0000                  __ptext2 07E8                  __ptext3 1E98  
                __ptext4 0C20                  __ptext5 1E28                  __ptext6 1390  
                __ptext7 19A8                  __ptext8 182C                  __ptext9 1036  
            ?__div_to_l_ 0001                  _dpowers FF7F             ??_OWReadByte 0001  
                _isdigit 1E98         ___awmod@dividend 0001        __end_of_longDelay 1F20  
              _LCDSetPos 1B96                  _sprintf 0000     end_of_initialization 1CDA  
          LCDWriteData@c 0006            _calculateBase 1EB6            LCDWriteByte@c 0004  
        ___lldiv@divisor 0005          ___lldiv@counter 000D       __end_of_OWReadByte 1D8C  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??__tdiv_to_l_ 0007               _shortDelay 1F3A                _PORTJbits 000F88  
  __size_of_LCDWriteData 0016    __size_of_LCDWriteByte 003C    __size_of_LCDWriteLine 0090  
              _TRISAbits 000F92                _TRISCbits 000F94                _TRISJbits 000F9A  
             ?_LCDSetPos 0007           ?_calculateBase 0001              ___ftdiv@exp 001A  
      __size_of_LCDClear 000C          _lastDiscrepancy 0054      __size_of__div_to_l_ 0128  
         __end_of_OWInit 1F4C     __size_of_OWReadBytes 0036              ___ftmul@exp 001E  
          ??_LCDInitPort 0003           __end_of___ftge 179C           __end_of___wmul 1E4E  
           _LCDWriteData 1ED4             _LCDWriteByte 1CE0             _LCDWriteLine 179C  
         __end_of_fround 0E8A      start_initialization 1CA2      __end_of__tdiv_to_l_ 1168  
        ___llmod@divisor 0005                 ??_OWInit 0001          ___llmod@counter 0009  
   __size_of_OWWriteByte 0044                 ??___ftge 0007                 ??___wmul 0013  
            __pdataBANK0 0099                 ??_fround 0027  __size_of_ReadDS18S20PAR 0100  
            ?_shortDelay 0001            sprintf@tmpval 008F      __end_of_LCDInitPort 1E28  
           OWWriteByte@b 0001             OWWriteByte@i 0002          OWReset@presence 0002  
             fround@prec 002D        __size_of___awtoft 0038                 ?_LCDInit 0001  
      __size_of___ftpack 00AE        __size_of___lltoft 005C              __pbssCOMRAM 0053  
          __pcstackBANK0 0082              ??_LCDSetPos 000B             _isdigit$1472 0002  
        ??_calculateBase 0001                 ?_OWReset 0001              sprintf@flag 0087  
            sprintf@fval 0095              sprintf@prec 0093         ReadDS18S20PAR@rc 001C  
       ReadDS18S20PAR@sp 0021            __pmediumconst FE7E                 OWCRC@crc 0008  
               OWCRC@len 0003                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001              OWReadByte@b 0001              OWReadByte@i 0002  
               ?___ftdiv 000D                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0015                 ?___llmod 0001                 ?___ftsub 003A  
              __npowers_ FFA7                 ?___fttol 002B         LCDWriteLine@line 0010  
            __tdiv_to_l_ 1036             ??__div_to_l_ 0007        LCDCommand@command 0006  
         __size_of_OWCRC 0064                 ?_isdigit 0001  __size_of_LCDInitCommand 000E  
               ?_sprintf 0040           __size_of_scale 0438                _longDelay 1F10  
               _LCDClear 1F2E           ___wmul@product 0013                 _LATAbits 000F89  
               _LATDbits 000F8C      __size_of_shortDelay 000A                 _LATJbits 000F91  
  __end_of_WriteRegister 1E74       __end_of__div_to_l_ 1290              _LCDInitPort 1DF8  
      ___wmul@multiplier 000F         __size_of_LCDInit 0058                copy_data0 1CCE  
          ?_OWWriteBytes 0003               ?_longDelay 0001         __size_of_OWReset 0042  
               __Hrparam 0000     LCDWriteByte@comFlags 0005                 __Lrparam 0000  
        OWReadBytes@buff 0003         __size_of___awdiv 0084         __size_of___ftadd 01AC  
       __size_of___awmod 0070         __size_of___ftdiv 00E6         __size_of___ftneg 0024  
       __size_of___lldiv 0082         __size_of___ftmul 00F4           _ReadDS18S20PAR 1290  
       __size_of___llmod 0066         __size_of___ftsub 0040         __size_of___fttol 00F4  
               ___awtoft 1D1C                 ___ftpack 165E              _fround$1852 002A  
            _fround$1853 0027                 ___lltoft 1AE2               sprintf@exp 008D  
             sprintf@val 0089         __size_of_isdigit 001E                 __ptext10 1168  
               __ptext11 1AE2                 __ptext20 1578                 __ptext12 1A18  
               __ptext21 1D1C                 __ptext13 18B0                 __ptext30 179C  
               __ptext22 165E                 __ptext14 1484                 __ptext31 1ED4  
               __ptext23 1D8C                 __ptext15 1C62                 __ptext40 1F4C  
               __ptext32 1B96                 __ptext24 1BDC                 __ptext16 0E8A  
               __ptext41 1F3A                 __ptext33 1EB6                 __ptext25 1C20  
               __ptext17 1E74                 __ptext42 1CE0                 __ptext34 1B3E  
               __ptext26 1DC2                 __ptext18 170C                 __ptext43 1E4E  
               __ptext35 1DF8                 __ptext27 1D54                 __ptext19 1290  
               __ptext36 1F20                 __ptext28 1A7E                 __ptext37 1F2E  
               __ptext29 1F44                 __ptext38 1F10                 __ptext39 1EEA  
         ??_OWWriteBytes 0007                 __powers_ FFCE          LCDWriteLine@str 000E  
       __size_of_sprintf 07E8            ??_OWReadBytes 0007            __size_of_main 0076  
          __size_of_wait 0002               _LCDCommand 1EEA        calculateBase@base 0001  
      calculateBase@line 0002   __end_of_ReadDS18S20PAR 1390             ??_shortDelay 0001  
            _OSCTUNEbits 000F9B                 isdigit@c 0003           _LCDInitCommand 1F20  
               scale@scl 002A              ??_longDelay 0001                sprintf@ap 0085  
       __tdiv_to_l_@exp1 000F                sprintf@sp 0040         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A           LCDWriteByte@rs 0003            ??_OWWriteByte 0001  
       ___lldiv@dividend 0001       __end_of_shortDelay 1F44      __end_of_OWReadBytes 1DF8  
        ?_ReadDS18S20PAR 001C             ?__tdiv_to_l_ 0001                 sprintf@c 0098  
               sprintf@f 0042               _OWCRCTable FE7F         ___lldiv@quotient 0009  
 __end_of_LCDInitCommand 1F2E    __end_of_calculateBase 1ED4         OWWriteBytes@buff 0003  
        OWWriteBytes@len 0005              ?_LCDCommand 0001  
