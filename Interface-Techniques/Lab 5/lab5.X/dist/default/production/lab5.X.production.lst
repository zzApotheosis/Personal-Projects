

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Mar 15 18:51:15 2017

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F66K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	idataBANK0
    44  00199C                     __pidataBANK0:
    45                           	opt stack 0
    46                           
    47                           ;initializer for _lcdStr
    48  00199C  52                 	db	82
    49  00199D  75                 	db	117
    50  00199E  6E                 	db	110
    51  00199F  6E                 	db	110
    52  0019A0  69                 	db	105
    53  0019A1  6E                 	db	110
    54  0019A2  67                 	db	103
    55  0019A3  00                 	db	0
    56  0019A4  00                 	db	0
    57  0019A5  00                 	db	0
    58  0019A6  00                 	db	0
    59  0019A7  00                 	db	0
    60  0019A8  00                 	db	0
    61  0019A9  00                 	db	0
    62  0019AA  00                 	db	0
    63  0019AB  00                 	db	0
    64  0019AC  00                 	db	0
    65                           
    66                           	psect	smallconst
    67  000F00                     __psmallconst:
    68                           	opt stack 0
    69  000F00  00                 	db	0
    70  000F01                     _dpowers:
    71                           	opt stack 0
    72  000F01  0001               	dw	1
    73  000F03  000A               	dw	10
    74  000F05  0064               	dw	100
    75  000F07  03E8               	dw	1000
    76  000F09  2710               	dw	10000
    77  000F0B                     __end_of_dpowers:
    78                           	opt stack 0
    79  000F0B                     _hexpowers:
    80                           	opt stack 0
    81  000F0B  0001               	dw	1
    82  000F0D  0010               	dw	16
    83  000F0F  0100               	dw	256
    84  000F11  1000               	dw	4096
    85  000F13                     __end_of_hexpowers:
    86                           	opt stack 0
    87  0000                     _BRGCON1bits	set	3651
    88  0000                     _BRGCON2bits	set	3652
    89  0000                     _BRGCON3bits	set	3653
    90  0000                     _RXF0SIDH	set	3808
    91  0000                     _RXF0SIDLbits	set	3809
    92  0000                     _RXF1SIDH	set	3812
    93  0000                     _RXF1SIDLbits	set	3813
    94  0000                     _RXF2SIDH	set	3816
    95  0000                     _RXF2SIDLbits	set	3817
    96  0000                     _RXF3SIDH	set	3820
    97  0000                     _RXF3SIDLbits	set	3821
    98  0000                     _RXF4SIDH	set	3824
    99  0000                     _RXF4SIDLbits	set	3825
   100  0000                     _RXF5SIDH	set	3828
   101  0000                     _RXF5SIDLbits	set	3829
   102  0000                     _RXM0SIDH	set	3832
   103  0000                     _RXM0SIDLbits	set	3833
   104  0000                     _RXM1SIDH	set	3836
   105  0000                     _RXM1SIDLbits	set	3837
   106  0000                     _ANCON0	set	3933
   107  0000                     _ANCON1	set	3932
   108  0000                     _RXB1CONbits	set	3888
   109  0000                     _TXB0CONbits	set	3872
   110  0000                     _TXB0D0	set	3878
   111  0000                     _TXB0DLC	set	3877
   112  0000                     _TXB0SIDH	set	3873
   113  0000                     _TXB0SIDLbits	set	3874
   114  0000                     _ADRES	set	4035
   115  0000                     _ADCON0bits	set	4034
   116  0000                     _ADCON1	set	4033
   117  0000                     _ADCON2	set	4032
   118  0000                     _CANCONbits	set	3951
   119  0000                     _CANSTATbits	set	3950
   120  0000                     _ECANCONbits	set	3954
   121  0000                     _INTCON2bits	set	4081
   122  0000                     _INTCONbits	set	4082
   123  0000                     _LATAbits	set	3977
   124  0000                     _LATD	set	3980
   125  0000                     _LATDbits	set	3980
   126  0000                     _OSCTUNEbits	set	3995
   127  0000                     _PIE5bits	set	3958
   128  0000                     _PIR5bits	set	3959
   129  0000                     _RCONbits	set	4048
   130  0000                     _RXB0CONbits	set	3936
   131  0000                     _RXB0D0	set	3942
   132  0000                     _RXB0DLC	set	3941
   133  0000                     _RXB0SIDH	set	3937
   134  0000                     _RXB0SIDL	set	3938
   135  0000                     _SSPBUF	set	4041
   136  0000                     _SSPCON1	set	4038
   137  0000                     _SSPSTATbits	set	4039
   138  0000                     _TRISAbits	set	3986
   139  0000                     _TRISB	set	3987
   140  0000                     _TRISBbits	set	3987
   141  0000                     _TRISCbits	set	3988
   142  0000                     _TRISD	set	3989
   143  0000                     _SSPIF	set	31987
   144  000F13                     STR_2:
   145                           
   146                           ; BSR set to: 15
   147  000F13  30                 	db	48	;'0'
   148  000F14  31                 	db	49	;'1'
   149  000F15  32                 	db	50	;'2'
   150  000F16  33                 	db	51	;'3'
   151  000F17  34                 	db	52	;'4'
   152  000F18  35                 	db	53	;'5'
   153  000F19  36                 	db	54	;'6'
   154  000F1A  37                 	db	55	;'7'
   155  000F1B  38                 	db	56	;'8'
   156  000F1C  39                 	db	57	;'9'
   157  000F1D  61                 	db	97	;'a'
   158  000F1E  62                 	db	98	;'b'
   159  000F1F  63                 	db	99	;'c'
   160  000F20  64                 	db	100	;'d'
   161  000F21  65                 	db	101	;'e'
   162  000F22  66                 	db	102	;'f'
   163  000F23  00                 	db	0
   164  000F24                     STR_1:
   165                           
   166                           ; BSR set to: 15
   167  000F24  49                 	db	73	;'I'
   168  000F25  44                 	db	68	;'D'
   169  000F26  3D                 	db	61	;'='
   170  000F27  25                 	db	37
   171  000F28  30                 	db	48	;'0'
   172  000F29  33                 	db	51	;'3'
   173  000F2A  78                 	db	120	;'x'
   174  000F2B  20                 	db	32
   175  000F2C  44                 	db	68	;'D'
   176  000F2D  61                 	db	97	;'a'
   177  000F2E  74                 	db	116	;'t'
   178  000F2F  61                 	db	97	;'a'
   179  000F30  3D                 	db	61	;'='
   180  000F31  25                 	db	37
   181  000F32  64                 	db	100	;'d'
   182  000F33  00                 	db	0
   183                           
   184                           ; #config settings
   185  000F34  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001760                     __pcinit:
   189                           	opt stack 0
   190  001760                     start_initialization:
   191                           	opt stack 0
   192  001760                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK0 (11 bytes)
   196  001760  EE00  F071         	lfsr	0,__pbssBANK0
   197  001764  0E0B               	movlw	11
   198  001766                     clear_0:
   199  001766  6AEE               	clrf	postinc0,c
   200  001768  06E8               	decf	wreg,f,c
   201  00176A  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to COMRAM (4 bytes)
   204  00176C  6A42               	clrf	(__pbssCOMRAM+3)& (0+255),c
   205  00176E  6A41               	clrf	(__pbssCOMRAM+2)& (0+255),c
   206  001770  6A40               	clrf	(__pbssCOMRAM+1)& (0+255),c
   207  001772  6A3F               	clrf	__pbssCOMRAM& (0+255),c
   208                           
   209                           ; Initialize objects allocated to BANK0 (17 bytes)
   210                           ; load TBLPTR registers with __pidataBANK0
   211  001774  0E9C               	movlw	low __pidataBANK0
   212  001776  6EF6               	movwf	tblptrl,c
   213  001778  0E19               	movlw	high __pidataBANK0
   214  00177A  6EF7               	movwf	tblptrh,c
   215  00177C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   216  00177E  6EF8               	movwf	tblptru,c
   217  001780  EE00  F060         	lfsr	0,__pdataBANK0
   218  001784  EE10 F011          	lfsr	1,17
   219  001788                     copy_data0:
   220  001788  0009               	tblrd		*+
   221  00178A  CFF5 FFEE          	movff	tablat,postinc0
   222  00178E  50E5               	movf	postdec1,w,c
   223  001790  50E1               	movf	fsr1l,w,c
   224  001792  E1FA               	bnz	copy_data0
   225  001794                     end_of_initialization:
   226                           	opt stack 0
   227  001794                     __end_of__initialization:
   228                           	opt stack 0
   229  001794  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   230  001796  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   231  001798  0E00               	movlw	low (__Lmediumconst shr (0+16))
   232  00179A  6EF8               	movwf	tblptru,c
   233  00179C  0100               	movlb	0
   234  00179E  EFE6  F009         	goto	_main	;jump to C main() function
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           postdec1	equ	0xFE5
   242                           fsr1l	equ	0xFE1
   243                           
   244                           	psect	bssCOMRAM
   245  00003F                     __pbssCOMRAM:
   246                           	opt stack 0
   247  00003F                     _buttonPressed:
   248                           	opt stack 0
   249  00003F                     	ds	1
   250  000040                     _len:
   251                           	opt stack 0
   252  000040                     	ds	1
   253  000041                     _msgCount:
   254                           	opt stack 0
   255  000041                     	ds	2
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           postdec1	equ	0xFE5
   263                           fsr1l	equ	0xFE1
   264                           
   265                           	psect	bssBANK0
   266  000071                     __pbssBANK0:
   267                           	opt stack 0
   268  000071                     _data:
   269                           	opt stack 0
   270  000071                     	ds	8
   271  000079                     _id:
   272                           	opt stack 0
   273  000079                     	ds	2
   274  00007B                     _update:
   275                           	opt stack 0
   276  00007B                     	ds	1
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           postdec1	equ	0xFE5
   284                           fsr1l	equ	0xFE1
   285                           
   286                           	psect	dataBANK0
   287  000060                     __pdataBANK0:
   288                           	opt stack 0
   289  000060                     _lcdStr:
   290                           	opt stack 0
   291  000060                     	ds	17
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           postdec1	equ	0xFE5
   299                           fsr1l	equ	0xFE1
   300                           
   301                           	psect	cstackBANK0
   302  00007C                     __pcstackBANK0:
   303                           	opt stack 0
   304  00007C                     main@time:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x0
   308  00007C                     	ds	4
   309  000080                     main@msg:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x4
   313  000080                     	ds	2
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           postdec1	equ	0xFE5
   321                           fsr1l	equ	0xFE1
   322                           
   323                           	psect	cstackCOMRAM
   324  000001                     __pcstackCOMRAM:
   325                           	opt stack 0
   326  000001                     ?i2___lwmod:
   327                           	opt stack 0
   328  000001                     i2WriteCANMsg@msgID:
   329                           	opt stack 0
   330  000001                     i2___lwmod@dividend:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x0
   334  000001                     	ds	2
   335  000003                     i2WriteCANMsg@data:
   336                           	opt stack 0
   337  000003                     i2___lwmod@divisor:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x2
   341  000003                     	ds	2
   342  000005                     i2WriteCANMsg@dataLen:
   343                           	opt stack 0
   344  000005                     i2___lwmod@counter:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x4
   348  000005                     	ds	1
   349  000006                     i2WriteCANMsg@priority:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x5
   353  000006                     	ds	1
   354  000007                     ??i2_WriteCANMsg:
   355                           
   356                           ; 0 bytes @ 0x6
   357  000007                     	ds	2
   358  000009                     i2WriteCANMsg@i:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x8
   362  000009                     	ds	1
   363  00000A                     ??_HighISR:
   364                           
   365                           ; 0 bytes @ 0x9
   366  00000A                     	ds	17
   367  00001B                     HighISR@i:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x1A
   371  00001B                     	ds	2
   372  00001D                     ??_ConfigCAN:
   373  00001D                     ??_isdigit:
   374  00001D                     ?___wmul:
   375                           	opt stack 0
   376  00001D                     ?___lwdiv:
   377                           	opt stack 0
   378  00001D                     calculateBase@base:
   379                           	opt stack 0
   380  00001D                     WriteRegister@b:
   381                           	opt stack 0
   382  00001D                     WriteCANMsg@msgID:
   383                           	opt stack 0
   384  00001D                     ___wmul@multiplier:
   385                           	opt stack 0
   386  00001D                     ___lwdiv@dividend:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x1C
   390  00001D                     	ds	1
   391  00001E                     calculateBase@line:
   392                           	opt stack 0
   393  00001E                     WriteRegister@reg:
   394                           	opt stack 0
   395  00001E                     _isdigit$2572:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x1D
   399  00001E                     	ds	1
   400  00001F                     LCDWriteByte@rs:
   401                           	opt stack 0
   402  00001F                     isdigit@c:
   403                           	opt stack 0
   404  00001F                     WriteCANMsg@data:
   405                           	opt stack 0
   406  00001F                     ___wmul@multiplicand:
   407                           	opt stack 0
   408  00001F                     ___lwdiv@divisor:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x1E
   412  00001F                     	ds	1
   413  000020                     LCDWriteByte@c:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x1F
   417  000020                     	ds	1
   418  000021                     LCDWriteByte@comFlags:
   419                           	opt stack 0
   420  000021                     WriteCANMsg@dataLen:
   421                           	opt stack 0
   422  000021                     ___wmul@product:
   423                           	opt stack 0
   424  000021                     ___lwdiv@quotient:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x20
   428  000021                     	ds	1
   429  000022                     LCDCommand@command:
   430                           	opt stack 0
   431  000022                     LCDInitCommand@command:
   432                           	opt stack 0
   433  000022                     LCDWriteData@c:
   434                           	opt stack 0
   435  000022                     WriteCANMsg@priority:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x21
   439  000022                     	ds	1
   440  000023                     ??_WriteCANMsg:
   441  000023                     ??_LCDInit:
   442  000023                     ___lwdiv@counter:
   443                           	opt stack 0
   444  000023                     LCDSetPos@row:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x22
   448  000023                     	ds	1
   449  000024                     ?___lwmod:
   450                           	opt stack 0
   451  000024                     LCDInit@functionSet:
   452                           	opt stack 0
   453  000024                     ___lwmod@dividend:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x23
   457  000024                     	ds	1
   458  000025                     WriteCANMsg@i:
   459                           	opt stack 0
   460  000025                     LCDSetPos@col:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x24
   464  000025                     	ds	1
   465  000026                     ___lwmod@divisor:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x25
   469  000026                     	ds	1
   470  000027                     ??_LCDSetPos:
   471                           
   472                           ; 0 bytes @ 0x26
   473  000027                     	ds	1
   474  000028                     ___lwmod@counter:
   475                           	opt stack 0
   476  000028                     LCDSetPos@pos:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x27
   480  000028                     	ds	1
   481  000029                     ?_sprintf:
   482                           	opt stack 0
   483  000029                     sprintf@sp:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x28
   487  000029                     	ds	1
   488  00002A                     LCDClearLine@c:
   489                           	opt stack 0
   490  00002A                     LCDWriteLine@str:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x29
   494  00002A                     	ds	1
   495  00002B                     LCDClearLine@line:
   496                           	opt stack 0
   497  00002B                     sprintf@f:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x2A
   501  00002B                     	ds	1
   502  00002C                     LCDWriteLine@line:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x2B
   506  00002C                     	ds	1
   507  00002D                     
   508                           ; 0 bytes @ 0x2C
   509  00002D                     	ds	4
   510  000031                     ??_sprintf:
   511                           
   512                           ; 0 bytes @ 0x30
   513  000031                     	ds	4
   514  000035                     sprintf@idx:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x34
   518  000035                     	ds	1
   519  000036                     sprintf@ap:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x35
   523  000036                     	ds	2
   524  000038                     sprintf@prec:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x37
   528  000038                     	ds	1
   529  000039                     sprintf@val:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x38
   533  000039                     	ds	2
   534  00003B                     sprintf@flag:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x3A
   538  00003B                     	ds	1
   539  00003C                     sprintf@width:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x3B
   543  00003C                     	ds	2
   544  00003E                     sprintf@c:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x3D
   548  00003E                     	ds	1
   549  00003F                     tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           postinc0	equ	0xFEE
   554                           wreg	equ	0xFE8
   555                           postdec1	equ	0xFE5
   556                           fsr1l	equ	0xFE1
   557                           
   558                           ; 0 bytes @ 0x3E
   559 ;;
   560 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   561 ;;
   562 ;; *************** function _main *****************
   563 ;; Defined at:
   564 ;;		line 37 in file "../CANMain.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;		None
   567 ;; Auto vars:     Size  Location     Type
   568 ;;  time            4    0[BANK0 ] long 
   569 ;;  msg             2    4[BANK0 ] int 
   570 ;; Return value:  Size  Location     Type
   571 ;;		None               void
   572 ;; Registers used:
   573 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   580 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   582 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   583 ;;Total ram usage:        6 bytes
   584 ;; Hardware stack levels required when called:    7
   585 ;; This function calls:
   586 ;;		_ConfigCAN
   587 ;;		_ConfigPins
   588 ;;		_ConfigSystem
   589 ;;		_LCDClearLine
   590 ;;		_LCDInit
   591 ;;		_LCDWriteLine
   592 ;;		_WriteCANMsg
   593 ;;		_sprintf
   594 ;; This function is called by:
   595 ;;		Startup code after reset
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text0
   600  0013CC                     __ptext0:
   601                           	opt stack 0
   602  0013CC                     _main:
   603                           	opt stack 24
   604                           
   605                           ;CANMain.c: 38: ConfigPins();
   606                           
   607                           ; BSR set to: 15
   608                           ;incstack = 0
   609  0013CC  ECDE  F00C         	call	_ConfigPins	;wreg free
   610                           
   611                           ;CANMain.c: 39: ConfigSystem();
   612  0013D0  EC88  F00C         	call	_ConfigSystem	;wreg free
   613                           
   614                           ;CANMain.c: 40: ConfigCAN();
   615  0013D4  EC45  F009         	call	_ConfigCAN	;wreg free
   616                           
   617                           ;CANMain.c: 41: LATD = 1;
   618  0013D8  0E01               	movlw	1
   619  0013DA  6E8C               	movwf	3980,c	;volatile
   620                           
   621                           ;CANMain.c: 42: LCDInit();
   622  0013DC  EC38  F00B         	call	_LCDInit	;wreg free
   623                           
   624                           ;CANMain.c: 43: LCDWriteLine(lcdStr, 0);
   625  0013E0  0E60               	movlw	low _lcdStr
   626  0013E2  6E2A               	movwf	LCDWriteLine@str,c
   627  0013E4  0E00               	movlw	high _lcdStr
   628  0013E6  6E2B               	movwf	LCDWriteLine@str+1,c
   629  0013E8  0E00               	movlw	0
   630  0013EA  6E2C               	movwf	LCDWriteLine@line,c
   631  0013EC  ECF0  F00A         	call	_LCDWriteLine	;wreg free
   632                           
   633                           ;CANMain.c: 44: INTCONbits.PEIE = 1;
   634  0013F0  8CF2               	bsf	intcon,6,c	;volatile
   635                           
   636                           ;CANMain.c: 45: INTCONbits.GIE = 1;
   637  0013F2  8EF2               	bsf	intcon,7,c	;volatile
   638                           
   639                           ;CANMain.c: 46: long time = 0;
   640  0013F4  0E00               	movlw	0
   641  0013F6  0100               	movlb	0	; () banked
   642  0013F8  6F7C               	movwf	main@time& (0+255),b
   643  0013FA  0E00               	movlw	0
   644  0013FC  6F7D               	movwf	(main@time+1)& (0+255),b
   645  0013FE  0E00               	movlw	0
   646  001400  6F7E               	movwf	(main@time+2)& (0+255),b
   647  001402  0E00               	movlw	0
   648  001404  6F7F               	movwf	(main@time+3)& (0+255),b
   649                           
   650                           ; BSR set to: 0
   651                           ;CANMain.c: 47: int msg = 20;
   652  001406  0E00               	movlw	0
   653  001408  0100               	movlb	0	; () banked
   654  00140A  6F81               	movwf	(main@msg+1)& (0+255),b
   655  00140C  0E14               	movlw	20
   656  00140E  6F80               	movwf	main@msg& (0+255),b
   657  001410                     l2350:
   658                           
   659                           ; BSR set to: 0
   660                           ;CANMain.c: 49: time++;
   661  001410  0E01               	movlw	1
   662  001412  0100               	movlb	0	; () banked
   663  001414  277C               	addwf	main@time& (0+255),f,b
   664  001416  0E00               	movlw	0
   665  001418  237D               	addwfc	(main@time+1)& (0+255),f,b
   666  00141A  237E               	addwfc	(main@time+2)& (0+255),f,b
   667  00141C  237F               	addwfc	(main@time+3)& (0+255),f,b
   668                           
   669                           ; BSR set to: 0
   670                           ;CANMain.c: 50: if (update) {
   671  00141E  0100               	movlb	0	; () banked
   672  001420  517B               	movf	_update& (0+255),w,b	;volatile
   673  001422  B4D8               	btfsc	status,2,c
   674  001424  D020               	goto	l2362
   675                           
   676                           ; BSR set to: 0
   677                           ;CANMain.c: 51: sprintf(lcdStr, "ID=%03x Data=%d", id, *((int *)data));
   678  001426  0E60               	movlw	low _lcdStr
   679  001428  6E29               	movwf	sprintf@sp,c
   680  00142A  0E00               	movlw	high _lcdStr
   681  00142C  6E2A               	movwf	sprintf@sp+1,c
   682  00142E  0E24               	movlw	low STR_1
   683  001430  6E2B               	movwf	sprintf@f,c
   684  001432  0E0F               	movlw	high STR_1
   685  001434  6E2C               	movwf	sprintf@f+1,c
   686  001436  C079  F02D         	movff	_id,?_sprintf+4	;volatile
   687  00143A  C07A  F02E         	movff	_id+1,?_sprintf+5	;volatile
   688  00143E  C071  F02F         	movff	_data,?_sprintf+6	;volatile
   689  001442  C072  F030         	movff	_data+1,?_sprintf+7	;volatile
   690  001446  EC9B  F007         	call	_sprintf	;wreg free
   691                           
   692                           ;CANMain.c: 52: LCDClearLine(1);
   693  00144A  0E01               	movlw	1
   694  00144C  EC31  F00C         	call	_LCDClearLine
   695                           
   696                           ;CANMain.c: 53: LCDWriteLine(lcdStr, 1);
   697  001450  0E60               	movlw	low _lcdStr
   698  001452  6E2A               	movwf	LCDWriteLine@str,c
   699  001454  0E00               	movlw	high _lcdStr
   700  001456  6E2B               	movwf	LCDWriteLine@str+1,c
   701  001458  0E01               	movlw	1
   702  00145A  6E2C               	movwf	LCDWriteLine@line,c
   703  00145C  ECF0  F00A         	call	_LCDWriteLine	;wreg free
   704                           
   705                           ;CANMain.c: 54: update = 0;
   706  001460  0E00               	movlw	0
   707  001462  0100               	movlb	0	; () banked
   708  001464  6F7B               	movwf	_update& (0+255),b	;volatile
   709  001466                     l2362:
   710                           
   711                           ; BSR set to: 0
   712                           ;CANMain.c: 55: }
   713                           ;CANMain.c: 57: if (time > 333333) {
   714  001466  0100               	movlb	0	; () banked
   715  001468  BF7F               	btfsc	(main@time+3)& (0+255),7,b
   716  00146A  D7D2               	goto	l2350
   717  00146C  0100               	movlb	0	; () banked
   718  00146E  517F               	movf	(main@time+3)& (0+255),w,b
   719  001470  E10B               	bnz	u1550
   720  001472  0E16               	movlw	22
   721  001474  0100               	movlb	0	; () banked
   722  001476  5D7C               	subwf	main@time& (0+255),w,b
   723  001478  0E16               	movlw	22
   724  00147A  0100               	movlb	0	; () banked
   725  00147C  597D               	subwfb	(main@time+1)& (0+255),w,b
   726  00147E  0E05               	movlw	5
   727  001480  0100               	movlb	0	; () banked
   728  001482  597E               	subwfb	(main@time+2)& (0+255),w,b
   729  001484  A0D8               	btfss	status,0,c
   730  001486  D7C4               	goto	l2350
   731  001488                     u1550:
   732                           
   733                           ; BSR set to: 0
   734                           ;CANMain.c: 58: WriteCANMsg(0x666, (void *) &msg, sizeof (msg), 0);
   735  001488  0E06               	movlw	6
   736  00148A  6E1E               	movwf	WriteCANMsg@msgID+1,c
   737  00148C  0E66               	movlw	102
   738  00148E  6E1D               	movwf	WriteCANMsg@msgID,c
   739  001490  0E80               	movlw	low main@msg
   740  001492  6E1F               	movwf	WriteCANMsg@data,c
   741  001494  0E00               	movlw	high main@msg
   742  001496  6E20               	movwf	WriteCANMsg@data+1,c
   743  001498  0E02               	movlw	2
   744  00149A  6E21               	movwf	WriteCANMsg@dataLen,c
   745  00149C  0E00               	movlw	0
   746  00149E  6E22               	movwf	WriteCANMsg@priority,c
   747  0014A0  EC5C  F00A         	call	_WriteCANMsg	;wreg free
   748                           
   749                           ;CANMain.c: 59: time = 0;
   750  0014A4  0E00               	movlw	0
   751  0014A6  0100               	movlb	0	; () banked
   752  0014A8  6F7C               	movwf	main@time& (0+255),b
   753  0014AA  0E00               	movlw	0
   754  0014AC  6F7D               	movwf	(main@time+1)& (0+255),b
   755  0014AE  0E00               	movlw	0
   756  0014B0  6F7E               	movwf	(main@time+2)& (0+255),b
   757  0014B2  0E00               	movlw	0
   758  0014B4  6F7F               	movwf	(main@time+3)& (0+255),b
   759                           
   760                           ; BSR set to: 0
   761                           
   762                           ; BSR set to: 0
   763  0014B6  D7AC               	goto	l2350
   764  0014B8                     __end_of_main:
   765                           	opt stack 0
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           intcon	equ	0xFF2
   771                           postinc0	equ	0xFEE
   772                           wreg	equ	0xFE8
   773                           postdec1	equ	0xFE5
   774                           fsr1l	equ	0xFE1
   775                           status	equ	0xFD8
   776                           
   777 ;; *************** function _sprintf *****************
   778 ;; Defined at:
   779 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  sp              2   40[COMRAM] PTR unsigned char 
   782 ;;		 -> lcdStr(17), 
   783 ;;  f               2   42[COMRAM] PTR const unsigned char 
   784 ;;		 -> STR_1(16), 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  idx             1   52[COMRAM] unsigned char 
   787 ;;  tmpval          4    0        struct .
   788 ;;  cp              3    0        PTR const unsigned char 
   789 ;;  width           2   59[COMRAM] int 
   790 ;;  val             2   56[COMRAM] unsigned int 
   791 ;;  ap              2   53[COMRAM] PTR void [1]
   792 ;;		 -> ?_sprintf(2), 
   793 ;;  len             2    0        unsigned int 
   794 ;;  c               1   61[COMRAM] char 
   795 ;;  flag            1   58[COMRAM] unsigned char 
   796 ;;  prec            1   55[COMRAM] char 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  2   40[COMRAM] int 
   799 ;; Registers used:
   800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   806 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   807 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   808 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   809 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   810 ;;Total ram usage:       22 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    3
   813 ;; This function calls:
   814 ;;		___lwdiv
   815 ;;		___lwmod
   816 ;;		___wmul
   817 ;;		_isdigit
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text1
   824  000F36                     __ptext1:
   825                           	opt stack 0
   826  000F36                     _sprintf:
   827                           	opt stack 27
   828                           
   829                           ;doprnt.c: 494: va_list ap;
   830                           ;doprnt.c: 499: signed char c;
   831                           ;doprnt.c: 501: int width;
   832                           ;doprnt.c: 506: signed char prec;
   833                           ;doprnt.c: 508: unsigned char flag;
   834                           ;doprnt.c: 523: union {
   835                           ;doprnt.c: 524: unsigned long vd;
   836                           ;doprnt.c: 525: double integ;
   837                           ;doprnt.c: 526: } tmpval;
   838                           ;doprnt.c: 528: unsigned int val;
   839                           ;doprnt.c: 529: unsigned len;
   840                           ;doprnt.c: 530: const char * cp;
   841                           ;doprnt.c: 533: *ap = __va_start();
   842                           
   843                           ; BSR set to: 0
   844                           ;incstack = 0
   845  000F36  0E2D               	movlw	low (?_sprintf+4)
   846  000F38  6E36               	movwf	sprintf@ap,c
   847  000F3A  0E00               	movlw	high (?_sprintf+4)
   848  000F3C  6E37               	movwf	sprintf@ap+1,c
   849                           
   850                           ;doprnt.c: 536: while(c = *f++) {
   851  000F3E  D192               	goto	l2166
   852  000F40                     l2028:
   853                           
   854                           ;doprnt.c: 538: if(c != '%')
   855  000F40  0E25               	movlw	37
   856  000F42  183E               	xorwf	sprintf@c,w,c
   857  000F44  B4D8               	btfsc	status,2,c
   858  000F46  D009               	goto	l2034
   859                           
   860                           ;doprnt.c: 540: {
   861                           ;doprnt.c: 541: ((*sp++ = (c)));
   862  000F48  C029  FFD9         	movff	sprintf@sp,fsr2l
   863  000F4C  C02A  FFDA         	movff	sprintf@sp+1,fsr2h
   864  000F50  C03E  FFDF         	movff	sprintf@c,indf2
   865  000F54  4A29               	infsnz	sprintf@sp,f,c
   866  000F56  2A2A               	incf	sprintf@sp+1,f,c
   867                           
   868                           ;doprnt.c: 542: continue;
   869  000F58  D185               	goto	l2166
   870  000F5A                     l2034:
   871                           
   872                           ;doprnt.c: 543: }
   873                           ;doprnt.c: 546: width = 0;
   874  000F5A  0E00               	movlw	0
   875  000F5C  6E3D               	movwf	sprintf@width+1,c
   876  000F5E  0E00               	movlw	0
   877  000F60  6E3C               	movwf	sprintf@width,c
   878                           
   879                           ;doprnt.c: 548: flag = 0;
   880  000F62  0E00               	movlw	0
   881  000F64  6E3B               	movwf	sprintf@flag,c
   882                           
   883                           ;doprnt.c: 551: switch(*f) {
   884                           
   885                           ;doprnt.c: 550: for(;;) {
   886  000F66  D003               	goto	l2040
   887  000F68                     l2036:
   888                           
   889                           ;doprnt.c: 580: flag |= 0x04;
   890  000F68  843B               	bsf	sprintf@flag,2,c
   891                           
   892                           ;doprnt.c: 581: f++;
   893  000F6A  4A2B               	infsnz	sprintf@f,f,c
   894  000F6C  2A2C               	incf	sprintf@f+1,f,c
   895  000F6E                     l2040:
   896  000F6E  C02B  FFF6         	movff	sprintf@f,tblptrl
   897  000F72  C02C  FFF7         	movff	sprintf@f+1,tblptrh
   898  000F76                     	if	0	;tblptru may be non-zero
   899  000F76                     	endif
   900  000F76                     	if	0	;tblptru may be non-zero
   901  000F76                     	endif
   902  000F76  0008               	tblrd		*
   903  000F78  50F5               	movf	tablat,w,c
   904                           
   905                           ; Switch size 1, requested type "space"
   906                           ; Number of cases is 1, Range of values is 48 to 48
   907                           ; switch strategies available:
   908                           ; Name         Instructions Cycles
   909                           ; simple_byte            4     3 (average)
   910                           ;	Chosen strategy is simple_byte
   911  000F7A  0A30               	xorlw	48	; case 48
   912  000F7C  B4D8               	btfsc	status,2,c
   913  000F7E  D7F4               	goto	l2036
   914                           
   915                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   916                           
   917                           ;doprnt.c: 586: }
   918                           
   919                           ;doprnt.c: 585: break;
   920  000F80  C02B  FFF6         	movff	sprintf@f,tblptrl
   921  000F84  C02C  FFF7         	movff	sprintf@f+1,tblptrh
   922  000F88                     	if	0	;tblptru may be non-zero
   923  000F88                     	endif
   924  000F88                     	if	0	;tblptru may be non-zero
   925  000F88                     	endif
   926  000F88  0008               	tblrd		*
   927  000F8A  50F5               	movf	tablat,w,c
   928  000F8C  EC9A  F00C         	call	_isdigit
   929  000F90  A0D8               	btfss	status,0,c
   930  000F92  D035               	goto	l2058
   931                           
   932                           ;doprnt.c: 598: width = 0;
   933  000F94  0E00               	movlw	0
   934  000F96  6E3D               	movwf	sprintf@width+1,c
   935  000F98  0E00               	movlw	0
   936  000F9A  6E3C               	movwf	sprintf@width,c
   937  000F9C                     l2046:
   938                           
   939                           ;doprnt.c: 600: width *= 10;
   940  000F9C  C03C  F01D         	movff	sprintf@width,___wmul@multiplier
   941  000FA0  C03D  F01E         	movff	sprintf@width+1,___wmul@multiplier+1
   942  000FA4  0E00               	movlw	0
   943  000FA6  6E20               	movwf	___wmul@multiplicand+1,c
   944  000FA8  0E0A               	movlw	10
   945  000FAA  6E1F               	movwf	___wmul@multiplicand,c
   946  000FAC  EC62  F00C         	call	___wmul	;wreg free
   947  000FB0  C01D  F03C         	movff	?___wmul,sprintf@width
   948  000FB4  C01E  F03D         	movff	?___wmul+1,sprintf@width+1
   949                           
   950                           ;doprnt.c: 601: width += *f++ - '0';
   951  000FB8  0ED0               	movlw	208
   952  000FBA  6E31               	movwf	??_sprintf& (0+255),c
   953  000FBC  0EFF               	movlw	255
   954  000FBE  6E32               	movwf	(??_sprintf+1)& (0+255),c
   955  000FC0  C02B  FFF6         	movff	sprintf@f,tblptrl
   956  000FC4  C02C  FFF7         	movff	sprintf@f+1,tblptrh
   957  000FC8                     	if	0	;tblptru may be non-zero
   958  000FC8                     	endif
   959  000FC8                     	if	0	;tblptru may be non-zero
   960  000FC8                     	endif
   961  000FC8  0008               	tblrd		*
   962  000FCA  50F5               	movf	tablat,w,c
   963  000FCC  6E33               	movwf	(??_sprintf+2)& (0+255),c
   964  000FCE  6A34               	clrf	(??_sprintf+3)& (0+255),c
   965  000FD0  5031               	movf	??_sprintf,w,c
   966  000FD2  2633               	addwf	??_sprintf+2,f,c
   967  000FD4  5032               	movf	??_sprintf+1,w,c
   968  000FD6  2234               	addwfc	??_sprintf+3,f,c
   969  000FD8  5033               	movf	??_sprintf+2,w,c
   970  000FDA  263C               	addwf	sprintf@width,f,c
   971  000FDC  5034               	movf	??_sprintf+3,w,c
   972  000FDE  223D               	addwfc	sprintf@width+1,f,c
   973  000FE0  4A2B               	infsnz	sprintf@f,f,c
   974  000FE2  2A2C               	incf	sprintf@f+1,f,c
   975                           
   976                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   977  000FE4  C02B  FFF6         	movff	sprintf@f,tblptrl
   978  000FE8  C02C  FFF7         	movff	sprintf@f+1,tblptrh
   979  000FEC                     	if	0	;tblptru may be non-zero
   980  000FEC                     	endif
   981  000FEC                     	if	0	;tblptru may be non-zero
   982  000FEC                     	endif
   983  000FEC  0008               	tblrd		*
   984  000FEE  50F5               	movf	tablat,w,c
   985  000FF0  EC9A  F00C         	call	_isdigit
   986  000FF4  A0D8               	btfss	status,0,c
   987  000FF6  D003               	goto	l2058
   988  000FF8  D7D1               	goto	l2046
   989  000FFA                     l2054:
   990                           
   991                           ;doprnt.c: 721: flag |= 0x80;
   992  000FFA  8E3B               	bsf	sprintf@flag,7,c
   993                           
   994                           ;doprnt.c: 723: break;
   995  000FFC  D017               	goto	l392
   996  000FFE                     l2058:
   997  000FFE  C02B  FFF6         	movff	sprintf@f,tblptrl
   998  001002  C02C  FFF7         	movff	sprintf@f+1,tblptrh
   999  001006  4A2B               	infsnz	sprintf@f,f,c
  1000  001008  2A2C               	incf	sprintf@f+1,f,c
  1001  00100A                     	if	0	;tblptru may be non-zero
  1002  00100A                     	endif
  1003  00100A                     	if	0	;tblptru may be non-zero
  1004  00100A                     	endif
  1005  00100A  0008               	tblrd		*
  1006  00100C  CFF5 F03E          	movff	tablat,sprintf@c
  1007  001010  503E               	movf	sprintf@c,w,c
  1008                           
  1009                           ; Switch size 1, requested type "space"
  1010                           ; Number of cases is 4, Range of values is 0 to 120
  1011                           ; switch strategies available:
  1012                           ; Name         Instructions Cycles
  1013                           ; simple_byte           13     7 (average)
  1014                           ;	Chosen strategy is simple_byte
  1015  001012  0A00               	xorlw	0	; case 0
  1016  001014  B4D8               	btfsc	status,2,c
  1017  001016  D132               	goto	l2168
  1018  001018  0A64               	xorlw	100	; case 100
  1019  00101A  B4D8               	btfsc	status,2,c
  1020  00101C  D007               	goto	l392
  1021  00101E  0A0D               	xorlw	13	; case 105
  1022  001020  B4D8               	btfsc	status,2,c
  1023  001022  D004               	goto	l392
  1024  001024  0A11               	xorlw	17	; case 120
  1025  001026  B4D8               	btfsc	status,2,c
  1026  001028  D7E8               	goto	l2054
  1027  00102A  D11C               	goto	l2166
  1028  00102C                     l392:
  1029                           
  1030                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1031  00102C  BE3B               	btfsc	sprintf@flag,7,c
  1032  00102E  D015               	goto	l2070
  1033                           
  1034                           ;doprnt.c: 1253: {
  1035                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1036  001030  C036  FFD9         	movff	sprintf@ap,fsr2l
  1037  001034  C037  FFDA         	movff	sprintf@ap+1,fsr2h
  1038  001038  CFDE F039          	movff	postinc2,sprintf@val
  1039  00103C  CFDD F03A          	movff	postdec2,sprintf@val+1
  1040  001040  0E02               	movlw	2
  1041  001042  2636               	addwf	sprintf@ap,f,c
  1042  001044  0E00               	movlw	0
  1043  001046  2237               	addwfc	sprintf@ap+1,f,c
  1044                           
  1045                           ;doprnt.c: 1261: if((int)val < 0) {
  1046  001048  AE3A               	btfss	sprintf@val+1,7,c
  1047  00104A  D044               	goto	l2104
  1048                           
  1049                           ;doprnt.c: 1262: flag |= 0x03;
  1050  00104C  0E03               	movlw	3
  1051  00104E  123B               	iorwf	sprintf@flag,f,c
  1052                           
  1053                           ;doprnt.c: 1263: val = -val;
  1054  001050  6C39               	negf	sprintf@val,c
  1055  001052  1E3A               	comf	sprintf@val+1,f,c
  1056  001054  B0D8               	btfsc	status,0,c
  1057  001056  2A3A               	incf	sprintf@val+1,f,c
  1058                           
  1059                           ;doprnt.c: 1264: }
  1060                           ;doprnt.c: 1266: }
  1061  001058  D03D               	goto	l2104
  1062  00105A                     l2070:
  1063                           
  1064                           ;doprnt.c: 1268: else
  1065                           ;doprnt.c: 1273: {
  1066                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1067  00105A  C036  FFD9         	movff	sprintf@ap,fsr2l
  1068  00105E  C037  FFDA         	movff	sprintf@ap+1,fsr2h
  1069  001062  CFDE F039          	movff	postinc2,sprintf@val
  1070  001066  CFDD F03A          	movff	postdec2,sprintf@val+1
  1071  00106A  0E02               	movlw	2
  1072  00106C  2636               	addwf	sprintf@ap,f,c
  1073  00106E  0E00               	movlw	0
  1074  001070  2237               	addwfc	sprintf@ap+1,f,c
  1075                           
  1076                           ;doprnt.c: 1287: }
  1077                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1078  001072  D030               	goto	l2104
  1079  001074                     l2074:
  1080                           
  1081                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1082  001074  0E01               	movlw	1
  1083  001076  6E3E               	movwf	sprintf@c,c
  1084  001078                     l2076:
  1085  001078  0E05               	movlw	5
  1086  00107A  183E               	xorwf	sprintf@c,w,c
  1087  00107C  B4D8               	btfsc	status,2,c
  1088  00107E  D032               	goto	l2106
  1089                           
  1090                           ;doprnt.c: 1306: if(val < dpowers[c])
  1091  001080  503E               	movf	sprintf@c,w,c
  1092  001082  0D02               	mullw	2
  1093  001084  0E01               	movlw	low _dpowers
  1094  001086  24F3               	addwf	prodl,w,c
  1095  001088  6EF6               	movwf	tblptrl,c
  1096  00108A  0E0F               	movlw	high _dpowers
  1097  00108C  20F4               	addwfc	prodh,w,c
  1098  00108E  6EF7               	movwf	tblptrh,c
  1099  001090                     	if	0	;There are less than 3 active tblptr bytes
  1100  001090                     	endif
  1101  001090  0009               	tblrd		*+
  1102  001092  50F5               	movf	tablat,w,c
  1103  001094  5C39               	subwf	sprintf@val,w,c
  1104  001096  0009               	tblrd		*+
  1105  001098  50F5               	movf	tablat,w,c
  1106  00109A  583A               	subwfb	sprintf@val+1,w,c
  1107  00109C  A0D8               	btfss	status,0,c
  1108  00109E  D022               	goto	l2106
  1109                           
  1110                           ;doprnt.c: 1307: break;
  1111  0010A0  2A3E               	incf	sprintf@c,f,c
  1112  0010A2  D7EA               	goto	l2076
  1113  0010A4                     l2088:
  1114                           
  1115                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1116  0010A4  0E01               	movlw	1
  1117  0010A6  6E3E               	movwf	sprintf@c,c
  1118  0010A8                     l2090:
  1119  0010A8  0E04               	movlw	4
  1120  0010AA  183E               	xorwf	sprintf@c,w,c
  1121  0010AC  B4D8               	btfsc	status,2,c
  1122  0010AE  D01A               	goto	l2106
  1123                           
  1124                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1125  0010B0  503E               	movf	sprintf@c,w,c
  1126  0010B2  0D02               	mullw	2
  1127  0010B4  0E0B               	movlw	low _hexpowers
  1128  0010B6  24F3               	addwf	prodl,w,c
  1129  0010B8  6EF6               	movwf	tblptrl,c
  1130  0010BA  0E0F               	movlw	high _hexpowers
  1131  0010BC  20F4               	addwfc	prodh,w,c
  1132  0010BE  6EF7               	movwf	tblptrh,c
  1133  0010C0                     	if	0	;There are less than 3 active tblptr bytes
  1134  0010C0                     	endif
  1135  0010C0  0009               	tblrd		*+
  1136  0010C2  50F5               	movf	tablat,w,c
  1137  0010C4  5C39               	subwf	sprintf@val,w,c
  1138  0010C6  0009               	tblrd		*+
  1139  0010C8  50F5               	movf	tablat,w,c
  1140  0010CA  583A               	subwfb	sprintf@val+1,w,c
  1141  0010CC  A0D8               	btfss	status,0,c
  1142  0010CE  D00A               	goto	l2106
  1143                           
  1144                           ;doprnt.c: 1318: break;
  1145  0010D0  2A3E               	incf	sprintf@c,f,c
  1146  0010D2  D7EA               	goto	l2090
  1147  0010D4                     l2104:
  1148  0010D4  503B               	movf	sprintf@flag,w,c
  1149  0010D6  0B80               	andlw	128
  1150                           
  1151                           ; Switch size 1, requested type "space"
  1152                           ; Number of cases is 2, Range of values is 0 to 128
  1153                           ; switch strategies available:
  1154                           ; Name         Instructions Cycles
  1155                           ; simple_byte            7     4 (average)
  1156                           ;	Chosen strategy is simple_byte
  1157  0010D8  0A00               	xorlw	0	; case 0
  1158  0010DA  B4D8               	btfsc	status,2,c
  1159  0010DC  D7CB               	goto	l2074
  1160  0010DE  0A80               	xorlw	128	; case 128
  1161  0010E0  B4D8               	btfsc	status,2,c
  1162  0010E2  D7E0               	goto	l2088
  1163  0010E4                     l2106:
  1164                           
  1165                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1166  0010E4  503C               	movf	sprintf@width,w,c
  1167  0010E6  103D               	iorwf	sprintf@width+1,w,c
  1168  0010E8  B4D8               	btfsc	status,2,c
  1169  0010EA  D009               	goto	l2112
  1170  0010EC  C03B  F031         	movff	sprintf@flag,??_sprintf
  1171  0010F0  0E03               	movlw	3
  1172  0010F2  1631               	andwf	??_sprintf,f,c
  1173  0010F4  B4D8               	btfsc	status,2,c
  1174  0010F6  D003               	goto	l2112
  1175                           
  1176                           ;doprnt.c: 1346: width--;
  1177  0010F8  063C               	decf	sprintf@width,f,c
  1178  0010FA  A0D8               	btfss	status,0,c
  1179  0010FC  063D               	decf	sprintf@width+1,f,c
  1180  0010FE                     l2112:
  1181                           
  1182                           ;doprnt.c: 1381: if(width > c)
  1183  0010FE  0E80               	movlw	128
  1184  001100  BE3E               	btfsc	sprintf@c,7,c
  1185  001102  0E7F               	movlw	127
  1186  001104  6E31               	movwf	??_sprintf& (0+255),c
  1187  001106  503C               	movf	sprintf@width,w,c
  1188  001108  5C3E               	subwf	sprintf@c,w,c
  1189  00110A  503D               	movf	sprintf@width+1,w,c
  1190  00110C  0A80               	xorlw	128
  1191  00110E  5831               	subwfb	??_sprintf& (0+255),w,c
  1192  001110  B0D8               	btfsc	status,0,c
  1193  001112  D007               	goto	l2116
  1194                           
  1195                           ;doprnt.c: 1382: width -= c;
  1196  001114  503E               	movf	sprintf@c,w,c
  1197  001116  5E3C               	subwf	sprintf@width,f,c
  1198  001118  0E00               	movlw	0
  1199  00111A  BE3E               	btfsc	sprintf@c,7,c
  1200  00111C  0EFF               	movlw	255
  1201  00111E  5A3D               	subwfb	sprintf@width+1,f,c
  1202  001120  D004               	goto	l2118
  1203  001122                     l2116:
  1204                           
  1205                           ;doprnt.c: 1383: else
  1206                           ;doprnt.c: 1384: width = 0;
  1207  001122  0E00               	movlw	0
  1208  001124  6E3D               	movwf	sprintf@width+1,c
  1209  001126  0E00               	movlw	0
  1210  001128  6E3C               	movwf	sprintf@width,c
  1211  00112A                     l2118:
  1212                           
  1213                           ;doprnt.c: 1387: if(flag & 0x04) {
  1214  00112A  A43B               	btfss	sprintf@flag,2,c
  1215  00112C  D01E               	goto	l2134
  1216                           
  1217                           ;doprnt.c: 1392: if(flag & 0x03)
  1218  00112E  C03B  F031         	movff	sprintf@flag,??_sprintf
  1219  001132  0E03               	movlw	3
  1220  001134  1631               	andwf	??_sprintf,f,c
  1221  001136  B4D8               	btfsc	status,2,c
  1222  001138  D008               	goto	l2126
  1223                           
  1224                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1225  00113A  C029  FFD9         	movff	sprintf@sp,fsr2l
  1226  00113E  C02A  FFDA         	movff	sprintf@sp+1,fsr2h
  1227  001142  0E2D               	movlw	45
  1228  001144  6EDF               	movwf	indf2,c
  1229  001146  4A29               	infsnz	sprintf@sp,f,c
  1230  001148  2A2A               	incf	sprintf@sp+1,f,c
  1231  00114A                     l2126:
  1232                           
  1233                           ;doprnt.c: 1415: if(width)
  1234  00114A  503C               	movf	sprintf@width,w,c
  1235  00114C  103D               	iorwf	sprintf@width+1,w,c
  1236  00114E  B4D8               	btfsc	status,2,c
  1237  001150  D02D               	goto	l2148
  1238                           
  1239                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1240                           
  1241                           ;doprnt.c: 1416: do
  1242  001152  C029  FFD9         	movff	sprintf@sp,fsr2l
  1243  001156  C02A  FFDA         	movff	sprintf@sp+1,fsr2h
  1244  00115A  0E30               	movlw	48
  1245  00115C  6EDF               	movwf	indf2,c
  1246  00115E  4A29               	infsnz	sprintf@sp,f,c
  1247  001160  2A2A               	incf	sprintf@sp+1,f,c
  1248                           
  1249                           ;doprnt.c: 1418: while(--width);
  1250  001162  063C               	decf	sprintf@width,f,c
  1251  001164  A0D8               	btfss	status,0,c
  1252  001166  063D               	decf	sprintf@width+1,f,c
  1253  001168  D7F0               	goto	l2126
  1254  00116A                     l2134:
  1255                           
  1256                           ;doprnt.c: 1422: {
  1257                           ;doprnt.c: 1424: if(width
  1258                           ;doprnt.c: 1428: )
  1259  00116A  503C               	movf	sprintf@width,w,c
  1260  00116C  103D               	iorwf	sprintf@width+1,w,c
  1261  00116E  B4D8               	btfsc	status,2,c
  1262  001170  D00F               	goto	l2142
  1263  001172                     l2136:
  1264                           
  1265                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1266  001172  C029  FFD9         	movff	sprintf@sp,fsr2l
  1267  001176  C02A  FFDA         	movff	sprintf@sp+1,fsr2h
  1268  00117A  0E20               	movlw	32
  1269  00117C  6EDF               	movwf	indf2,c
  1270  00117E  4A29               	infsnz	sprintf@sp,f,c
  1271  001180  2A2A               	incf	sprintf@sp+1,f,c
  1272                           
  1273                           ;doprnt.c: 1431: while(--width);
  1274  001182  063C               	decf	sprintf@width,f,c
  1275  001184  A0D8               	btfss	status,0,c
  1276  001186  063D               	decf	sprintf@width+1,f,c
  1277  001188  503C               	movf	sprintf@width,w,c
  1278  00118A  103D               	iorwf	sprintf@width+1,w,c
  1279  00118C  A4D8               	btfss	status,2,c
  1280  00118E  D7F1               	goto	l2136
  1281  001190                     l2142:
  1282                           
  1283                           ;doprnt.c: 1438: if(flag & 0x03)
  1284  001190  C03B  F031         	movff	sprintf@flag,??_sprintf
  1285  001194  0E03               	movlw	3
  1286  001196  1631               	andwf	??_sprintf,f,c
  1287  001198  B4D8               	btfsc	status,2,c
  1288  00119A  D008               	goto	l2148
  1289                           
  1290                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1291  00119C  C029  FFD9         	movff	sprintf@sp,fsr2l
  1292  0011A0  C02A  FFDA         	movff	sprintf@sp+1,fsr2h
  1293  0011A4  0E2D               	movlw	45
  1294  0011A6  6EDF               	movwf	indf2,c
  1295  0011A8  4A29               	infsnz	sprintf@sp,f,c
  1296  0011AA  2A2A               	incf	sprintf@sp+1,f,c
  1297  0011AC                     l2148:
  1298                           
  1299                           ;doprnt.c: 1469: }
  1300                           ;doprnt.c: 1472: prec = c;
  1301  0011AC  C03E  F038         	movff	sprintf@c,sprintf@prec
  1302                           
  1303                           ;doprnt.c: 1474: while(prec--) {
  1304  0011B0  D055               	goto	l2164
  1305  0011B2                     l2150:
  1306                           
  1307                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1308  0011B2  5038               	movf	sprintf@prec,w,c
  1309  0011B4  0D02               	mullw	2
  1310  0011B6  0E01               	movlw	low _dpowers
  1311  0011B8  24F3               	addwf	prodl,w,c
  1312  0011BA  6EF6               	movwf	tblptrl,c
  1313  0011BC  0E0F               	movlw	high _dpowers
  1314  0011BE  20F4               	addwfc	prodh,w,c
  1315  0011C0  6EF7               	movwf	tblptrh,c
  1316  0011C2                     	if	0	;There are less than 3 active tblptr bytes
  1317  0011C2                     	endif
  1318  0011C2  0009               	tblrd		*+
  1319  0011C4  CFF5 F01F          	movff	tablat,___lwdiv@divisor
  1320  0011C8  000A               	tblrd		*-
  1321  0011CA  CFF5 F020          	movff	tablat,___lwdiv@divisor+1
  1322  0011CE  C039  F01D         	movff	sprintf@val,___lwdiv@dividend
  1323  0011D2  C03A  F01E         	movff	sprintf@val+1,___lwdiv@dividend+1
  1324  0011D6  EC64  F00B         	call	___lwdiv	;wreg free
  1325  0011DA  C01D  F024         	movff	?___lwdiv,___lwmod@dividend
  1326  0011DE  C01E  F025         	movff	?___lwdiv+1,___lwmod@dividend+1
  1327  0011E2  0E00               	movlw	0
  1328  0011E4  6E27               	movwf	___lwmod@divisor+1,c
  1329  0011E6  0E0A               	movlw	10
  1330  0011E8  6E26               	movwf	___lwmod@divisor,c
  1331  0011EA  ECD1  F00B         	call	___lwmod	;wreg free
  1332  0011EE  5024               	movf	?___lwmod,w,c
  1333  0011F0  0F30               	addlw	48
  1334  0011F2  6E3E               	movwf	sprintf@c,c
  1335                           
  1336                           ;doprnt.c: 1491: break;
  1337  0011F4  D02B               	goto	l2160
  1338  0011F6                     l2152:
  1339                           
  1340                           ;doprnt.c: 1499: {
  1341                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1342  0011F6  C039  F01D         	movff	sprintf@val,___lwdiv@dividend
  1343  0011FA  C03A  F01E         	movff	sprintf@val+1,___lwdiv@dividend+1
  1344  0011FE  5038               	movf	sprintf@prec,w,c
  1345  001200  0D02               	mullw	2
  1346  001202  0E0B               	movlw	low _hexpowers
  1347  001204  24F3               	addwf	prodl,w,c
  1348  001206  6EF6               	movwf	tblptrl,c
  1349  001208  0E0F               	movlw	high _hexpowers
  1350  00120A  20F4               	addwfc	prodh,w,c
  1351  00120C  6EF7               	movwf	tblptrh,c
  1352  00120E                     	if	0	;There are less than 3 active tblptr bytes
  1353  00120E                     	endif
  1354  00120E  0009               	tblrd		*+
  1355  001210  CFF5 F01F          	movff	tablat,___lwdiv@divisor
  1356  001214  000A               	tblrd		*-
  1357  001216  CFF5 F020          	movff	tablat,___lwdiv@divisor+1
  1358  00121A  EC64  F00B         	call	___lwdiv	;wreg free
  1359  00121E  501D               	movf	?___lwdiv,w,c
  1360  001220  0B0F               	andlw	15
  1361  001222  6E35               	movwf	sprintf@idx,c
  1362                           
  1363                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1364  001224  5035               	movf	sprintf@idx,w,c
  1365  001226  0D01               	mullw	1
  1366  001228  0E13               	movlw	low STR_2
  1367  00122A  24F3               	addwf	prodl,w,c
  1368  00122C  6EF6               	movwf	tblptrl,c
  1369  00122E  0E0F               	movlw	high STR_2
  1370  001230  20F4               	addwfc	prodh,w,c
  1371  001232  6EF7               	movwf	tblptrh,c
  1372  001234                     	if	0	;There are less than 3 active tblptr bytes
  1373  001234                     	endif
  1374  001234  0008               	tblrd		*
  1375  001236  CFF5 F03E          	movff	tablat,sprintf@c
  1376                           
  1377                           ;doprnt.c: 1523: }
  1378                           
  1379                           ;doprnt.c: 1508: }
  1380                           ;doprnt.c: 1510: break;
  1381  00123A  D008               	goto	l2160
  1382  00123C                     l2158:
  1383  00123C  503B               	movf	sprintf@flag,w,c
  1384  00123E  0B80               	andlw	128
  1385                           
  1386                           ; Switch size 1, requested type "space"
  1387                           ; Number of cases is 2, Range of values is 0 to 128
  1388                           ; switch strategies available:
  1389                           ; Name         Instructions Cycles
  1390                           ; simple_byte            7     4 (average)
  1391                           ;	Chosen strategy is simple_byte
  1392  001240  0A00               	xorlw	0	; case 0
  1393  001242  B4D8               	btfsc	status,2,c
  1394  001244  D7B6               	goto	l2150
  1395  001246  0A80               	xorlw	128	; case 128
  1396  001248  B4D8               	btfsc	status,2,c
  1397  00124A  D7D5               	goto	l2152
  1398  00124C                     l2160:
  1399                           
  1400                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1401  00124C  C029  FFD9         	movff	sprintf@sp,fsr2l
  1402  001250  C02A  FFDA         	movff	sprintf@sp+1,fsr2h
  1403  001254  C03E  FFDF         	movff	sprintf@c,indf2
  1404  001258  4A29               	infsnz	sprintf@sp,f,c
  1405  00125A  2A2A               	incf	sprintf@sp+1,f,c
  1406  00125C                     l2164:
  1407  00125C  0638               	decf	sprintf@prec,f,c
  1408  00125E  2838               	incf	sprintf@prec,w,c
  1409  001260  A4D8               	btfss	status,2,c
  1410  001262  D7EC               	goto	l2158
  1411  001264                     l2166:
  1412  001264  C02B  FFF6         	movff	sprintf@f,tblptrl
  1413  001268  C02C  FFF7         	movff	sprintf@f+1,tblptrh
  1414  00126C  4A2B               	infsnz	sprintf@f,f,c
  1415  00126E  2A2C               	incf	sprintf@f+1,f,c
  1416  001270                     	if	0	;tblptru may be non-zero
  1417  001270                     	endif
  1418  001270                     	if	0	;tblptru may be non-zero
  1419  001270                     	endif
  1420  001270  0008               	tblrd		*
  1421  001272  CFF5 F03E          	movff	tablat,sprintf@c
  1422  001276  503E               	movf	sprintf@c,w,c
  1423  001278  A4D8               	btfss	status,2,c
  1424  00127A  D662               	goto	l2028
  1425  00127C                     l2168:
  1426                           
  1427                           ;doprnt.c: 1538: *sp = 0;
  1428  00127C  C029  FFD9         	movff	sprintf@sp,fsr2l
  1429  001280  C02A  FFDA         	movff	sprintf@sp+1,fsr2h
  1430  001284  0E00               	movlw	0
  1431  001286  6EDF               	movwf	indf2,c
  1432  001288  0012               	return	
  1433  00128A                     __end_of_sprintf:
  1434                           	opt stack 0
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           prodh	equ	0xFF4
  1440                           prodl	equ	0xFF3
  1441                           intcon	equ	0xFF2
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postdec1	equ	0xFE5
  1445                           fsr1l	equ	0xFE1
  1446                           indf2	equ	0xFDF
  1447                           postinc2	equ	0xFDE
  1448                           postdec2	equ	0xFDD
  1449                           fsr2h	equ	0xFDA
  1450                           fsr2l	equ	0xFD9
  1451                           status	equ	0xFD8
  1452                           
  1453 ;; *************** function _isdigit *****************
  1454 ;; Defined at:
  1455 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;  c               1    wreg     unsigned char 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  c               1   30[COMRAM] unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;		None               void
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1471 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1472 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1473 ;;Total ram usage:        3 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    2
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_sprintf
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text2
  1484  001934                     __ptext2:
  1485                           	opt stack 0
  1486  001934                     _isdigit:
  1487                           	opt stack 27
  1488                           
  1489                           ;incstack = 0
  1490                           ;isdigit@c stored from wreg
  1491  001934  6E1F               	movwf	isdigit@c,c
  1492  001936  0E00               	movlw	0
  1493  001938  6E1E               	movwf	_isdigit$2572,c
  1494  00193A  0E3A               	movlw	58
  1495  00193C  601F               	cpfslt	isdigit@c,c
  1496  00193E  D005               	goto	l1832
  1497  001940  0E2F               	movlw	47
  1498  001942  641F               	cpfsgt	isdigit@c,c
  1499  001944  D002               	goto	l1832
  1500  001946  0E01               	movlw	1
  1501  001948  6E1E               	movwf	_isdigit$2572,c
  1502  00194A                     l1832:
  1503  00194A  C01E  F01D         	movff	_isdigit$2572,??_isdigit
  1504  00194E  301D               	rrcf	??_isdigit,w,c
  1505  001950  0012               	return	
  1506  001952                     __end_of_isdigit:
  1507                           	opt stack 0
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           prodh	equ	0xFF4
  1513                           prodl	equ	0xFF3
  1514                           intcon	equ	0xFF2
  1515                           postinc0	equ	0xFEE
  1516                           wreg	equ	0xFE8
  1517                           postdec1	equ	0xFE5
  1518                           fsr1l	equ	0xFE1
  1519                           indf2	equ	0xFDF
  1520                           postinc2	equ	0xFDE
  1521                           postdec2	equ	0xFDD
  1522                           fsr2h	equ	0xFDA
  1523                           fsr2l	equ	0xFD9
  1524                           status	equ	0xFD8
  1525                           
  1526 ;; *************** function ___wmul *****************
  1527 ;; Defined at:
  1528 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  multiplier      2   28[COMRAM] unsigned int 
  1531 ;;  multiplicand    2   30[COMRAM] unsigned int 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  product         2   32[COMRAM] unsigned int 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  2   28[COMRAM] unsigned int 
  1536 ;; Registers used:
  1537 ;;		wreg, status,2, status,0, prodl, prodh
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1546 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1547 ;;Total ram usage:        6 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    2
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_sprintf
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text3
  1558  0018C4                     __ptext3:
  1559                           	opt stack 0
  1560  0018C4                     ___wmul:
  1561                           	opt stack 27
  1562                           
  1563                           ;incstack = 0
  1564  0018C4  501D               	movf	___wmul@multiplier,w,c
  1565  0018C6  021F               	mulwf	___wmul@multiplicand,c
  1566  0018C8  CFF3 F021          	movff	prodl,___wmul@product
  1567  0018CC  CFF4 F022          	movff	prodh,___wmul@product+1
  1568  0018D0  501D               	movf	___wmul@multiplier,w,c
  1569  0018D2  0220               	mulwf	___wmul@multiplicand+1,c
  1570  0018D4  50F3               	movf	prodl,w,c
  1571  0018D6  2622               	addwf	___wmul@product+1,f,c
  1572  0018D8  501E               	movf	___wmul@multiplier+1,w,c
  1573  0018DA  021F               	mulwf	___wmul@multiplicand,c
  1574  0018DC  50F3               	movf	prodl,w,c
  1575  0018DE  2622               	addwf	___wmul@product+1,f,c
  1576  0018E0  C021  F01D         	movff	___wmul@product,?___wmul
  1577  0018E4  C022  F01E         	movff	___wmul@product+1,?___wmul+1
  1578  0018E8  0012               	return	
  1579  0018EA                     __end_of___wmul:
  1580                           	opt stack 0
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           prodh	equ	0xFF4
  1586                           prodl	equ	0xFF3
  1587                           intcon	equ	0xFF2
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           postdec1	equ	0xFE5
  1591                           fsr1l	equ	0xFE1
  1592                           indf2	equ	0xFDF
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function ___lwmod *****************
  1600 ;; Defined at:
  1601 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  dividend        2   35[COMRAM] unsigned int 
  1604 ;;  divisor         2   37[COMRAM] unsigned int 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  counter         1   39[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  2   35[COMRAM] unsigned int 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1619 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1620 ;;Total ram usage:        5 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    2
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_sprintf
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text4
  1631  0017A2                     __ptext4:
  1632                           	opt stack 0
  1633  0017A2                     ___lwmod:
  1634                           	opt stack 27
  1635                           
  1636                           ;incstack = 0
  1637  0017A2  5026               	movf	___lwmod@divisor,w,c
  1638  0017A4  1027               	iorwf	___lwmod@divisor+1,w,c
  1639  0017A6  B4D8               	btfsc	status,2,c
  1640  0017A8  D018               	goto	l847
  1641  0017AA  0E01               	movlw	1
  1642  0017AC  6E28               	movwf	___lwmod@counter,c
  1643  0017AE  D004               	goto	l1870
  1644  0017B0                     l1868:
  1645  0017B0  90D8               	bcf	status,0,c
  1646  0017B2  3626               	rlcf	___lwmod@divisor,f,c
  1647  0017B4  3627               	rlcf	___lwmod@divisor+1,f,c
  1648  0017B6  2A28               	incf	___lwmod@counter,f,c
  1649  0017B8                     l1870:
  1650  0017B8  AE27               	btfss	___lwmod@divisor+1,7,c
  1651  0017BA  D7FA               	goto	l1868
  1652  0017BC                     l1872:
  1653  0017BC  5026               	movf	___lwmod@divisor,w,c
  1654  0017BE  5C24               	subwf	___lwmod@dividend,w,c
  1655  0017C0  5027               	movf	___lwmod@divisor+1,w,c
  1656  0017C2  5825               	subwfb	___lwmod@dividend+1,w,c
  1657  0017C4  A0D8               	btfss	status,0,c
  1658  0017C6  D004               	goto	l1876
  1659  0017C8  5026               	movf	___lwmod@divisor,w,c
  1660  0017CA  5E24               	subwf	___lwmod@dividend,f,c
  1661  0017CC  5027               	movf	___lwmod@divisor+1,w,c
  1662  0017CE  5A25               	subwfb	___lwmod@dividend+1,f,c
  1663  0017D0                     l1876:
  1664  0017D0  90D8               	bcf	status,0,c
  1665  0017D2  3227               	rrcf	___lwmod@divisor+1,f,c
  1666  0017D4  3226               	rrcf	___lwmod@divisor,f,c
  1667  0017D6  2E28               	decfsz	___lwmod@counter,f,c
  1668  0017D8  D7F1               	goto	l1872
  1669  0017DA                     l847:
  1670  0017DA  C024  F024         	movff	___lwmod@dividend,?___lwmod
  1671  0017DE  C025  F025         	movff	___lwmod@dividend+1,?___lwmod+1
  1672  0017E2  0012               	return		;funcret
  1673  0017E4                     __end_of___lwmod:
  1674                           	opt stack 0
  1675                           tblptru	equ	0xFF8
  1676                           tblptrh	equ	0xFF7
  1677                           tblptrl	equ	0xFF6
  1678                           tablat	equ	0xFF5
  1679                           prodh	equ	0xFF4
  1680                           prodl	equ	0xFF3
  1681                           intcon	equ	0xFF2
  1682                           postinc0	equ	0xFEE
  1683                           wreg	equ	0xFE8
  1684                           postdec1	equ	0xFE5
  1685                           fsr1l	equ	0xFE1
  1686                           indf2	equ	0xFDF
  1687                           postinc2	equ	0xFDE
  1688                           postdec2	equ	0xFDD
  1689                           fsr2h	equ	0xFDA
  1690                           fsr2l	equ	0xFD9
  1691                           status	equ	0xFD8
  1692                           
  1693 ;; *************** function ___lwdiv *****************
  1694 ;; Defined at:
  1695 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  dividend        2   28[COMRAM] unsigned int 
  1698 ;;  divisor         2   30[COMRAM] unsigned int 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  quotient        2   32[COMRAM] unsigned int 
  1701 ;;  counter         1   34[COMRAM] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  2   28[COMRAM] unsigned int 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1711 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1712 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1714 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1715 ;;Total ram usage:        7 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    2
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_sprintf
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text5
  1726  0016C8                     __ptext5:
  1727                           	opt stack 0
  1728  0016C8                     ___lwdiv:
  1729                           	opt stack 27
  1730                           
  1731                           ;incstack = 0
  1732  0016C8  0E00               	movlw	0
  1733  0016CA  6E22               	movwf	___lwdiv@quotient+1,c
  1734  0016CC  0E00               	movlw	0
  1735  0016CE  6E21               	movwf	___lwdiv@quotient,c
  1736  0016D0  501F               	movf	___lwdiv@divisor,w,c
  1737  0016D2  1020               	iorwf	___lwdiv@divisor+1,w,c
  1738  0016D4  B4D8               	btfsc	status,2,c
  1739  0016D6  D01C               	goto	l837
  1740  0016D8  0E01               	movlw	1
  1741  0016DA  6E23               	movwf	___lwdiv@counter,c
  1742  0016DC  D004               	goto	l1850
  1743  0016DE                     l1848:
  1744  0016DE  90D8               	bcf	status,0,c
  1745  0016E0  361F               	rlcf	___lwdiv@divisor,f,c
  1746  0016E2  3620               	rlcf	___lwdiv@divisor+1,f,c
  1747  0016E4  2A23               	incf	___lwdiv@counter,f,c
  1748  0016E6                     l1850:
  1749  0016E6  AE20               	btfss	___lwdiv@divisor+1,7,c
  1750  0016E8  D7FA               	goto	l1848
  1751  0016EA                     l1852:
  1752  0016EA  90D8               	bcf	status,0,c
  1753  0016EC  3621               	rlcf	___lwdiv@quotient,f,c
  1754  0016EE  3622               	rlcf	___lwdiv@quotient+1,f,c
  1755  0016F0  501F               	movf	___lwdiv@divisor,w,c
  1756  0016F2  5C1D               	subwf	___lwdiv@dividend,w,c
  1757  0016F4  5020               	movf	___lwdiv@divisor+1,w,c
  1758  0016F6  581E               	subwfb	___lwdiv@dividend+1,w,c
  1759  0016F8  A0D8               	btfss	status,0,c
  1760  0016FA  D005               	goto	l1860
  1761  0016FC  501F               	movf	___lwdiv@divisor,w,c
  1762  0016FE  5E1D               	subwf	___lwdiv@dividend,f,c
  1763  001700  5020               	movf	___lwdiv@divisor+1,w,c
  1764  001702  5A1E               	subwfb	___lwdiv@dividend+1,f,c
  1765  001704  8021               	bsf	___lwdiv@quotient,0,c
  1766  001706                     l1860:
  1767  001706  90D8               	bcf	status,0,c
  1768  001708  3220               	rrcf	___lwdiv@divisor+1,f,c
  1769  00170A  321F               	rrcf	___lwdiv@divisor,f,c
  1770  00170C  2E23               	decfsz	___lwdiv@counter,f,c
  1771  00170E  D7ED               	goto	l1852
  1772  001710                     l837:
  1773  001710  C021  F01D         	movff	___lwdiv@quotient,?___lwdiv
  1774  001714  C022  F01E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1775  001718  0012               	return		;funcret
  1776  00171A                     __end_of___lwdiv:
  1777                           	opt stack 0
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           postinc2	equ	0xFDE
  1791                           postdec2	equ	0xFDD
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796 ;; *************** function _WriteCANMsg *****************
  1797 ;; Defined at:
  1798 ;;		line 124 in file "../CANMain.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  msgID           2   28[COMRAM] int 
  1801 ;;  data            2   30[COMRAM] PTR void 
  1802 ;;		 -> msgCount(2), main@msg(2), 
  1803 ;;  dataLen         1   32[COMRAM] unsigned char 
  1804 ;;  priority        1   33[COMRAM] unsigned char 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  i               1   36[COMRAM] unsigned char 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      unsigned char 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1816 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1818 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1819 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1820 ;;Total ram usage:        9 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    2
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text6
  1831  0014B8                     __ptext6:
  1832                           	opt stack 0
  1833  0014B8                     _WriteCANMsg:
  1834                           	opt stack 28
  1835                           
  1836                           ;CANMain.c: 125: char i;
  1837                           ;CANMain.c: 126: if (TXB0CONbits.TXREQ == 0) {
  1838                           
  1839                           ;incstack = 0
  1840  0014B8  010F               	movlb	15	; () banked
  1841  0014BA  B720               	btfsc	32,3,b	;volatile
  1842  0014BC  0012               	return	
  1843                           
  1844                           ; BSR set to: 15
  1845                           ;CANMain.c: 127: TXB0CONbits.TXPRI = priority;
  1846  0014BE  010F               	movlb	15	; () banked
  1847  0014C0  5120               	movf	32,w,b	;volatile
  1848  0014C2  1822               	xorwf	WriteCANMsg@priority,w,c
  1849  0014C4  0BFC               	andlw	-4
  1850  0014C6  1822               	xorwf	WriteCANMsg@priority,w,c
  1851  0014C8  010F               	movlb	15	; () banked
  1852  0014CA  6F20               	movwf	32,b	;volatile
  1853                           
  1854                           ;CANMain.c: 128: TXB0SIDH = msgID >> 3;
  1855  0014CC  C01D  F023         	movff	WriteCANMsg@msgID,??_WriteCANMsg
  1856  0014D0  C01E  F024         	movff	WriteCANMsg@msgID+1,??_WriteCANMsg+1
  1857  0014D4  3424               	rlcf	??_WriteCANMsg+1,w,c
  1858  0014D6  3224               	rrcf	??_WriteCANMsg+1,f,c
  1859  0014D8  3223               	rrcf	??_WriteCANMsg,f,c
  1860  0014DA  3424               	rlcf	??_WriteCANMsg+1,w,c
  1861  0014DC  3224               	rrcf	??_WriteCANMsg+1,f,c
  1862  0014DE  3223               	rrcf	??_WriteCANMsg,f,c
  1863  0014E0  3424               	rlcf	??_WriteCANMsg+1,w,c
  1864  0014E2  3224               	rrcf	??_WriteCANMsg+1,f,c
  1865  0014E4  3223               	rrcf	??_WriteCANMsg,f,c
  1866  0014E6  5023               	movf	??_WriteCANMsg,w,c
  1867  0014E8  010F               	movlb	15	; () banked
  1868  0014EA  6F21               	movwf	33,b	;volatile
  1869                           
  1870                           ;CANMain.c: 129: TXB0SIDLbits.SID = (msgID & 0b111);
  1871  0014EC  C01D  F023         	movff	WriteCANMsg@msgID,??_WriteCANMsg
  1872  0014F0  0E07               	movlw	7
  1873  0014F2  1623               	andwf	??_WriteCANMsg,f,c
  1874  0014F4  3A23               	swapf	??_WriteCANMsg,f,c
  1875  0014F6  4623               	rlncf	??_WriteCANMsg,f,c
  1876  0014F8  010F               	movlb	15	; () banked
  1877  0014FA  5122               	movf	34,w,b	;volatile
  1878  0014FC  1823               	xorwf	??_WriteCANMsg,w,c
  1879  0014FE  0B1F               	andlw	-225
  1880  001500  1823               	xorwf	??_WriteCANMsg,w,c
  1881  001502  010F               	movlb	15	; () banked
  1882  001504  6F22               	movwf	34,b	;volatile
  1883                           
  1884                           ; BSR set to: 15
  1885                           ;CANMain.c: 130: TXB0SIDLbits.EXIDE = 0;
  1886  001506  010F               	movlb	15	; () banked
  1887  001508  9722               	bcf	34,3,b	;volatile
  1888                           
  1889                           ;CANMain.c: 131: TXB0DLC = dataLen & 0b1111;
  1890  00150A  5021               	movf	WriteCANMsg@dataLen,w,c
  1891  00150C  0B0F               	andlw	15
  1892  00150E  010F               	movlb	15	; () banked
  1893  001510  6F25               	movwf	37,b	;volatile
  1894                           
  1895                           ; BSR set to: 15
  1896                           ;CANMain.c: 132: for (i = 0; i < dataLen; ++i) {
  1897  001512  0E00               	movlw	0
  1898  001514  6E25               	movwf	WriteCANMsg@i,c
  1899  001516  D013               	goto	l2184
  1900  001518                     l2180:
  1901                           
  1902                           ;CANMain.c: 133: ((unsigned char*) &TXB0D0)[i] = ((unsigned char *) data)[i];
  1903  001518  5025               	movf	WriteCANMsg@i,w,c
  1904  00151A  0D01               	mullw	1
  1905  00151C  50F3               	movf	prodl,w,c
  1906  00151E  241F               	addwf	WriteCANMsg@data,w,c
  1907  001520  6ED9               	movwf	fsr2l,c
  1908  001522  50F4               	movf	prodh,w,c
  1909  001524  2020               	addwfc	WriteCANMsg@data+1,w,c
  1910  001526  6EDA               	movwf	fsr2h,c
  1911  001528  5025               	movf	WriteCANMsg@i,w,c
  1912  00152A  0D01               	mullw	1
  1913  00152C  0E26               	movlw	38
  1914  00152E  24F3               	addwf	prodl,w,c
  1915  001530  6EE1               	movwf	fsr1l,c
  1916  001532  0E0F               	movlw	15
  1917  001534  20F4               	addwfc	prodh,w,c
  1918  001536  6EE2               	movwf	fsr1h,c
  1919  001538  CFDF FFE7          	movff	indf2,indf1
  1920  00153C  2A25               	incf	WriteCANMsg@i,f,c
  1921  00153E                     l2184:
  1922  00153E  5021               	movf	WriteCANMsg@dataLen,w,c
  1923  001540  5C25               	subwf	WriteCANMsg@i,w,c
  1924  001542  A0D8               	btfss	status,0,c
  1925  001544  D7E9               	goto	l2180
  1926                           
  1927                           ;CANMain.c: 134: }
  1928                           ;CANMain.c: 135: TXB0CONbits.TXREQ = 1;
  1929  001546  010F               	movlb	15	; () banked
  1930  001548  8720               	bsf	32,3,b	;volatile
  1931                           
  1932                           ;CANMain.c: 136: return 1;
  1933                           ;	Return value of _WriteCANMsg is never used
  1934  00154A  0012               	return	
  1935  00154C                     __end_of_WriteCANMsg:
  1936                           	opt stack 0
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           prodh	equ	0xFF4
  1942                           prodl	equ	0xFF3
  1943                           intcon	equ	0xFF2
  1944                           postinc0	equ	0xFEE
  1945                           wreg	equ	0xFE8
  1946                           indf1	equ	0xFE7
  1947                           postdec1	equ	0xFE5
  1948                           fsr1h	equ	0xFE2
  1949                           fsr1l	equ	0xFE1
  1950                           indf2	equ	0xFDF
  1951                           postinc2	equ	0xFDE
  1952                           postdec2	equ	0xFDD
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _LCDWriteLine *****************
  1958 ;; Defined at:
  1959 ;;		line 59 in file "../LCD.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  str             2   41[COMRAM] PTR const unsigned char 
  1962 ;;		 -> lcdStr(17), LCDScroll@str(17), 
  1963 ;;  line            1   43[COMRAM] unsigned char 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1975 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1979 ;;Total ram usage:        4 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    6
  1982 ;; This function calls:
  1983 ;;		_LCDSetPos
  1984 ;;		_LCDWriteData
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;;		_LCDScroll
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text7
  1992  0015E0                     __ptext7:
  1993                           	opt stack 0
  1994  0015E0                     _LCDWriteLine:
  1995                           	opt stack 24
  1996                           
  1997                           ;LCD.c: 60: if (line >= 2) {
  1998                           
  1999                           ; BSR set to: 15
  2000                           ;incstack = 0
  2001  0015E0  0E01               	movlw	1
  2002  0015E2  642C               	cpfsgt	LCDWriteLine@line,c
  2003  0015E4  D001               	goto	l1906
  2004  0015E6  0012               	return	
  2005  0015E8                     l1906:
  2006                           
  2007                           ;LCD.c: 62: }
  2008                           ;LCD.c: 63: LCDSetPos(line, 0);
  2009  0015E8  C02C  F023         	movff	LCDWriteLine@line,LCDSetPos@row
  2010  0015EC  6A24               	clrf	LCDSetPos@row+1,c
  2011  0015EE  0E00               	movlw	0
  2012  0015F0  6E26               	movwf	LCDSetPos@col+1,c
  2013  0015F2  0E00               	movlw	0
  2014  0015F4  6E25               	movwf	LCDSetPos@col,c
  2015  0015F6  EC8D  F00B         	call	_LCDSetPos	;wreg free
  2016                           
  2017                           ;LCD.c: 64: while (*str) {
  2018  0015FA  D032               	goto	l1926
  2019  0015FC                     l1908:
  2020                           
  2021                           ;LCD.c: 65: if (*str == '\n') {
  2022  0015FC  C02A  FFD9         	movff	LCDWriteLine@str,fsr2l
  2023  001600  C02B  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  2024  001604  0E0A               	movlw	10
  2025  001606  18DE               	xorwf	postinc2,w,c
  2026  001608  A4D8               	btfss	status,2,c
  2027  00160A  D007               	goto	l1916
  2028                           
  2029                           ;LCD.c: 66: ++line;
  2030  00160C  2A2C               	incf	LCDWriteLine@line,f,c
  2031                           
  2032                           ;LCD.c: 67: if (line == 2) {
  2033  00160E  0E02               	movlw	2
  2034  001610  182C               	xorwf	LCDWriteLine@line,w,c
  2035  001612  A4D8               	btfss	status,2,c
  2036  001614  D002               	goto	l1916
  2037                           
  2038                           ;LCD.c: 68: line = 0;
  2039  001616  0E00               	movlw	0
  2040  001618  6E2C               	movwf	LCDWriteLine@line,c
  2041  00161A                     l1916:
  2042                           
  2043                           ;LCD.c: 69: }
  2044                           ;LCD.c: 70: }
  2045                           ;LCD.c: 71: if (*str == '\r' || *str == '\n') {
  2046  00161A  C02A  FFD9         	movff	LCDWriteLine@str,fsr2l
  2047  00161E  C02B  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  2048  001622  0E0D               	movlw	13
  2049  001624  18DE               	xorwf	postinc2,w,c
  2050  001626  B4D8               	btfsc	status,2,c
  2051  001628  D008               	goto	l1920
  2052  00162A  C02A  FFD9         	movff	LCDWriteLine@str,fsr2l
  2053  00162E  C02B  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  2054  001632  0E0A               	movlw	10
  2055  001634  18DE               	xorwf	postinc2,w,c
  2056  001636  A4D8               	btfss	status,2,c
  2057  001638  D00A               	goto	l1922
  2058  00163A                     l1920:
  2059                           
  2060                           ;LCD.c: 72: LCDSetPos(line, 0);
  2061  00163A  C02C  F023         	movff	LCDWriteLine@line,LCDSetPos@row
  2062  00163E  6A24               	clrf	LCDSetPos@row+1,c
  2063  001640  0E00               	movlw	0
  2064  001642  6E26               	movwf	LCDSetPos@col+1,c
  2065  001644  0E00               	movlw	0
  2066  001646  6E25               	movwf	LCDSetPos@col,c
  2067  001648  EC8D  F00B         	call	_LCDSetPos	;wreg free
  2068                           
  2069                           ;LCD.c: 73: } else {
  2070  00164C  D007               	goto	l1924
  2071  00164E                     l1922:
  2072                           
  2073                           ;LCD.c: 74: LCDWriteData(*str);
  2074  00164E  C02A  FFD9         	movff	LCDWriteLine@str,fsr2l
  2075  001652  C02B  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  2076  001656  50DF               	movf	indf2,w,c
  2077  001658  ECB8  F00C         	call	_LCDWriteData
  2078  00165C                     l1924:
  2079                           
  2080                           ;LCD.c: 75: }
  2081                           ;LCD.c: 76: ++str;
  2082  00165C  4A2A               	infsnz	LCDWriteLine@str,f,c
  2083  00165E  2A2B               	incf	LCDWriteLine@str+1,f,c
  2084  001660                     l1926:
  2085  001660  C02A  FFD9         	movff	LCDWriteLine@str,fsr2l
  2086  001664  C02B  FFDA         	movff	LCDWriteLine@str+1,fsr2h
  2087  001668  50DF               	movf	indf2,w,c
  2088  00166A  B4D8               	btfsc	status,2,c
  2089  00166C  0012               	return	
  2090  00166E  D7C6               	goto	l1908
  2091  001670                     __end_of_LCDWriteLine:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           prodh	equ	0xFF4
  2098                           prodl	equ	0xFF3
  2099                           intcon	equ	0xFF2
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           indf1	equ	0xFE7
  2103                           postdec1	equ	0xFE5
  2104                           fsr1h	equ	0xFE2
  2105                           fsr1l	equ	0xFE1
  2106                           indf2	equ	0xFDF
  2107                           postinc2	equ	0xFDE
  2108                           postdec2	equ	0xFDD
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _LCDInit *****************
  2114 ;; Defined at:
  2115 ;;		line 24 in file "../LCD.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;		None
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  functionSet     1   35[COMRAM] unsigned char 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;		None               void
  2122 ;; Registers used:
  2123 ;;		wreg, status,2, status,0, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2130 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2131 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2133 ;;Total ram usage:        2 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    5
  2136 ;; This function calls:
  2137 ;;		_LCDInitCommand
  2138 ;;		_LCDInitPort
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text8
  2145  001670                     __ptext8:
  2146                           	opt stack 0
  2147  001670                     _LCDInit:
  2148                           	opt stack 25
  2149                           
  2150                           ;LCD.c: 25: char functionSet = 0b00111000;
  2151                           
  2152                           ;incstack = 0
  2153  001670  0E38               	movlw	56
  2154  001672  6E24               	movwf	LCDInit@functionSet,c
  2155                           
  2156                           ;LCD.c: 26: LCDInitPort();
  2157  001674  EC4A  F00C         	call	_LCDInitPort	;wreg free
  2158                           
  2159                           ;LCD.c: 27: _delay((unsigned long)((10)*(40000000L/4000.0)));
  2160  001678  0E82               	movlw	130
  2161  00167A  6E23               	movwf	??_LCDInit& (0+255),c
  2162  00167C  0EDE               	movlw	222
  2163  00167E                     u1647:
  2164  00167E  2EE8               	decfsz	wreg,f,c
  2165  001680  D7FE               	goto	u1647
  2166  001682  2E23               	decfsz	??_LCDInit& (0+255),f,c
  2167  001684  D7FC               	goto	u1647
  2168                           
  2169                           ;LCD.c: 37: LCDInitCommand(functionSet);
  2170  001686  5024               	movf	LCDInit@functionSet,w,c
  2171  001688  ECD7  F00C         	call	_LCDInitCommand
  2172                           
  2173                           ;LCD.c: 38: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2174  00168C  0E85               	movlw	133
  2175  00168E                     u1657:
  2176  00168E  2EE8               	decfsz	wreg,f,c
  2177  001690  D7FE               	goto	u1657
  2178  001692  F000               	nop	
  2179                           
  2180                           ;LCD.c: 39: LCDInitCommand(0b00001100);
  2181  001694  0E0C               	movlw	12
  2182  001696  ECD7  F00C         	call	_LCDInitCommand
  2183                           
  2184                           ;LCD.c: 40: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2185  00169A  0E85               	movlw	133
  2186  00169C                     u1667:
  2187  00169C  2EE8               	decfsz	wreg,f,c
  2188  00169E  D7FE               	goto	u1667
  2189  0016A0  F000               	nop	
  2190                           
  2191                           ;LCD.c: 41: LCDInitCommand(0b00000001);
  2192  0016A2  0E01               	movlw	1
  2193  0016A4  ECD7  F00C         	call	_LCDInitCommand
  2194                           
  2195                           ;LCD.c: 42: _delay((unsigned long)((1700)*(40000000L/4000000.0)));
  2196  0016A8  0E17               	movlw	23
  2197  0016AA  6E23               	movwf	??_LCDInit& (0+255),c
  2198  0016AC  0E12               	movlw	18
  2199  0016AE                     u1677:
  2200  0016AE  2EE8               	decfsz	wreg,f,c
  2201  0016B0  D7FE               	goto	u1677
  2202  0016B2  2E23               	decfsz	??_LCDInit& (0+255),f,c
  2203  0016B4  D7FC               	goto	u1677
  2204  0016B6  D000               	nop2	
  2205                           
  2206                           ;LCD.c: 43: LCDInitCommand(0b00000110);
  2207  0016B8  0E06               	movlw	6
  2208  0016BA  ECD7  F00C         	call	_LCDInitCommand
  2209                           
  2210                           ;LCD.c: 44: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2211  0016BE  0E85               	movlw	133
  2212  0016C0                     u1687:
  2213  0016C0  2EE8               	decfsz	wreg,f,c
  2214  0016C2  D7FE               	goto	u1687
  2215  0016C4  F000               	nop	
  2216  0016C6  0012               	return		;funcret
  2217  0016C8                     __end_of_LCDInit:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           prodh	equ	0xFF4
  2224                           prodl	equ	0xFF3
  2225                           intcon	equ	0xFF2
  2226                           postinc0	equ	0xFEE
  2227                           wreg	equ	0xFE8
  2228                           indf1	equ	0xFE7
  2229                           postdec1	equ	0xFE5
  2230                           fsr1h	equ	0xFE2
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _LCDInitPort *****************
  2240 ;; Defined at:
  2241 ;;		line 287 in file "../LCD.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;		None
  2246 ;; Return value:  Size  Location     Type
  2247 ;;		None               void
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2259 ;;Total ram usage:        0 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    3
  2262 ;; This function calls:
  2263 ;;		_WriteRegister
  2264 ;; This function is called by:
  2265 ;;		_LCDInit
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text9
  2270  001894                     __ptext9:
  2271                           	opt stack 0
  2272  001894                     _LCDInitPort:
  2273                           	opt stack 26
  2274                           
  2275                           ;LCD.c: 288: TRISAbits.TRISA2 = 0;
  2276                           
  2277                           ;incstack = 0
  2278  001894  9492               	bcf	3986,2,c	;volatile
  2279                           
  2280                           ;LCD.c: 289: LATAbits.LATA2 = 1;
  2281  001896  8489               	bsf	3977,2,c	;volatile
  2282                           
  2283                           ;LCD.c: 304: TRISCbits.TRISC3 = 0;
  2284  001898  9694               	bcf	3988,3,c	;volatile
  2285                           
  2286                           ;LCD.c: 305: TRISCbits.TRISC5 = 0;
  2287  00189A  9A94               	bcf	3988,5,c	;volatile
  2288                           
  2289                           ;LCD.c: 307: SSPCON1 = 0x21;
  2290  00189C  0E21               	movlw	33
  2291  00189E  6EC6               	movwf	4038,c	;volatile
  2292                           
  2293                           ;LCD.c: 308: SSPSTATbits.CKE = 1;
  2294  0018A0  8CC7               	bsf	4039,6,c	;volatile
  2295                           
  2296                           ;LCD.c: 309: SSPIF = 0;
  2297  0018A2  969E               	bcf	3998,3,c	;volatile
  2298                           
  2299                           ;LCD.c: 310: WriteRegister(0, 0);
  2300  0018A4  0E00               	movlw	0
  2301  0018A6  6E1D               	movwf	WriteRegister@b,c
  2302  0018A8  0E00               	movlw	0
  2303  0018AA  EC75  F00C         	call	_WriteRegister
  2304                           
  2305                           ;LCD.c: 311: WriteRegister(1, 0);
  2306  0018AE  0E00               	movlw	0
  2307  0018B0  6E1D               	movwf	WriteRegister@b,c
  2308  0018B2  0E01               	movlw	1
  2309  0018B4  EC75  F00C         	call	_WriteRegister
  2310                           
  2311                           ;LCD.c: 312: WriteRegister(0x12, 0);
  2312  0018B8  0E00               	movlw	0
  2313  0018BA  6E1D               	movwf	WriteRegister@b,c
  2314  0018BC  0E12               	movlw	18
  2315  0018BE  EC75  F00C         	call	_WriteRegister
  2316  0018C2  0012               	return		;funcret
  2317  0018C4                     __end_of_LCDInitPort:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           postinc0	equ	0xFEE
  2327                           wreg	equ	0xFE8
  2328                           indf1	equ	0xFE7
  2329                           postdec1	equ	0xFE5
  2330                           fsr1h	equ	0xFE2
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _LCDInitCommand *****************
  2340 ;; Defined at:
  2341 ;;		line 193 in file "../LCD.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  command         1    wreg     unsigned char 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  command         1   33[COMRAM] unsigned char 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;		None               void
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2358 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2359 ;;Total ram usage:        1 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    4
  2362 ;; This function calls:
  2363 ;;		_LCDWriteByte
  2364 ;; This function is called by:
  2365 ;;		_LCDInit
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text10
  2370  0019AE                     __ptext10:
  2371                           	opt stack 0
  2372  0019AE                     _LCDInitCommand:
  2373                           	opt stack 25
  2374                           
  2375                           ;incstack = 0
  2376                           ;LCDInitCommand@command stored from wreg
  2377  0019AE  6E22               	movwf	LCDInitCommand@command,c
  2378                           
  2379                           ;LCD.c: 194: LCDWriteByte(command, 0);
  2380  0019B0  0E00               	movlw	0
  2381  0019B2  6E1F               	movwf	LCDWriteByte@rs,c
  2382  0019B4  5022               	movf	LCDInitCommand@command,w,c
  2383  0019B6  EC13  F00C         	call	_LCDWriteByte
  2384  0019BA  0012               	return		;funcret
  2385  0019BC                     __end_of_LCDInitCommand:
  2386                           	opt stack 0
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           prodh	equ	0xFF4
  2392                           prodl	equ	0xFF3
  2393                           intcon	equ	0xFF2
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           indf1	equ	0xFE7
  2397                           postdec1	equ	0xFE5
  2398                           fsr1h	equ	0xFE2
  2399                           fsr1l	equ	0xFE1
  2400                           indf2	equ	0xFDF
  2401                           postinc2	equ	0xFDE
  2402                           postdec2	equ	0xFDD
  2403                           fsr2h	equ	0xFDA
  2404                           fsr2l	equ	0xFD9
  2405                           status	equ	0xFD8
  2406                           
  2407 ;; *************** function _LCDClearLine *****************
  2408 ;; Defined at:
  2409 ;;		line 80 in file "../LCD.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  line            1    wreg     unsigned char 
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  line            1   42[COMRAM] unsigned char 
  2414 ;;  c               1   41[COMRAM] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;		None               void
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2427 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2428 ;;Total ram usage:        2 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    6
  2431 ;; This function calls:
  2432 ;;		_LCDSetPos
  2433 ;;		_LCDWriteData
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;;		_LCDScroll
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text11
  2441  001862                     __ptext11:
  2442                           	opt stack 0
  2443  001862                     _LCDClearLine:
  2444                           	opt stack 24
  2445                           
  2446                           ;incstack = 0
  2447                           ;LCDClearLine@line stored from wreg
  2448  001862  6E2B               	movwf	LCDClearLine@line,c
  2449                           
  2450                           ;LCD.c: 81: char c = 0;
  2451  001864  0E00               	movlw	0
  2452  001866  6E2A               	movwf	LCDClearLine@c,c
  2453                           
  2454                           ;LCD.c: 82: if (line >= 2) {
  2455  001868  0E01               	movlw	1
  2456  00186A  642B               	cpfsgt	LCDClearLine@line,c
  2457  00186C  D001               	goto	l1934
  2458  00186E  0012               	return	
  2459  001870                     l1934:
  2460                           
  2461                           ;LCD.c: 84: }
  2462                           ;LCD.c: 85: LCDSetPos(line, 0);
  2463  001870  C02B  F023         	movff	LCDClearLine@line,LCDSetPos@row
  2464  001874  6A24               	clrf	LCDSetPos@row+1,c
  2465  001876  0E00               	movlw	0
  2466  001878  6E26               	movwf	LCDSetPos@col+1,c
  2467  00187A  0E00               	movlw	0
  2468  00187C  6E25               	movwf	LCDSetPos@col,c
  2469  00187E  EC8D  F00B         	call	_LCDSetPos	;wreg free
  2470                           
  2471                           ;LCD.c: 86: while (c < 16) {
  2472  001882  D004               	goto	l1940
  2473  001884                     l1936:
  2474                           
  2475                           ;LCD.c: 87: LCDWriteData(' ');
  2476  001884  0E20               	movlw	32
  2477  001886  ECB8  F00C         	call	_LCDWriteData
  2478                           
  2479                           ;LCD.c: 88: ++c;
  2480  00188A  2A2A               	incf	LCDClearLine@c,f,c
  2481  00188C                     l1940:
  2482  00188C  0E0F               	movlw	15
  2483  00188E  642A               	cpfsgt	LCDClearLine@c,c
  2484  001890  D7F9               	goto	l1936
  2485  001892  0012               	return	
  2486  001894                     __end_of_LCDClearLine:
  2487                           	opt stack 0
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           prodh	equ	0xFF4
  2493                           prodl	equ	0xFF3
  2494                           intcon	equ	0xFF2
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           indf1	equ	0xFE7
  2498                           postdec1	equ	0xFE5
  2499                           fsr1h	equ	0xFE2
  2500                           fsr1l	equ	0xFE1
  2501                           indf2	equ	0xFDF
  2502                           postinc2	equ	0xFDE
  2503                           postdec2	equ	0xFDD
  2504                           fsr2h	equ	0xFDA
  2505                           fsr2l	equ	0xFD9
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _LCDWriteData *****************
  2509 ;; Defined at:
  2510 ;;		line 197 in file "../LCD.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  c               1    wreg     unsigned char 
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  c               1   33[COMRAM] unsigned char 
  2515 ;; Return value:  Size  Location     Type
  2516 ;;		None               void
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2528 ;;Total ram usage:        1 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    4
  2531 ;; This function calls:
  2532 ;;		_LCDWriteByte
  2533 ;;		_shortDelay
  2534 ;;		_wait
  2535 ;; This function is called by:
  2536 ;;		_LCDWriteLine
  2537 ;;		_LCDClearLine
  2538 ;;		_LCDPutStr
  2539 ;;		_LCDPutChar
  2540 ;;		_LCDLoadCustomChar
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text12
  2545  001970                     __ptext12:
  2546                           	opt stack 0
  2547  001970                     _LCDWriteData:
  2548                           	opt stack 25
  2549                           
  2550                           ;incstack = 0
  2551                           ;LCDWriteData@c stored from wreg
  2552  001970  6E22               	movwf	LCDWriteData@c,c
  2553                           
  2554                           ;LCD.c: 198: wait();
  2555  001972  ECE9  F00C         	call	_wait	;wreg free
  2556                           
  2557                           ;LCD.c: 199: LCDWriteByte(c, 1);
  2558  001976  0E01               	movlw	1
  2559  001978  6E1F               	movwf	LCDWriteByte@rs,c
  2560  00197A  5022               	movf	LCDWriteData@c,w,c
  2561  00197C  EC13  F00C         	call	_LCDWriteByte
  2562                           
  2563                           ;LCD.c: 200: shortDelay();
  2564  001980  ECE4  F00C         	call	_shortDelay	;wreg free
  2565  001984  0012               	return		;funcret
  2566  001986                     __end_of_LCDWriteData:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           indf1	equ	0xFE7
  2578                           postdec1	equ	0xFE5
  2579                           fsr1h	equ	0xFE2
  2580                           fsr1l	equ	0xFE1
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _LCDSetPos *****************
  2589 ;; Defined at:
  2590 ;;		line 96 in file "../LCD.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  row             2   34[COMRAM] int 
  2593 ;;  col             2   36[COMRAM] int 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  pos             2   39[COMRAM] int 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;		None               void
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2607 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2608 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2609 ;;Total ram usage:        7 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    5
  2612 ;; This function calls:
  2613 ;;		_LCDCommand
  2614 ;;		_calculateBase
  2615 ;; This function is called by:
  2616 ;;		_LCDWriteLine
  2617 ;;		_LCDClearLine
  2618 ;;		_LCDReadLine
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text13
  2623  00171A                     __ptext13:
  2624                           	opt stack 0
  2625  00171A                     _LCDSetPos:
  2626                           	opt stack 24
  2627                           
  2628                           ;LCD.c: 97: int pos;
  2629                           ;LCD.c: 98: if (row < 0 || col < 0 || row >= 2 || col >= 16) {
  2630                           
  2631                           ;incstack = 0
  2632  00171A  BE24               	btfsc	LCDSetPos@row+1,7,c
  2633  00171C  0012               	return	
  2634  00171E  BE26               	btfsc	LCDSetPos@col+1,7,c
  2635  001720  0012               	return	
  2636  001722  BE24               	btfsc	LCDSetPos@row+1,7,c
  2637  001724  D006               	goto	l1818
  2638  001726  5024               	movf	LCDSetPos@row+1,w,c
  2639  001728  E11A               	bnz	l85
  2640  00172A  0E02               	movlw	2
  2641  00172C  5C23               	subwf	LCDSetPos@row,w,c
  2642  00172E  B0D8               	btfsc	status,0,c
  2643  001730  0012               	return	
  2644  001732                     l1818:
  2645  001732  BE26               	btfsc	LCDSetPos@col+1,7,c
  2646  001734  D006               	goto	l1820
  2647  001736  5026               	movf	LCDSetPos@col+1,w,c
  2648  001738  E112               	bnz	l85
  2649  00173A  0E10               	movlw	16
  2650  00173C  5C25               	subwf	LCDSetPos@col,w,c
  2651  00173E  B0D8               	btfsc	status,0,c
  2652  001740  0012               	return	
  2653  001742                     l1820:
  2654                           
  2655                           ;LCD.c: 100: }
  2656                           ;LCD.c: 101: pos = calculateBase(row) + col;
  2657  001742  5023               	movf	LCDSetPos@row,w,c
  2658  001744  ECA9  F00C         	call	_calculateBase
  2659  001748  6E27               	movwf	??_LCDSetPos& (0+255),c
  2660  00174A  5027               	movf	??_LCDSetPos,w,c
  2661  00174C  2425               	addwf	LCDSetPos@col,w,c
  2662  00174E  6E28               	movwf	LCDSetPos@pos,c
  2663  001750  0E00               	movlw	0
  2664  001752  2026               	addwfc	LCDSetPos@col+1,w,c
  2665  001754  6E29               	movwf	LCDSetPos@pos+1,c
  2666                           
  2667                           ;LCD.c: 102: LCDCommand(128 + pos);
  2668  001756  5028               	movf	LCDSetPos@pos,w,c
  2669  001758  0F80               	addlw	128
  2670  00175A  ECC3  F00C         	call	_LCDCommand
  2671  00175E                     l85:
  2672  00175E  0012               	return		;funcret
  2673  001760                     __end_of_LCDSetPos:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           prodh	equ	0xFF4
  2680                           prodl	equ	0xFF3
  2681                           intcon	equ	0xFF2
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           indf1	equ	0xFE7
  2685                           postdec1	equ	0xFE5
  2686                           fsr1h	equ	0xFE2
  2687                           fsr1l	equ	0xFE1
  2688                           indf2	equ	0xFDF
  2689                           postinc2	equ	0xFDE
  2690                           postdec2	equ	0xFDD
  2691                           fsr2h	equ	0xFDA
  2692                           fsr2l	equ	0xFD9
  2693                           status	equ	0xFD8
  2694                           
  2695 ;; *************** function _calculateBase *****************
  2696 ;; Defined at:
  2697 ;;		line 225 in file "../LCD.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  line            1    wreg     unsigned char 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  line            1   29[COMRAM] unsigned char 
  2702 ;;  base            1   28[COMRAM] unsigned char 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      unsigned char 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2, status,0, prodl, prodh
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2716 ;;Total ram usage:        2 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    2
  2719 ;; This function calls:
  2720 ;;		Nothing
  2721 ;; This function is called by:
  2722 ;;		_LCDSetPos
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text14
  2727  001952                     __ptext14:
  2728                           	opt stack 0
  2729  001952                     _calculateBase:
  2730                           	opt stack 26
  2731                           
  2732                           ;incstack = 0
  2733                           ;calculateBase@line stored from wreg
  2734  001952  6E1E               	movwf	calculateBase@line,c
  2735                           
  2736                           ;LCD.c: 226: char base;
  2737                           ;LCD.c: 227: if (line % 2 == 0) {
  2738  001954  B01E               	btfsc	calculateBase@line,0,c
  2739  001956  D005               	goto	l1784
  2740                           
  2741                           ;LCD.c: 228: base = line * 10;
  2742  001958  501E               	movf	calculateBase@line,w,c
  2743  00195A  0D0A               	mullw	10
  2744  00195C  CFF3 F01D          	movff	prodl,calculateBase@base
  2745                           
  2746                           ;LCD.c: 229: } else {
  2747  001960  D005               	goto	l1786
  2748  001962                     l1784:
  2749                           
  2750                           ;LCD.c: 230: base = 54 + line * 10;
  2751  001962  501E               	movf	calculateBase@line,w,c
  2752  001964  0D0A               	mullw	10
  2753  001966  50F3               	movf	prodl,w,c
  2754  001968  0F36               	addlw	54
  2755  00196A  6E1D               	movwf	calculateBase@base,c
  2756  00196C                     l1786:
  2757                           
  2758                           ;LCD.c: 231: }
  2759                           ;LCD.c: 232: return base;
  2760  00196C  501D               	movf	calculateBase@base,w,c
  2761  00196E  0012               	return	
  2762  001970                     __end_of_calculateBase:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           intcon	equ	0xFF2
  2771                           postinc0	equ	0xFEE
  2772                           wreg	equ	0xFE8
  2773                           indf1	equ	0xFE7
  2774                           postdec1	equ	0xFE5
  2775                           fsr1h	equ	0xFE2
  2776                           fsr1l	equ	0xFE1
  2777                           indf2	equ	0xFDF
  2778                           postinc2	equ	0xFDE
  2779                           postdec2	equ	0xFDD
  2780                           fsr2h	equ	0xFDA
  2781                           fsr2l	equ	0xFD9
  2782                           status	equ	0xFD8
  2783                           
  2784 ;; *************** function _LCDCommand *****************
  2785 ;; Defined at:
  2786 ;;		line 187 in file "../LCD.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  command         1    wreg     unsigned char 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  command         1   33[COMRAM] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;		None               void
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2804 ;;Total ram usage:        1 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    4
  2807 ;; This function calls:
  2808 ;;		_LCDWriteByte
  2809 ;;		_shortDelay
  2810 ;;		_wait
  2811 ;; This function is called by:
  2812 ;;		_LCDSetPos
  2813 ;;		_LCDClear
  2814 ;;		_LCDLoadCustomChar
  2815 ;;		_LCDScroll
  2816 ;;		_LCDDisplay
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text15
  2821  001986                     __ptext15:
  2822                           	opt stack 0
  2823  001986                     _LCDCommand:
  2824                           	opt stack 24
  2825                           
  2826                           ;incstack = 0
  2827                           ;LCDCommand@command stored from wreg
  2828  001986  6E22               	movwf	LCDCommand@command,c
  2829                           
  2830                           ;LCD.c: 188: wait();
  2831  001988  ECE9  F00C         	call	_wait	;wreg free
  2832                           
  2833                           ;LCD.c: 189: LCDWriteByte(command, 0);
  2834  00198C  0E00               	movlw	0
  2835  00198E  6E1F               	movwf	LCDWriteByte@rs,c
  2836  001990  5022               	movf	LCDCommand@command,w,c
  2837  001992  EC13  F00C         	call	_LCDWriteByte
  2838                           
  2839                           ;LCD.c: 190: shortDelay();
  2840  001996  ECE4  F00C         	call	_shortDelay	;wreg free
  2841  00199A  0012               	return		;funcret
  2842  00199C                     __end_of_LCDCommand:
  2843                           	opt stack 0
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           intcon	equ	0xFF2
  2851                           postinc0	equ	0xFEE
  2852                           wreg	equ	0xFE8
  2853                           indf1	equ	0xFE7
  2854                           postdec1	equ	0xFE5
  2855                           fsr1h	equ	0xFE2
  2856                           fsr1l	equ	0xFE1
  2857                           indf2	equ	0xFDF
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _wait *****************
  2865 ;; Defined at:
  2866 ;;		line 235 in file "../LCD.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;		None               void
  2873 ;; Registers used:
  2874 ;;		None
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2884 ;;Total ram usage:        0 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    2
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_LCDCommand
  2891 ;;		_LCDWriteData
  2892 ;;		_LCDReadData
  2893 ;;		_LCDGetAC
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text16
  2898  0019D2                     __ptext16:
  2899                           	opt stack 0
  2900  0019D2                     _wait:
  2901                           	opt stack 26
  2902                           
  2903                           ;incstack = 0
  2904  0019D2  0012               	return		;funcret
  2905  0019D4                     __end_of_wait:
  2906                           	opt stack 0
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           intcon	equ	0xFF2
  2914                           postinc0	equ	0xFEE
  2915                           wreg	equ	0xFE8
  2916                           indf1	equ	0xFE7
  2917                           postdec1	equ	0xFE5
  2918                           fsr1h	equ	0xFE2
  2919                           fsr1l	equ	0xFE1
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _shortDelay *****************
  2928 ;; Defined at:
  2929 ;;		line 247 in file "../LCD.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;		None               void
  2936 ;; Registers used:
  2937 ;;		wreg
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    2
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_LCDCommand
  2954 ;;		_LCDWriteData
  2955 ;;		_LCDReadData
  2956 ;;		_LCDGetAC
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text17
  2961  0019C8                     __ptext17:
  2962                           	opt stack 0
  2963  0019C8                     _shortDelay:
  2964                           	opt stack 26
  2965                           
  2966                           ;LCD.c: 249: _delay((unsigned long)((40)*(40000000L/4000000.0)));
  2967                           
  2968                           ;incstack = 0
  2969  0019C8  0E85               	movlw	133
  2970  0019CA                     u1697:
  2971  0019CA  2EE8               	decfsz	wreg,f,c
  2972  0019CC  D7FE               	goto	u1697
  2973  0019CE  F000               	nop	
  2974  0019D0  0012               	return		;funcret
  2975  0019D2                     __end_of_shortDelay:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           intcon	equ	0xFF2
  2984                           postinc0	equ	0xFEE
  2985                           wreg	equ	0xFE8
  2986                           indf1	equ	0xFE7
  2987                           postdec1	equ	0xFE5
  2988                           fsr1h	equ	0xFE2
  2989                           fsr1l	equ	0xFE1
  2990                           indf2	equ	0xFDF
  2991                           postinc2	equ	0xFDE
  2992                           postdec2	equ	0xFDD
  2993                           fsr2h	equ	0xFDA
  2994                           fsr2l	equ	0xFD9
  2995                           status	equ	0xFD8
  2996                           
  2997 ;; *************** function _LCDWriteByte *****************
  2998 ;; Defined at:
  2999 ;;		line 260 in file "../LCD.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  c               1    wreg     unsigned char 
  3002 ;;  rs              1   30[COMRAM] unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  c               1   31[COMRAM] unsigned char 
  3005 ;;  comFlags        1   32[COMRAM] unsigned char 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;		None               void
  3008 ;; Registers used:
  3009 ;;		wreg, status,2, status,0, cstack
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3015 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3016 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3018 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3019 ;;Total ram usage:        3 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    3
  3022 ;; This function calls:
  3023 ;;		_WriteRegister
  3024 ;; This function is called by:
  3025 ;;		_LCDCommand
  3026 ;;		_LCDInitCommand
  3027 ;;		_LCDWriteData
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text18
  3032  001826                     __ptext18:
  3033                           	opt stack 0
  3034  001826                     _LCDWriteByte:
  3035                           	opt stack 25
  3036                           
  3037                           ;incstack = 0
  3038                           ;LCDWriteByte@c stored from wreg
  3039  001826  6E20               	movwf	LCDWriteByte@c,c
  3040                           
  3041                           ;LCD.c: 261: unsigned char comFlags = 0;
  3042  001828  0E00               	movlw	0
  3043  00182A  6E21               	movwf	LCDWriteByte@comFlags,c
  3044                           
  3045                           ;LCD.c: 262: if (rs) {
  3046  00182C  501F               	movf	LCDWriteByte@rs,w,c
  3047  00182E  B4D8               	btfsc	status,2,c
  3048  001830  D002               	goto	l1764
  3049                           
  3050                           ;LCD.c: 263: comFlags = 0b10000000;
  3051  001832  0E80               	movlw	128
  3052  001834  6E21               	movwf	LCDWriteByte@comFlags,c
  3053  001836                     l1764:
  3054                           
  3055                           ;LCD.c: 264: }
  3056                           ;LCD.c: 265: WriteRegister(0x12, comFlags);
  3057  001836  C021  F01D         	movff	LCDWriteByte@comFlags,WriteRegister@b
  3058  00183A  0E12               	movlw	18
  3059  00183C  EC75  F00C         	call	_WriteRegister
  3060                           
  3061                           ;LCD.c: 266: WriteRegister(0x13, c);
  3062  001840  C020  F01D         	movff	LCDWriteByte@c,WriteRegister@b
  3063  001844  0E13               	movlw	19
  3064  001846  EC75  F00C         	call	_WriteRegister
  3065                           
  3066                           ;LCD.c: 267: WriteRegister(0x12, comFlags | 0b01000000);
  3067  00184A  5021               	movf	LCDWriteByte@comFlags,w,c
  3068  00184C  0940               	iorlw	64
  3069  00184E  6E1D               	movwf	WriteRegister@b,c
  3070  001850  0E12               	movlw	18
  3071  001852  EC75  F00C         	call	_WriteRegister
  3072                           
  3073                           ;LCD.c: 268: WriteRegister(0x12, comFlags);
  3074  001856  C021  F01D         	movff	LCDWriteByte@comFlags,WriteRegister@b
  3075  00185A  0E12               	movlw	18
  3076  00185C  EC75  F00C         	call	_WriteRegister
  3077  001860  0012               	return		;funcret
  3078  001862                     __end_of_LCDWriteByte:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           prodh	equ	0xFF4
  3085                           prodl	equ	0xFF3
  3086                           intcon	equ	0xFF2
  3087                           postinc0	equ	0xFEE
  3088                           wreg	equ	0xFE8
  3089                           indf1	equ	0xFE7
  3090                           postdec1	equ	0xFE5
  3091                           fsr1h	equ	0xFE2
  3092                           fsr1l	equ	0xFE1
  3093                           indf2	equ	0xFDF
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _WriteRegister *****************
  3101 ;; Defined at:
  3102 ;;		line 320 in file "../LCD.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  reg             1    wreg     unsigned char 
  3105 ;;  b               1   28[COMRAM] unsigned char 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  reg             1   29[COMRAM] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;		None               void
  3110 ;; Registers used:
  3111 ;;		wreg, status,2
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3117 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3121 ;;Total ram usage:        2 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    2
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_LCDWriteByte
  3128 ;;		_LCDInitPort
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text19
  3133  0018EA                     __ptext19:
  3134                           	opt stack 0
  3135  0018EA                     _WriteRegister:
  3136                           	opt stack 25
  3137                           
  3138                           ;incstack = 0
  3139                           ;WriteRegister@reg stored from wreg
  3140  0018EA  6E1E               	movwf	WriteRegister@reg,c
  3141                           
  3142                           ;LCD.c: 321: LATAbits.LATA2 = 0;
  3143  0018EC  9489               	bcf	3977,2,c	;volatile
  3144                           
  3145                           ;LCD.c: 322: SSPBUF = 0x40;
  3146  0018EE  0E40               	movlw	64
  3147  0018F0  6EC9               	movwf	4041,c	;volatile
  3148  0018F2                     l166:
  3149  0018F2  A69E               	btfss	3998,3,c	;volatile
  3150  0018F4  D7FE               	goto	l166
  3151                           
  3152                           ;LCD.c: 324: SSPIF = 0;
  3153  0018F6  969E               	bcf	3998,3,c	;volatile
  3154                           
  3155                           ;LCD.c: 325: SSPBUF = reg;
  3156  0018F8  C01E  FFC9         	movff	WriteRegister@reg,4041	;volatile
  3157  0018FC                     l169:
  3158  0018FC  A69E               	btfss	3998,3,c	;volatile
  3159  0018FE  D7FE               	goto	l169
  3160                           
  3161                           ;LCD.c: 327: SSPIF = 0;
  3162  001900  969E               	bcf	3998,3,c	;volatile
  3163                           
  3164                           ;LCD.c: 328: SSPBUF = b;
  3165  001902  C01D  FFC9         	movff	WriteRegister@b,4041	;volatile
  3166  001906                     l172:
  3167  001906  A69E               	btfss	3998,3,c	;volatile
  3168  001908  D7FE               	goto	l172
  3169                           
  3170                           ;LCD.c: 330: SSPIF = 0;
  3171  00190A  969E               	bcf	3998,3,c	;volatile
  3172                           
  3173                           ;LCD.c: 331: LATAbits.LATA2 = 1;
  3174  00190C  8489               	bsf	3977,2,c	;volatile
  3175  00190E  0012               	return		;funcret
  3176  001910                     __end_of_WriteRegister:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           intcon	equ	0xFF2
  3185                           postinc0	equ	0xFEE
  3186                           wreg	equ	0xFE8
  3187                           indf1	equ	0xFE7
  3188                           postdec1	equ	0xFE5
  3189                           fsr1h	equ	0xFE2
  3190                           fsr1l	equ	0xFE1
  3191                           indf2	equ	0xFDF
  3192                           postinc2	equ	0xFDE
  3193                           postdec2	equ	0xFDD
  3194                           fsr2h	equ	0xFDA
  3195                           fsr2l	equ	0xFD9
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _ConfigSystem *****************
  3199 ;; Defined at:
  3200 ;;		line 141 in file "../CANMain.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;		None
  3205 ;; Return value:  Size  Location     Type
  3206 ;;		None               void
  3207 ;; Registers used:
  3208 ;;		wreg, status,2
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3218 ;;Total ram usage:        0 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    2
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_main
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text20
  3229  001910                     __ptext20:
  3230                           	opt stack 0
  3231  001910                     _ConfigSystem:
  3232                           	opt stack 28
  3233                           
  3234                           ;CANMain.c: 142: OSCTUNEbits.PLLEN = 1;
  3235                           
  3236                           ;incstack = 0
  3237  001910  8C9B               	bsf	3995,6,c	;volatile
  3238                           
  3239                           ;CANMain.c: 143: ANCON0 = 1;
  3240  001912  0E01               	movlw	1
  3241  001914  010F               	movlb	15	; () banked
  3242  001916  6F5D               	movwf	93,b	;volatile
  3243                           
  3244                           ;CANMain.c: 144: ANCON1 = 0;
  3245  001918  0E00               	movlw	0
  3246  00191A  010F               	movlb	15	; () banked
  3247  00191C  6F5C               	movwf	92,b	;volatile
  3248                           
  3249                           ;CANMain.c: 145: ADCON1 = 0;
  3250  00191E  0E00               	movlw	0
  3251  001920  6EC1               	movwf	4033,c	;volatile
  3252                           
  3253                           ;CANMain.c: 146: ADCON2 = 0b10111010;
  3254  001922  0EBA               	movlw	186
  3255  001924  6EC0               	movwf	4032,c	;volatile
  3256                           
  3257                           ; BSR set to: 15
  3258                           ;CANMain.c: 147: RCONbits.IPEN = 0;
  3259  001926  9ED0               	bcf	4048,7,c	;volatile
  3260                           
  3261                           ;CANMain.c: 148: TRISB = 0b00000001;
  3262  001928  0E01               	movlw	1
  3263  00192A  6E93               	movwf	3987,c	;volatile
  3264                           
  3265                           ; BSR set to: 15
  3266                           ;CANMain.c: 149: INTCON2bits.INTEDG0 = 0;
  3267  00192C  9CF1               	bcf	intcon2,6,c	;volatile
  3268                           
  3269                           ; BSR set to: 15
  3270                           ;CANMain.c: 150: INTCONbits.INT0IF = 0;
  3271  00192E  92F2               	bcf	intcon,1,c	;volatile
  3272                           
  3273                           ; BSR set to: 15
  3274                           ;CANMain.c: 151: INTCONbits.INT0IE = 1;
  3275  001930  88F2               	bsf	intcon,4,c	;volatile
  3276                           
  3277                           ; BSR set to: 15
  3278  001932  0012               	return		;funcret
  3279  001934                     __end_of_ConfigSystem:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodh	equ	0xFF4
  3286                           prodl	equ	0xFF3
  3287                           intcon	equ	0xFF2
  3288                           intcon2	equ	0xFF1
  3289                           postinc0	equ	0xFEE
  3290                           wreg	equ	0xFE8
  3291                           indf1	equ	0xFE7
  3292                           postdec1	equ	0xFE5
  3293                           fsr1h	equ	0xFE2
  3294                           fsr1l	equ	0xFE1
  3295                           indf2	equ	0xFDF
  3296                           postinc2	equ	0xFDE
  3297                           postdec2	equ	0xFDD
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _ConfigPins *****************
  3303 ;; Defined at:
  3304 ;;		line 64 in file "../CANMain.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;		None               void
  3311 ;; Registers used:
  3312 ;;		wreg, status,2
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    2
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_main
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text21
  3333  0019BC                     __ptext21:
  3334                           	opt stack 0
  3335  0019BC                     _ConfigPins:
  3336                           	opt stack 28
  3337                           
  3338                           ;CANMain.c: 65: LATD = 0;
  3339                           
  3340                           ; BSR set to: 15
  3341                           ;incstack = 0
  3342  0019BC  0E00               	movlw	0
  3343  0019BE  6E8C               	movwf	3980,c	;volatile
  3344                           
  3345                           ;CANMain.c: 66: TRISD = 0;
  3346  0019C0  0E00               	movlw	0
  3347  0019C2  6E95               	movwf	3989,c	;volatile
  3348                           
  3349                           ;CANMain.c: 67: TRISAbits.TRISA0 = 1;
  3350  0019C4  8092               	bsf	3986,0,c	;volatile
  3351  0019C6  0012               	return		;funcret
  3352  0019C8                     __end_of_ConfigPins:
  3353                           	opt stack 0
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           prodh	equ	0xFF4
  3359                           prodl	equ	0xFF3
  3360                           intcon	equ	0xFF2
  3361                           intcon2	equ	0xFF1
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           indf1	equ	0xFE7
  3365                           postdec1	equ	0xFE5
  3366                           fsr1h	equ	0xFE2
  3367                           fsr1l	equ	0xFE1
  3368                           indf2	equ	0xFDF
  3369                           postinc2	equ	0xFDE
  3370                           postdec2	equ	0xFDD
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _ConfigCAN *****************
  3376 ;; Defined at:
  3377 ;;		line 70 in file "../CANMain.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;		None
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;		None               void
  3384 ;; Registers used:
  3385 ;;		wreg, status,2, status,0
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3393 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3394 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3395 ;;Total ram usage:        3 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    2
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text22
  3406  00128A                     __ptext22:
  3407                           	opt stack 0
  3408  00128A                     _ConfigCAN:
  3409                           	opt stack 28
  3410                           
  3411                           ;CANMain.c: 71: TRISBbits.TRISB3 = 1;
  3412                           
  3413                           ;incstack = 0
  3414  00128A  8693               	bsf	3987,3,c	;volatile
  3415                           
  3416                           ;CANMain.c: 72: TRISBbits.TRISB2 = 0;
  3417  00128C  9493               	bcf	3987,2,c	;volatile
  3418                           
  3419                           ;CANMain.c: 74: CANCONbits.REQOP = 4;
  3420  00128E  506F               	movf	3951,w,c	;volatile
  3421  001290  0B1F               	andlw	-225
  3422  001292  0980               	iorlw	128
  3423  001294  6E6F               	movwf	3951,c	;volatile
  3424  001296                     l1984:
  3425  001296  386E               	swapf	3950,w,c	;volatile
  3426  001298  32E8               	rrcf	wreg,f,c
  3427  00129A  0B07               	andlw	7
  3428  00129C  0A04               	xorlw	4
  3429  00129E  A4D8               	btfss	status,2,c
  3430  0012A0  D7FA               	goto	l1984
  3431                           
  3432                           ;CANMain.c: 77: ECANCONbits.MDSEL = 0b00;
  3433  0012A2  0E3F               	movlw	-193
  3434  0012A4  1672               	andwf	3954,f,c	;volatile
  3435                           
  3436                           ;CANMain.c: 80: BRGCON1bits.BRP = 24;
  3437  0012A6  010E               	movlb	14	; () banked
  3438  0012A8  9143               	bcf	67,0,b	;volatile
  3439  0012AA  9343               	bcf	67,1,b	;volatile
  3440  0012AC  9543               	bcf	67,2,b	;volatile
  3441  0012AE  8743               	bsf	67,3,b	;volatile
  3442  0012B0  8943               	bsf	67,4,b	;volatile
  3443  0012B2  9B43               	bcf	67,5,b	;volatile
  3444                           
  3445                           ;CANMain.c: 81: BRGCON1bits.SJW = 0;
  3446  0012B4  0E3F               	movlw	-193
  3447  0012B6  010E               	movlb	14	; () banked
  3448  0012B8  1743               	andwf	67,f,b	;volatile
  3449                           
  3450                           ; BSR set to: 14
  3451                           ;CANMain.c: 82: BRGCON2bits.SEG2PHTS = 1;
  3452  0012BA  010E               	movlb	14	; () banked
  3453  0012BC  8F44               	bsf	68,7,b	;volatile
  3454                           
  3455                           ;CANMain.c: 83: BRGCON2bits.SEG1PH = 3;
  3456  0012BE  010E               	movlb	14	; () banked
  3457  0012C0  5144               	movf	68,w,b	;volatile
  3458  0012C2  0BC7               	andlw	-57
  3459  0012C4  0918               	iorlw	24
  3460  0012C6  6F44               	movwf	68,b	;volatile
  3461                           
  3462                           ; BSR set to: 14
  3463                           ;CANMain.c: 84: BRGCON2bits.PRSEG = 0;
  3464  0012C8  010E               	movlb	14	; () banked
  3465  0012CA  9144               	bcf	68,0,b	;volatile
  3466  0012CC  9344               	bcf	68,1,b	;volatile
  3467  0012CE  9544               	bcf	68,2,b	;volatile
  3468                           
  3469                           ;CANMain.c: 85: BRGCON3bits.SEG2PH = 1;
  3470  0012D0  010E               	movlb	14	; () banked
  3471  0012D2  5145               	movf	69,w,b	;volatile
  3472  0012D4  0BF8               	andlw	-8
  3473  0012D6  0901               	iorlw	1
  3474  0012D8  6F45               	movwf	69,b	;volatile
  3475                           
  3476                           ; BSR set to: 14
  3477                           ;CANMain.c: 88: RXM0SIDH = 0b11111111;
  3478  0012DA  010E               	movlb	14	; () banked
  3479  0012DC  69F8               	setf	248,b	;volatile
  3480                           
  3481                           ; BSR set to: 14
  3482                           ;CANMain.c: 89: RXM0SIDLbits.SID = 0b111;
  3483  0012DE  010E               	movlb	14	; () banked
  3484  0012E0  8BF9               	bsf	249,5,b	;volatile
  3485  0012E2  8DF9               	bsf	249,6,b	;volatile
  3486  0012E4  8FF9               	bsf	249,7,b	;volatile
  3487                           
  3488                           ; BSR set to: 14
  3489                           ;CANMain.c: 90: RXM1SIDH = 0b11111111;
  3490  0012E6  010E               	movlb	14	; () banked
  3491  0012E8  69FC               	setf	252,b	;volatile
  3492                           
  3493                           ; BSR set to: 14
  3494                           ;CANMain.c: 91: RXM1SIDLbits.SID = 0b111;
  3495  0012EA  010E               	movlb	14	; () banked
  3496  0012EC  8BFD               	bsf	253,5,b	;volatile
  3497  0012EE  8DFD               	bsf	253,6,b	;volatile
  3498  0012F0  8FFD               	bsf	253,7,b	;volatile
  3499                           
  3500                           ; BSR set to: 14
  3501                           ;CANMain.c: 94: RXF0SIDLbits.EXIDEN = RXF1SIDLbits.EXIDEN = RXF2SIDLbits.EXIDEN
  3502                           ;CANMain.c: 95: = RXF3SIDLbits.EXIDEN = RXF4SIDLbits.EXIDEN = RXF5SIDLbits.EXIDEN
  3503                           ;CANMain.c: 96: = 0;
  3504  0012F2  010E               	movlb	14	; () banked
  3505  0012F4  97F5               	bcf	245,3,b	;volatile
  3506  0012F6  010E               	movlb	14	; () banked
  3507  0012F8  97F1               	bcf	241,3,b	;volatile
  3508  0012FA  010E               	movlb	14	; () banked
  3509  0012FC  97ED               	bcf	237,3,b	;volatile
  3510  0012FE  010E               	movlb	14	; () banked
  3511  001300  97E9               	bcf	233,3,b	;volatile
  3512  001302  010E               	movlb	14	; () banked
  3513  001304  97E5               	bcf	229,3,b	;volatile
  3514  001306  010E               	movlb	14	; () banked
  3515  001308  97E1               	bcf	225,3,b	;volatile
  3516                           
  3517                           ;CANMain.c: 98: RXF0SIDH = 0b00100100;
  3518  00130A  0E24               	movlw	36
  3519  00130C  010E               	movlb	14	; () banked
  3520  00130E  6FE0               	movwf	224,b	;volatile
  3521                           
  3522                           ;CANMain.c: 99: RXF1SIDH = 0b01100110;
  3523  001310  0E66               	movlw	102
  3524  001312  010E               	movlb	14	; () banked
  3525  001314  6FE4               	movwf	228,b	;volatile
  3526                           
  3527                           ;CANMain.c: 100: RXF0SIDLbits.SID = 0b011;
  3528  001316  010E               	movlb	14	; () banked
  3529  001318  51E1               	movf	225,w,b	;volatile
  3530  00131A  0B1F               	andlw	-225
  3531  00131C  0960               	iorlw	96
  3532  00131E  6FE1               	movwf	225,b	;volatile
  3533                           
  3534                           ;CANMain.c: 101: RXF1SIDLbits.SID = 0b011;
  3535  001320  010E               	movlb	14	; () banked
  3536  001322  51E5               	movf	229,w,b	;volatile
  3537  001324  0B1F               	andlw	-225
  3538  001326  0960               	iorlw	96
  3539  001328  6FE5               	movwf	229,b	;volatile
  3540                           
  3541                           ;CANMain.c: 103: RXF2SIDH = RXF3SIDH = RXF4SIDH = RXF5SIDH = 0;
  3542  00132A  0E00               	movlw	0
  3543  00132C  010E               	movlb	14	; () banked
  3544  00132E  6FF4               	movwf	244,b	;volatile
  3545  001330  CEF4 FEF0          	movff	3828,3824	;volatile
  3546  001334  CEF0 FEEC          	movff	3824,3820	;volatile
  3547  001338  CEEC FEE8          	movff	3820,3816	;volatile
  3548                           
  3549                           ; BSR set to: 14
  3550                           ;CANMain.c: 104: RXF2SIDLbits.SID = RXF3SIDLbits.SID = RXF4SIDLbits.SID
  3551                           ;CANMain.c: 105: = RXF5SIDLbits.SID = 0b000;
  3552  00133C  010E               	movlb	14	; () banked
  3553  00133E  51F5               	movf	245,w,b	;volatile
  3554  001340  0B1F               	andlw	-225
  3555  001342  0900               	iorlw	0
  3556  001344  6FF5               	movwf	245,b	;volatile
  3557  001346  010E               	movlb	14	; () banked
  3558  001348  39F5               	swapf	245,w,b	;volatile
  3559  00134A  32E8               	rrcf	wreg,f,c
  3560  00134C  0B07               	andlw	7
  3561  00134E  6E1D               	movwf	??_ConfigCAN& (0+255),c
  3562  001350  3A1D               	swapf	??_ConfigCAN,f,c
  3563  001352  461D               	rlncf	??_ConfigCAN,f,c
  3564  001354  010E               	movlb	14	; () banked
  3565  001356  51F1               	movf	241,w,b	;volatile
  3566  001358  181D               	xorwf	??_ConfigCAN,w,c
  3567  00135A  0B1F               	andlw	-225
  3568  00135C  181D               	xorwf	??_ConfigCAN,w,c
  3569  00135E  010E               	movlb	14	; () banked
  3570  001360  6FF1               	movwf	241,b	;volatile
  3571  001362  010E               	movlb	14	; () banked
  3572  001364  39F1               	swapf	241,w,b	;volatile
  3573  001366  32E8               	rrcf	wreg,f,c
  3574  001368  0B07               	andlw	7
  3575  00136A  6E1E               	movwf	(??_ConfigCAN+1)& (0+255),c
  3576  00136C  3A1E               	swapf	??_ConfigCAN+1,f,c
  3577  00136E  461E               	rlncf	??_ConfigCAN+1,f,c
  3578  001370  010E               	movlb	14	; () banked
  3579  001372  51ED               	movf	237,w,b	;volatile
  3580  001374  181E               	xorwf	??_ConfigCAN+1,w,c
  3581  001376  0B1F               	andlw	-225
  3582  001378  181E               	xorwf	??_ConfigCAN+1,w,c
  3583  00137A  010E               	movlb	14	; () banked
  3584  00137C  6FED               	movwf	237,b	;volatile
  3585  00137E  010E               	movlb	14	; () banked
  3586  001380  39ED               	swapf	237,w,b	;volatile
  3587  001382  32E8               	rrcf	wreg,f,c
  3588  001384  0B07               	andlw	7
  3589  001386  6E1F               	movwf	(??_ConfigCAN+2)& (0+255),c
  3590  001388  3A1F               	swapf	??_ConfigCAN+2,f,c
  3591  00138A  461F               	rlncf	??_ConfigCAN+2,f,c
  3592  00138C  010E               	movlb	14	; () banked
  3593  00138E  51E9               	movf	233,w,b	;volatile
  3594  001390  181F               	xorwf	??_ConfigCAN+2,w,c
  3595  001392  0B1F               	andlw	-225
  3596  001394  181F               	xorwf	??_ConfigCAN+2,w,c
  3597  001396  010E               	movlb	14	; () banked
  3598  001398  6FE9               	movwf	233,b	;volatile
  3599                           
  3600                           ; BSR set to: 14
  3601                           ;CANMain.c: 108: RXB0CONbits.RXM1 = RXB0CONbits.RXM0 = 0;
  3602  00139A  9A60               	bcf	3936,5,c	;volatile
  3603  00139C  9C60               	bcf	3936,6,c	;volatile
  3604                           
  3605                           ; BSR set to: 14
  3606                           ;CANMain.c: 109: RXB1CONbits.RXM1 = 1;
  3607  00139E  010F               	movlb	15	; () banked
  3608  0013A0  8D30               	bsf	48,6,b	;volatile
  3609                           
  3610                           ; BSR set to: 15
  3611                           ;CANMain.c: 110: RXB1CONbits.RXM0 = 0;
  3612  0013A2  010F               	movlb	15	; () banked
  3613  0013A4  9B30               	bcf	48,5,b	;volatile
  3614                           
  3615                           ; BSR set to: 15
  3616                           ;CANMain.c: 111: RXB0CONbits.RXFUL = RXB1CONbits.RXFUL = 0;
  3617  0013A6  010F               	movlb	15	; () banked
  3618  0013A8  9F30               	bcf	48,7,b	;volatile
  3619  0013AA  9E60               	bcf	3936,7,c	;volatile
  3620                           
  3621                           ; BSR set to: 15
  3622                           ;CANMain.c: 112: RXB0CONbits.RB0DBEN = 0;
  3623  0013AC  9460               	bcf	3936,2,c	;volatile
  3624                           
  3625                           ; BSR set to: 15
  3626                           ;CANMain.c: 115: CANCONbits.REQOP = 0;
  3627  0013AE  9A6F               	bcf	3951,5,c	;volatile
  3628  0013B0  9C6F               	bcf	3951,6,c	;volatile
  3629  0013B2  9E6F               	bcf	3951,7,c	;volatile
  3630  0013B4                     l2018:
  3631  0013B4  386E               	swapf	3950,w,c	;volatile
  3632  0013B6  32E8               	rrcf	wreg,f,c
  3633  0013B8  0B07               	andlw	7
  3634  0013BA  0900               	iorlw	0
  3635  0013BC  A4D8               	btfss	status,2,c
  3636  0013BE  D7FA               	goto	l2018
  3637                           
  3638                           ;CANMain.c: 118: update = 0;
  3639  0013C0  0E00               	movlw	0
  3640  0013C2  0100               	movlb	0	; () banked
  3641  0013C4  6F7B               	movwf	_update& (0+255),b	;volatile
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;CANMain.c: 120: PIR5bits.RXB0IF = 0;
  3645  0013C6  9077               	bcf	3959,0,c	;volatile
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;CANMain.c: 121: PIE5bits.RXB0IE = 1;
  3649  0013C8  8076               	bsf	3958,0,c	;volatile
  3650                           
  3651                           ; BSR set to: 0
  3652  0013CA  0012               	return		;funcret
  3653  0013CC                     __end_of_ConfigCAN:
  3654                           	opt stack 0
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           intcon	equ	0xFF2
  3662                           intcon2	equ	0xFF1
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           indf1	equ	0xFE7
  3666                           postdec1	equ	0xFE5
  3667                           fsr1h	equ	0xFE2
  3668                           fsr1l	equ	0xFE1
  3669                           indf2	equ	0xFDF
  3670                           postinc2	equ	0xFDE
  3671                           postdec2	equ	0xFDD
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _HighISR *****************
  3677 ;; Defined at:
  3678 ;;		line 165 in file "../CANMain.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  i               2   26[COMRAM] int 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;		None               void
  3685 ;; Registers used:
  3686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3694 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3695 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3696 ;;Total ram usage:       19 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    1
  3699 ;; This function calls:
  3700 ;;		i2_WriteCANMsg
  3701 ;;		i2___lwmod
  3702 ;; This function is called by:
  3703 ;;		Interrupt level 2
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	intcode
  3708  000008                     __pintcode:
  3709                           	opt stack 0
  3710  000008                     _HighISR:
  3711                           	opt stack 24
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;incstack = 0
  3715  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3716  00000A  CFFA F00D          	movff	pclath,??_HighISR+3
  3717  00000E  CFFB F00E          	movff	pclatu,??_HighISR+4
  3718  000012  CFE9 F00F          	movff	fsr0l,??_HighISR+5
  3719  000016  CFEA F010          	movff	fsr0h,??_HighISR+6
  3720  00001A  CFE1 F011          	movff	fsr1l,??_HighISR+7
  3721  00001E  CFE2 F012          	movff	fsr1h,??_HighISR+8
  3722  000022  CFD9 F013          	movff	fsr2l,??_HighISR+9
  3723  000026  CFDA F014          	movff	fsr2h,??_HighISR+10
  3724  00002A  CFF3 F015          	movff	prodl,??_HighISR+11
  3725  00002E  CFF4 F016          	movff	prodh,??_HighISR+12
  3726  000032  CFF6 F017          	movff	tblptrl,??_HighISR+13
  3727  000036  CFF7 F018          	movff	tblptrh,??_HighISR+14
  3728  00003A  CFF8 F019          	movff	tblptru,??_HighISR+15
  3729  00003E  CFF5 F01A          	movff	tablat,??_HighISR+16
  3730                           
  3731                           ;CANMain.c: 166: int i;
  3732                           ;CANMain.c: 167: if (INTCONbits.INT0IF) {
  3733  000042  A2F2               	btfss	intcon,1,c	;volatile
  3734  000044  D07C               	goto	i2l348
  3735                           
  3736                           ;CANMain.c: 168: _delay((unsigned long)((10)*(40000000L/4000.0)));
  3737  000046  0E82               	movlw	130
  3738  000048  6E0A               	movwf	??_HighISR& (0+255),c
  3739  00004A  0EDE               	movlw	222
  3740  00004C                     i2u170_47:
  3741  00004C  2EE8               	decfsz	wreg,f,c
  3742  00004E  D7FE               	goto	i2u170_47
  3743  000050  2E0A               	decfsz	??_HighISR& (0+255),f,c
  3744  000052  D7FC               	goto	i2u170_47
  3745                           
  3746                           ;CANMain.c: 169: if (!buttonPressed) {
  3747  000054  503F               	movf	_buttonPressed,w,c	;volatile
  3748  000056  A4D8               	btfss	status,2,c
  3749  000058  D05F               	goto	i2l2392
  3750                           
  3751                           ;CANMain.c: 170: buttonPressed = 1;
  3752  00005A  0E01               	movlw	1
  3753  00005C  6E3F               	movwf	_buttonPressed,c	;volatile
  3754                           
  3755                           ;CANMain.c: 171: LATDbits.LATD7 = ~LATDbits.LATD7;
  3756  00005E  AE8C               	btfss	3980,7,c	;volatile
  3757  000060  D002               	goto	i2u158_40
  3758  000062  0E01               	movlw	1
  3759  000064  D001               	goto	i2u158_46
  3760  000066                     i2u158_40:
  3761  000066  0E00               	movlw	0
  3762  000068                     i2u158_46:
  3763  000068  0AFF               	xorlw	255
  3764  00006A  6E0A               	movwf	??_HighISR& (0+255),c
  3765  00006C  320A               	rrcf	??_HighISR,f,c
  3766  00006E  320A               	rrcf	??_HighISR,f,c
  3767  000070  508C               	movf	3980,w,c	;volatile
  3768  000072  180A               	xorwf	??_HighISR,w,c
  3769  000074  0B7F               	andlw	-129
  3770  000076  180A               	xorwf	??_HighISR,w,c
  3771  000078  6E8C               	movwf	3980,c	;volatile
  3772                           
  3773                           ;CANMain.c: 172: ++msgCount;
  3774  00007A  4A41               	infsnz	_msgCount,f,c	;volatile
  3775  00007C  2A42               	incf	_msgCount+1,f,c	;volatile
  3776                           
  3777                           ;CANMain.c: 174: if (msgCount % 10 == 0) {
  3778  00007E  C041  F001         	movff	_msgCount,i2___lwmod@dividend	;volatile
  3779  000082  C042  F002         	movff	_msgCount+1,i2___lwmod@dividend+1	;volatile
  3780  000086  0E00               	movlw	0
  3781  000088  6E04               	movwf	i2___lwmod@divisor+1,c
  3782  00008A  0E0A               	movlw	10
  3783  00008C  6E03               	movwf	i2___lwmod@divisor,c
  3784  00008E  ECF2  F00B         	call	i2___lwmod	;wreg free
  3785  000092  5001               	movf	?i2___lwmod,w,c
  3786  000094  1002               	iorwf	?i2___lwmod+1,w,c
  3787  000096  A4D8               	btfss	status,2,c
  3788  000098  D02D               	goto	i2l2390
  3789                           
  3790                           ;CANMain.c: 175: WriteCANMsg(0x666, (void *) &msgCount, sizeof (msgCount), 0);
  3791  00009A  0E06               	movlw	6
  3792  00009C  6E02               	movwf	i2WriteCANMsg@msgID+1,c
  3793  00009E  0E66               	movlw	102
  3794  0000A0  6E01               	movwf	i2WriteCANMsg@msgID,c
  3795  0000A2  0E41               	movlw	low _msgCount
  3796  0000A4  6E03               	movwf	i2WriteCANMsg@data,c
  3797  0000A6  0E00               	movlw	high _msgCount
  3798  0000A8  6E04               	movwf	i2WriteCANMsg@data+1,c
  3799  0000AA  0E02               	movlw	2
  3800  0000AC  6E05               	movwf	i2WriteCANMsg@dataLen,c
  3801  0000AE  0E00               	movlw	0
  3802  0000B0  6E06               	movwf	i2WriteCANMsg@priority,c
  3803  0000B2  ECA6  F00A         	call	i2_WriteCANMsg	;wreg free
  3804                           
  3805                           ;CANMain.c: 176: } else {
  3806  0000B6  D032               	goto	i2l2394
  3807  0000B8                     i2l2384:
  3808  0000B8  0E01               	movlw	1
  3809  0000BA  6E02               	movwf	i2WriteCANMsg@msgID+1,c
  3810  0000BC  0E23               	movlw	35
  3811  0000BE  6E01               	movwf	i2WriteCANMsg@msgID,c
  3812  0000C0  0E41               	movlw	low _msgCount
  3813  0000C2  6E03               	movwf	i2WriteCANMsg@data,c
  3814  0000C4  0E00               	movlw	high _msgCount
  3815  0000C6  6E04               	movwf	i2WriteCANMsg@data+1,c
  3816  0000C8  0E02               	movlw	2
  3817  0000CA  6E05               	movwf	i2WriteCANMsg@dataLen,c
  3818  0000CC  0E00               	movlw	0
  3819  0000CE  6E06               	movwf	i2WriteCANMsg@priority,c
  3820  0000D0  ECA6  F00A         	call	i2_WriteCANMsg	;wreg free
  3821                           
  3822                           ;CANMain.c: 179: break;
  3823  0000D4  D023               	goto	i2l2394
  3824  0000D6                     i2l2386:
  3825  0000D6  0E00               	movlw	0
  3826  0000D8  6E02               	movwf	i2WriteCANMsg@msgID+1,c
  3827  0000DA  0EAA               	movlw	170
  3828  0000DC  6E01               	movwf	i2WriteCANMsg@msgID,c
  3829  0000DE  0E41               	movlw	low _msgCount
  3830  0000E0  6E03               	movwf	i2WriteCANMsg@data,c
  3831  0000E2  0E00               	movlw	high _msgCount
  3832  0000E4  6E04               	movwf	i2WriteCANMsg@data+1,c
  3833  0000E6  0E02               	movlw	2
  3834  0000E8  6E05               	movwf	i2WriteCANMsg@dataLen,c
  3835  0000EA  0E00               	movlw	0
  3836  0000EC  6E06               	movwf	i2WriteCANMsg@priority,c
  3837  0000EE  ECA6  F00A         	call	i2_WriteCANMsg	;wreg free
  3838                           
  3839                           ;CANMain.c: 182: }
  3840                           
  3841                           ;CANMain.c: 181: break;
  3842  0000F2  D014               	goto	i2l2394
  3843  0000F4                     i2l2390:
  3844  0000F4  0E01               	movlw	1
  3845  0000F6  1441               	andwf	_msgCount,w,c	;volatile
  3846  0000F8  6E0A               	movwf	??_HighISR& (0+255),c
  3847  0000FA  0E00               	movlw	0
  3848  0000FC  1442               	andwf	_msgCount+1,w,c	;volatile
  3849  0000FE  6E0B               	movwf	(??_HighISR+1)& (0+255),c
  3850                           
  3851                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3852                           ; Switch size 1, requested type "space"
  3853                           ; Number of cases is 1, Range of values is 0 to 0
  3854                           ; switch strategies available:
  3855                           ; Name         Instructions Cycles
  3856                           ; simple_byte            4     3 (average)
  3857                           ;	Chosen strategy is simple_byte
  3858  000100  500B               	movf	??_HighISR+1,w,c
  3859  000102  0A00               	xorlw	0	; case 0
  3860  000104  A4D8               	btfss	status,2,c
  3861  000106  D00A               	goto	i2l2394
  3862                           
  3863                           ; Switch size 1, requested type "space"
  3864                           ; Number of cases is 2, Range of values is 0 to 1
  3865                           ; switch strategies available:
  3866                           ; Name         Instructions Cycles
  3867                           ; simple_byte            7     4 (average)
  3868                           ;	Chosen strategy is simple_byte
  3869  000108  500A               	movf	??_HighISR,w,c
  3870  00010A  0A00               	xorlw	0	; case 0
  3871  00010C  B4D8               	btfsc	status,2,c
  3872  00010E  D7E3               	goto	i2l2386
  3873  000110  0A01               	xorlw	1	; case 1
  3874  000112  B4D8               	btfsc	status,2,c
  3875  000114  D7D1               	goto	i2l2384
  3876                           
  3877                           ;CANMain.c: 183: }
  3878                           ;CANMain.c: 185: } else {
  3879  000116  D002               	goto	i2l2394
  3880  000118                     i2l2392:
  3881                           
  3882                           ;CANMain.c: 186: buttonPressed = 0;
  3883  000118  0E00               	movlw	0
  3884  00011A  6E3F               	movwf	_buttonPressed,c	;volatile
  3885  00011C                     i2l2394:
  3886                           
  3887                           ;CANMain.c: 187: }
  3888                           ;CANMain.c: 188: INTCON2bits.INTEDG0 = ~INTCON2bits.INTEDG0;
  3889  00011C  ACF1               	btfss	intcon2,6,c	;volatile
  3890  00011E  D002               	goto	i2u160_40
  3891  000120  0E01               	movlw	1
  3892  000122  D001               	goto	i2u160_46
  3893  000124                     i2u160_40:
  3894  000124  0E00               	movlw	0
  3895  000126                     i2u160_46:
  3896  000126  0AFF               	xorlw	255
  3897  000128  6E0A               	movwf	??_HighISR& (0+255),c
  3898  00012A  3A0A               	swapf	??_HighISR,f,c
  3899  00012C  460A               	rlncf	??_HighISR,f,c
  3900  00012E  460A               	rlncf	??_HighISR,f,c
  3901  000130  50F1               	movf	intcon2,w,c	;volatile
  3902  000132  180A               	xorwf	??_HighISR,w,c
  3903  000134  0BBF               	andlw	-65
  3904  000136  180A               	xorwf	??_HighISR,w,c
  3905  000138  6EF1               	movwf	intcon2,c	;volatile
  3906                           
  3907                           ;CANMain.c: 189: INTCONbits.INT0IF = 0;
  3908  00013A  92F2               	bcf	intcon,1,c	;volatile
  3909                           
  3910                           ;CANMain.c: 190: } else if (PIR5bits.RXB0IF) {
  3911  00013C  D047               	goto	i2l362
  3912  00013E                     i2l348:
  3913  00013E  A077               	btfss	3959,0,c	;volatile
  3914  000140  D045               	goto	i2l362
  3915                           
  3916                           ;CANMain.c: 191: id = RXB0SIDH;
  3917  000142  CF61 F079          	movff	3937,_id	;volatile
  3918  000146  0100               	movlb	0	; () banked
  3919  000148  6B7A               	clrf	(_id+1)& (0+255),b	;volatile
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;CANMain.c: 192: id <<= 3;
  3923  00014A  0100               	movlb	0	; () banked
  3924  00014C  90D8               	bcf	status,0,c
  3925  00014E  3779               	rlcf	_id& (0+255),f,b	;volatile
  3926  000150  377A               	rlcf	(_id+1)& (0+255),f,b
  3927  000152  0100               	movlb	0	; () banked
  3928  000154  90D8               	bcf	status,0,c	;volatile
  3929  000156  3779               	rlcf	_id& (0+255),f,b	;volatile
  3930  000158  377A               	rlcf	(_id+1)& (0+255),f,b
  3931  00015A  0100               	movlb	0	; () banked
  3932  00015C  90D8               	bcf	status,0,c	;volatile
  3933  00015E  3779               	rlcf	_id& (0+255),f,b	;volatile
  3934  000160  377A               	rlcf	(_id+1)& (0+255),f,b	;volatile
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;CANMain.c: 193: id |= (RXB0SIDL >> 5);
  3938  000162  CF62 F00A          	movff	3938,??_HighISR	;volatile
  3939  000166  0E05               	movlw	5
  3940  000168  6E0B               	movwf	(??_HighISR+1)& (0+255),c
  3941  00016A                     i2u162_45:
  3942  00016A  90D8               	bcf	status,0,c
  3943  00016C  320A               	rrcf	??_HighISR,f,c
  3944  00016E  2E0B               	decfsz	(??_HighISR+1)& (0+255),f,c
  3945  000170  D7FC               	goto	i2u162_45
  3946  000172  500A               	movf	??_HighISR,w,c
  3947  000174  0100               	movlb	0	; () banked
  3948  000176  1379               	iorwf	_id& (0+255),f,b	;volatile
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;CANMain.c: 194: len = RXB0DLC & 0b1111;
  3952  000178  5065               	movf	3941,w,c	;volatile
  3953  00017A  0B0F               	andlw	15
  3954  00017C  6E40               	movwf	_len,c	;volatile
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;CANMain.c: 195: for (i = 0; i < len; ++i) {
  3958  00017E  0E00               	movlw	0
  3959  000180  6E1C               	movwf	HighISR@i+1,c
  3960  000182  0E00               	movlw	0
  3961  000184  6E1B               	movwf	HighISR@i,c
  3962  000186  D010               	goto	i2l2412
  3963  000188                     i2l2408:
  3964                           
  3965                           ;CANMain.c: 196: data[i] = ((unsigned char *) &RXB0D0)[i];
  3966  000188  0E66               	movlw	102
  3967  00018A  241B               	addwf	HighISR@i,w,c
  3968  00018C  6ED9               	movwf	fsr2l,c
  3969  00018E  0E0F               	movlw	15
  3970  000190  201C               	addwfc	HighISR@i+1,w,c
  3971  000192  6EDA               	movwf	fsr2h,c
  3972  000194  0E71               	movlw	low _data
  3973  000196  241B               	addwf	HighISR@i,w,c
  3974  000198  6EE1               	movwf	fsr1l,c
  3975  00019A  0E00               	movlw	high _data
  3976  00019C  201C               	addwfc	HighISR@i+1,w,c
  3977  00019E  6EE2               	movwf	fsr1h,c
  3978  0001A0  CFDF FFE7          	movff	indf2,indf1
  3979  0001A4  4A1B               	infsnz	HighISR@i,f,c
  3980  0001A6  2A1C               	incf	HighISR@i+1,f,c
  3981  0001A8                     i2l2412:
  3982  0001A8  5040               	movf	_len,w,c	;volatile
  3983  0001AA  6E0A               	movwf	??_HighISR& (0+255),c
  3984  0001AC  6A0B               	clrf	(??_HighISR+1)& (0+255),c
  3985  0001AE  500A               	movf	??_HighISR,w,c
  3986  0001B0  5C1B               	subwf	HighISR@i,w,c
  3987  0001B2  501C               	movf	HighISR@i+1,w,c
  3988  0001B4  0A80               	xorlw	128
  3989  0001B6  6E0C               	movwf	(??_HighISR+2)& (0+255),c
  3990  0001B8  500B               	movf	??_HighISR+1,w,c
  3991  0001BA  0A80               	xorlw	128
  3992  0001BC  580C               	subwfb	(??_HighISR+2)& (0+255),w,c
  3993  0001BE  A0D8               	btfss	status,0,c
  3994  0001C0  D7E3               	goto	i2l2408
  3995                           
  3996                           ;CANMain.c: 197: }
  3997                           ;CANMain.c: 198: update = 1;
  3998  0001C2  0E01               	movlw	1
  3999  0001C4  0100               	movlb	0	; () banked
  4000  0001C6  6F7B               	movwf	_update& (0+255),b	;volatile
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;CANMain.c: 199: RXB0CONbits.RXFUL = 0;
  4004  0001C8  9E60               	bcf	3936,7,c	;volatile
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;CANMain.c: 200: PIR5bits.RXB0IF = 0;
  4008  0001CA  9077               	bcf	3959,0,c	;volatile
  4009  0001CC                     i2l362:
  4010  0001CC  C01A  FFF5         	movff	??_HighISR+16,tablat
  4011  0001D0  C019  FFF8         	movff	??_HighISR+15,tblptru
  4012  0001D4  C018  FFF7         	movff	??_HighISR+14,tblptrh
  4013  0001D8  C017  FFF6         	movff	??_HighISR+13,tblptrl
  4014  0001DC  C016  FFF4         	movff	??_HighISR+12,prodh
  4015  0001E0  C015  FFF3         	movff	??_HighISR+11,prodl
  4016  0001E4  C014  FFDA         	movff	??_HighISR+10,fsr2h
  4017  0001E8  C013  FFD9         	movff	??_HighISR+9,fsr2l
  4018  0001EC  C012  FFE2         	movff	??_HighISR+8,fsr1h
  4019  0001F0  C011  FFE1         	movff	??_HighISR+7,fsr1l
  4020  0001F4  C010  FFEA         	movff	??_HighISR+6,fsr0h
  4021  0001F8  C00F  FFE9         	movff	??_HighISR+5,fsr0l
  4022  0001FC  C00E  FFFB         	movff	??_HighISR+4,pclatu
  4023  000200  C00D  FFFA         	movff	??_HighISR+3,pclath
  4024  000204  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4025  000206  0011               	retfie		f
  4026  000208                     __end_of_HighISR:
  4027                           	opt stack 0
  4028                           pclatu	equ	0xFFB
  4029                           pclath	equ	0xFFA
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           intcon2	equ	0xFF1
  4038                           postinc0	equ	0xFEE
  4039                           fsr0h	equ	0xFEA
  4040                           fsr0l	equ	0xFE9
  4041                           wreg	equ	0xFE8
  4042                           indf1	equ	0xFE7
  4043                           postdec1	equ	0xFE5
  4044                           fsr1h	equ	0xFE2
  4045                           fsr1l	equ	0xFE1
  4046                           indf2	equ	0xFDF
  4047                           postinc2	equ	0xFDE
  4048                           postdec2	equ	0xFDD
  4049                           fsr2h	equ	0xFDA
  4050                           fsr2l	equ	0xFD9
  4051                           status	equ	0xFD8
  4052                           
  4053 ;; *************** function i2___lwmod *****************
  4054 ;; Defined at:
  4055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  dividend        2    0[COMRAM] unsigned int 
  4058 ;;  divisor         2    2[COMRAM] unsigned int 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  __lwmod         1    4[COMRAM] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  2    0[COMRAM] unsigned int 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4071 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4073 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4074 ;;Total ram usage:        5 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_HighISR
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text24
  4084  0017E4                     __ptext24:
  4085                           	opt stack 0
  4086  0017E4                     i2___lwmod:
  4087                           	opt stack 24
  4088                           
  4089                           ;incstack = 0
  4090  0017E4  5003               	movf	i2___lwmod@divisor,w,c
  4091  0017E6  1004               	iorwf	i2___lwmod@divisor+1,w,c
  4092  0017E8  B4D8               	btfsc	status,2,c
  4093  0017EA  D018               	goto	i2l847
  4094  0017EC  0E01               	movlw	1
  4095  0017EE  6E05               	movwf	i2___lwmod@counter,c
  4096  0017F0  D004               	goto	i2l2206
  4097  0017F2                     i2l2204:
  4098  0017F2  90D8               	bcf	status,0,c
  4099  0017F4  3603               	rlcf	i2___lwmod@divisor,f,c
  4100  0017F6  3604               	rlcf	i2___lwmod@divisor+1,f,c
  4101  0017F8  2A05               	incf	i2___lwmod@counter,f,c
  4102  0017FA                     i2l2206:
  4103  0017FA  AE04               	btfss	i2___lwmod@divisor+1,7,c
  4104  0017FC  D7FA               	goto	i2l2204
  4105  0017FE                     i2l2208:
  4106  0017FE  5003               	movf	i2___lwmod@divisor,w,c
  4107  001800  5C01               	subwf	i2___lwmod@dividend,w,c
  4108  001802  5004               	movf	i2___lwmod@divisor+1,w,c
  4109  001804  5802               	subwfb	i2___lwmod@dividend+1,w,c
  4110  001806  A0D8               	btfss	status,0,c
  4111  001808  D004               	goto	i2l2212
  4112  00180A  5003               	movf	i2___lwmod@divisor,w,c
  4113  00180C  5E01               	subwf	i2___lwmod@dividend,f,c
  4114  00180E  5004               	movf	i2___lwmod@divisor+1,w,c
  4115  001810  5A02               	subwfb	i2___lwmod@dividend+1,f,c
  4116  001812                     i2l2212:
  4117  001812  90D8               	bcf	status,0,c
  4118  001814  3204               	rrcf	i2___lwmod@divisor+1,f,c
  4119  001816  3203               	rrcf	i2___lwmod@divisor,f,c
  4120  001818  2E05               	decfsz	i2___lwmod@counter,f,c
  4121  00181A  D7F1               	goto	i2l2208
  4122  00181C                     i2l847:
  4123  00181C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
  4124  001820  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4125  001824  0012               	return		;funcret
  4126  001826                     __end_ofi2___lwmod:
  4127                           	opt stack 0
  4128                           pclatu	equ	0xFFB
  4129                           pclath	equ	0xFFA
  4130                           tblptru	equ	0xFF8
  4131                           tblptrh	equ	0xFF7
  4132                           tblptrl	equ	0xFF6
  4133                           tablat	equ	0xFF5
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           intcon2	equ	0xFF1
  4138                           postinc0	equ	0xFEE
  4139                           fsr0h	equ	0xFEA
  4140                           fsr0l	equ	0xFE9
  4141                           wreg	equ	0xFE8
  4142                           indf1	equ	0xFE7
  4143                           postdec1	equ	0xFE5
  4144                           fsr1h	equ	0xFE2
  4145                           fsr1l	equ	0xFE1
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function i2_WriteCANMsg *****************
  4154 ;; Defined at:
  4155 ;;		line 124 in file "../CANMain.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  msgID           2    0[COMRAM] int 
  4158 ;;  data            2    2[COMRAM] PTR void 
  4159 ;;		 -> msgCount(2), main@msg(2), 
  4160 ;;  dataLen         1    4[COMRAM] unsigned char 
  4161 ;;  priority        1    5[COMRAM] unsigned char 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  WriteCANMsg     1    8[COMRAM] unsigned char 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      unsigned char 
  4166 ;; Registers used:
  4167 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4173 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4175 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4176 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4177 ;;Total ram usage:        9 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_HighISR
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text25
  4187  00154C                     __ptext25:
  4188                           	opt stack 0
  4189  00154C                     i2_WriteCANMsg:
  4190                           	opt stack 24
  4191                           
  4192                           ;CANMain.c: 125: char i;
  4193                           ;CANMain.c: 126: if (TXB0CONbits.TXREQ == 0) {
  4194                           
  4195                           ;incstack = 0
  4196  00154C  010F               	movlb	15	; () banked
  4197  00154E  B720               	btfsc	32,3,b	;volatile
  4198  001550  0012               	return	
  4199                           
  4200                           ; BSR set to: 15
  4201                           ;CANMain.c: 127: TXB0CONbits.TXPRI = priority;
  4202  001552  010F               	movlb	15	; () banked
  4203  001554  5120               	movf	32,w,b	;volatile
  4204  001556  1806               	xorwf	i2WriteCANMsg@priority,w,c
  4205  001558  0BFC               	andlw	-4
  4206  00155A  1806               	xorwf	i2WriteCANMsg@priority,w,c
  4207  00155C  010F               	movlb	15	; () banked
  4208  00155E  6F20               	movwf	32,b	;volatile
  4209                           
  4210                           ;CANMain.c: 128: TXB0SIDH = msgID >> 3;
  4211  001560  C001  F007         	movff	i2WriteCANMsg@msgID,??i2_WriteCANMsg
  4212  001564  C002  F008         	movff	i2WriteCANMsg@msgID+1,??i2_WriteCANMsg+1
  4213  001568  3408               	rlcf	??i2_WriteCANMsg+1,w,c
  4214  00156A  3208               	rrcf	??i2_WriteCANMsg+1,f,c
  4215  00156C  3207               	rrcf	??i2_WriteCANMsg,f,c
  4216  00156E  3408               	rlcf	??i2_WriteCANMsg+1,w,c
  4217  001570  3208               	rrcf	??i2_WriteCANMsg+1,f,c
  4218  001572  3207               	rrcf	??i2_WriteCANMsg,f,c
  4219  001574  3408               	rlcf	??i2_WriteCANMsg+1,w,c
  4220  001576  3208               	rrcf	??i2_WriteCANMsg+1,f,c
  4221  001578  3207               	rrcf	??i2_WriteCANMsg,f,c
  4222  00157A  5007               	movf	??i2_WriteCANMsg,w,c
  4223  00157C  010F               	movlb	15	; () banked
  4224  00157E  6F21               	movwf	33,b	;volatile
  4225                           
  4226                           ;CANMain.c: 129: TXB0SIDLbits.SID = (msgID & 0b111);
  4227  001580  C001  F007         	movff	i2WriteCANMsg@msgID,??i2_WriteCANMsg
  4228  001584  0E07               	movlw	7
  4229  001586  1607               	andwf	??i2_WriteCANMsg,f,c
  4230  001588  3A07               	swapf	??i2_WriteCANMsg,f,c
  4231  00158A  4607               	rlncf	??i2_WriteCANMsg,f,c
  4232  00158C  010F               	movlb	15	; () banked
  4233  00158E  5122               	movf	34,w,b	;volatile
  4234  001590  1807               	xorwf	??i2_WriteCANMsg,w,c
  4235  001592  0B1F               	andlw	-225
  4236  001594  1807               	xorwf	??i2_WriteCANMsg,w,c
  4237  001596  010F               	movlb	15	; () banked
  4238  001598  6F22               	movwf	34,b	;volatile
  4239                           
  4240                           ; BSR set to: 15
  4241                           ;CANMain.c: 130: TXB0SIDLbits.EXIDE = 0;
  4242  00159A  010F               	movlb	15	; () banked
  4243  00159C  9722               	bcf	34,3,b	;volatile
  4244                           
  4245                           ;CANMain.c: 131: TXB0DLC = dataLen & 0b1111;
  4246  00159E  5005               	movf	i2WriteCANMsg@dataLen,w,c
  4247  0015A0  0B0F               	andlw	15
  4248  0015A2  010F               	movlb	15	; () banked
  4249  0015A4  6F25               	movwf	37,b	;volatile
  4250                           
  4251                           ; BSR set to: 15
  4252                           ;CANMain.c: 132: for (i = 0; i < dataLen; ++i) {
  4253  0015A6  0E00               	movlw	0
  4254  0015A8  6E09               	movwf	i2WriteCANMsg@i,c
  4255  0015AA  D013               	goto	i2l2198
  4256  0015AC                     i2l2194:
  4257                           
  4258                           ;CANMain.c: 133: ((unsigned char*) &TXB0D0)[i] = ((unsigned char *) data)[i];
  4259  0015AC  5009               	movf	i2WriteCANMsg@i,w,c
  4260  0015AE  0D01               	mullw	1
  4261  0015B0  50F3               	movf	prodl,w,c
  4262  0015B2  2403               	addwf	i2WriteCANMsg@data,w,c
  4263  0015B4  6ED9               	movwf	fsr2l,c
  4264  0015B6  50F4               	movf	prodh,w,c
  4265  0015B8  2004               	addwfc	i2WriteCANMsg@data+1,w,c
  4266  0015BA  6EDA               	movwf	fsr2h,c
  4267  0015BC  5009               	movf	i2WriteCANMsg@i,w,c
  4268  0015BE  0D01               	mullw	1
  4269  0015C0  0E26               	movlw	38
  4270  0015C2  24F3               	addwf	prodl,w,c
  4271  0015C4  6EE1               	movwf	fsr1l,c
  4272  0015C6  0E0F               	movlw	15
  4273  0015C8  20F4               	addwfc	prodh,w,c
  4274  0015CA  6EE2               	movwf	fsr1h,c
  4275  0015CC  CFDF FFE7          	movff	indf2,indf1
  4276  0015D0  2A09               	incf	i2WriteCANMsg@i,f,c
  4277  0015D2                     i2l2198:
  4278  0015D2  5005               	movf	i2WriteCANMsg@dataLen,w,c
  4279  0015D4  5C09               	subwf	i2WriteCANMsg@i,w,c
  4280  0015D6  A0D8               	btfss	status,0,c
  4281  0015D8  D7E9               	goto	i2l2194
  4282                           
  4283                           ;CANMain.c: 134: }
  4284                           ;CANMain.c: 135: TXB0CONbits.TXREQ = 1;
  4285  0015DA  010F               	movlb	15	; () banked
  4286  0015DC  8720               	bsf	32,3,b	;volatile
  4287                           
  4288                           ;CANMain.c: 136: return 1;
  4289                           ;	Return value of i2_WriteCANMsg is never used
  4290  0015DE  0012               	return	
  4291  0015E0                     __end_ofi2_WriteCANMsg:
  4292                           	opt stack 0
  4293                           pclatu	equ	0xFFB
  4294                           pclath	equ	0xFFA
  4295                           tblptru	equ	0xFF8
  4296                           tblptrh	equ	0xFF7
  4297                           tblptrl	equ	0xFF6
  4298                           tablat	equ	0xFF5
  4299                           prodh	equ	0xFF4
  4300                           prodl	equ	0xFF3
  4301                           intcon	equ	0xFF2
  4302                           intcon2	equ	0xFF1
  4303                           postinc0	equ	0xFEE
  4304                           fsr0h	equ	0xFEA
  4305                           fsr0l	equ	0xFE9
  4306                           wreg	equ	0xFE8
  4307                           indf1	equ	0xFE7
  4308                           postdec1	equ	0xFE5
  4309                           fsr1h	equ	0xFE2
  4310                           fsr1l	equ	0xFE1
  4311                           indf2	equ	0xFDF
  4312                           postinc2	equ	0xFDE
  4313                           postdec2	equ	0xFDD
  4314                           fsr2h	equ	0xFDA
  4315                           fsr2l	equ	0xFD9
  4316                           status	equ	0xFD8
  4317                           pclatu	equ	0xFFB
  4318                           pclath	equ	0xFFA
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           intcon2	equ	0xFF1
  4327                           postinc0	equ	0xFEE
  4328                           fsr0h	equ	0xFEA
  4329                           fsr0l	equ	0xFE9
  4330                           wreg	equ	0xFE8
  4331                           indf1	equ	0xFE7
  4332                           postdec1	equ	0xFE5
  4333                           fsr1h	equ	0xFE2
  4334                           fsr1l	equ	0xFE1
  4335                           indf2	equ	0xFDF
  4336                           postinc2	equ	0xFDE
  4337                           postdec2	equ	0xFDD
  4338                           fsr2h	equ	0xFDA
  4339                           fsr2l	equ	0xFD9
  4340                           status	equ	0xFD8
  4341                           
  4342                           	psect	rparam
  4343  0000                     pclatu	equ	0xFFB
  4344                           pclath	equ	0xFFA
  4345                           tblptru	equ	0xFF8
  4346                           tblptrh	equ	0xFF7
  4347                           tblptrl	equ	0xFF6
  4348                           tablat	equ	0xFF5
  4349                           prodh	equ	0xFF4
  4350                           prodl	equ	0xFF3
  4351                           intcon	equ	0xFF2
  4352                           intcon2	equ	0xFF1
  4353                           postinc0	equ	0xFEE
  4354                           fsr0h	equ	0xFEA
  4355                           fsr0l	equ	0xFE9
  4356                           wreg	equ	0xFE8
  4357                           indf1	equ	0xFE7
  4358                           postdec1	equ	0xFE5
  4359                           fsr1h	equ	0xFE2
  4360                           fsr1l	equ	0xFE1
  4361                           indf2	equ	0xFDF
  4362                           postinc2	equ	0xFDE
  4363                           postdec2	equ	0xFDD
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368                           	psect	temp
  4369  000043                     btemp:
  4370                           	opt stack 0
  4371  000043                     	ds	1
  4372  0000                     int$flags	set	btemp
  4373                           pclatu	equ	0xFFB
  4374                           pclath	equ	0xFFA
  4375                           tblptru	equ	0xFF8
  4376                           tblptrh	equ	0xFF7
  4377                           tblptrl	equ	0xFF6
  4378                           tablat	equ	0xFF5
  4379                           prodh	equ	0xFF4
  4380                           prodl	equ	0xFF3
  4381                           intcon	equ	0xFF2
  4382                           intcon2	equ	0xFF1
  4383                           postinc0	equ	0xFEE
  4384                           fsr0h	equ	0xFEA
  4385                           fsr0l	equ	0xFE9
  4386                           wreg	equ	0xFE8
  4387                           indf1	equ	0xFE7
  4388                           postdec1	equ	0xFE5
  4389                           fsr1h	equ	0xFE2
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           postdec2	equ	0xFDD
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8


Data Sizes:
    Strings     33
    Constant    18
    Data        17
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      66
    BANK0           160      6      34
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 17
		 -> lcdStr(BANK0[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    WriteCANMsg@data	PTR void  size(2) Largest target is 2
		 -> msgCount(COMRAM[2]), main@msg(BANK0[2]), 

    LCDWriteLine@str	PTR const unsigned char  size(2) Largest target is 17
		 -> lcdStr(BANK0[17]), LCDScroll@str(COMRAM[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDWriteLine->_LCDSetPos
    _LCDInit->_LCDInitCommand
    _LCDInitPort->_WriteRegister
    _LCDInitCommand->_LCDWriteByte
    _LCDClearLine->_LCDSetPos
    _LCDWriteData->_LCDWriteByte
    _LCDSetPos->_LCDCommand
    _LCDCommand->_LCDWriteByte
    _LCDWriteByte->_WriteRegister

Critical Paths under _HighISR in COMRAM

    _HighISR->i2_WriteCANMsg

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HighISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   10283
                                              0 BANK0      6     6      0
                          _ConfigCAN
                         _ConfigPins
                       _ConfigSystem
                       _LCDClearLine
                            _LCDInit
                       _LCDWriteLine
                        _WriteCANMsg
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    23      8    2421
                                             40 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             28 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     363
                                             35 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             28 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _WriteCANMsg                                          9     3      6     912
                                             28 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _LCDWriteLine                                         4     1      3    3106
                                             41 COMRAM     4     1      3
                          _LCDSetPos
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0    1333
                                             34 COMRAM     2     2      0
                     _LCDInitCommand
                        _LCDInitPort
 ---------------------------------------------------------------------------------
 (2) _LCDInitPort                                          0     0      0     492
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (2) _LCDInitCommand                                       1     1      0     818
                                             33 COMRAM     1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDClearLine                                         2     2      0    2461
                                             41 COMRAM     2     2      0
                          _LCDSetPos
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (2) _LCDWriteData                                         1     1      0     818
                                             33 COMRAM     1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (2) _LCDSetPos                                            7     3      4    1575
                                             34 COMRAM     7     3      4
                         _LCDCommand
                      _calculateBase
 ---------------------------------------------------------------------------------
 (3) _calculateBase                                        2     2      0      90
                                             28 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCDCommand                                           1     1      0     818
                                             33 COMRAM     1     1      0
                       _LCDWriteByte
                         _shortDelay
                               _wait
 ---------------------------------------------------------------------------------
 (3) _wait                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _shortDelay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCDWriteByte                                         3     2      1     796
                                             30 COMRAM     3     2      1
                      _WriteRegister
 ---------------------------------------------------------------------------------
 (4) _WriteRegister                                        2     1      1     492
                                             28 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ConfigSystem                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigPins                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigCAN                                            3     3      0       0
                                             28 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                             19    19      0     791
                                              9 COMRAM    19    19      0
                      i2_WriteCANMsg
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (7) i2_WriteCANMsg                                        9     3      6     512
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigCAN
   _ConfigPins
   _ConfigSystem
   _LCDClearLine
     _LCDSetPos
       _LCDCommand
         _LCDWriteByte
           _WriteRegister
         _shortDelay
         _wait
       _calculateBase
     _LCDWriteData
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
   _LCDInit
     _LCDInitCommand
       _LCDWriteByte
         _WriteRegister
     _LCDInitPort
       _WriteRegister
   _LCDWriteLine
     _LCDSetPos
       _LCDCommand
         _LCDWriteByte
           _WriteRegister
         _shortDelay
         _wait
       _calculateBase
     _LCDWriteData
       _LCDWriteByte
         _WriteRegister
       _shortDelay
       _wait
   _WriteCANMsg
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _HighISR (ROOT)
   i2_WriteCANMsg
   i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6      22       5       21.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      42       1       70.2%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64       6        0.0%
DATA                 0      0      64       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Mar 15 18:51:15 2017

           ?_LCDInitPort 0001              _SSPSTATbits 000FC7                       l85 175E  
                     _id 0079      ___wmul@multiplicand 001F                      l172 1906  
                    l166 18F2                      l169 18FC                      l392 102C  
                    l837 1710                      l847 17DA                      _len 0040  
          LCDClearLine@c 002A                      prod 000FF3          ?_LCDInitCommand 0001  
                    wreg 000FE8   __size_ofi2_WriteCANMsg 0094           ??_LCDClearLine 002A  
        __end_of_LCDInit 16C8                     l2112 10FE                     l2104 10D4  
                   l2040 0F6E                     l2018 13B4                     l2106 10E4  
                   l2034 0F5A                     l2116 1122                     l2036 0F68  
                   l2028 0F40                     l2150 11B2                     l2142 1190  
                   l2126 114A                     l2134 116A                     l2118 112A  
                   l2070 105A                     l2054 0FFA                     l2046 0F9C  
                   l2152 11F6                     l2160 124C                     l2136 1172  
                   l2090 10A8                     l2074 1074                     l2058 0FFE  
                   l2180 1518                     l2164 125C                     l2148 11AC  
                   l2076 1078                     l2158 123C                     l2166 1264  
                   l2350 1410                     l2184 153E                     l2088 10A4  
                   l2168 127C                     l2362 1466                     l1820 1742  
                   l1920 163A                     l1832 194A                     l1818 1732  
                   l1922 164E                     l1906 15E8                     l1850 16E6  
                   l1764 1836                     l1940 188C                     l1924 165C  
                   l1916 161A                     l1908 15FC                     l1860 1706  
                   l1852 16EA                     l1934 1870                     l1926 1660  
                   l1870 17B8                     l1784 1962                     l1936 1884  
                   l1848 16DE                     l1872 17BC                     l1786 196C  
                   l1876 17D0                     l1868 17B0                     l1984 1296  
                   STR_1 0F24                     STR_2 0F13                     _LATD 000F8C  
                   u1550 1488                     u1647 167E                     u1657 168E  
                   u1667 169C                     u1677 16AE                     u1687 16C0  
                   u1697 19CA                     _data 0071                     _main 13CC  
                   _wait 19D2                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr0l 000FE9                     fsr2h 000FDA                     indf1 000FE7  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   btemp 0043                     pclat 000FFA       __size_of_LCDSetPos 0046  
                   prodh 000FF4                     prodl 000FF3                     start 0208  
          __CFG_FOSC$HS1 000000          __end_of_HighISR 0208             ___param_bank 000010  
          ?_LCDWriteData 0001            ?_LCDWriteByte 001F            ?_LCDWriteLine 002A  
                  ?_main 0001                    _ADRES 000FC3                    ?_wait 0001  
        __end_of___lwdiv 171A          __end_of___lwmod 17E4                    i2l362 01CC  
                  i2l348 013E                    i2l847 181C               _ConfigPins 19BC  
                  _TRISB 000F93                    _TRISD 000F95                    _SSPIF 007CF3  
 __size_of_WriteRegister 0026      __size_of_LCDCommand 0016          __end_of_dpowers 0F0B  
        __end_of_isdigit 1952                    tablat 000FF5                    status 000FD8  
  i2WriteCANMsg@priority 0006          __end_of_sprintf 128A       __size_ofi2___lwmod 0042  
          i2_WriteCANMsg 154C          __initialization 1760             LCDSetPos@col 0025  
     i2WriteCANMsg@msgID 0001       WriteCANMsg@dataLen 0021             LCDSetPos@pos 0028  
           LCDSetPos@row 0023             __end_of_main 14B8             __end_of_wait 19D4  
         ??_LCDWriteData 0022           ??_LCDWriteByte 0020           ??_LCDWriteLine 002D  
   __end_of_ConfigSystem 1934                   ??_main 003F                   ??_wait 001D  
          __activetblptr 000002           __CFG_PLLCFG$ON 000000        __end_of_LCDSetPos 1760  
              ??_LCDInit 0023       __size_of_ConfigCAN 0142                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _ANCON0 000F5D                   _ANCON1 000F5C  
                 i2l2212 1812                   i2l2204 17F2                   i2l2206 17FA  
                 i2l2208 17FE                   i2l2412 01A8                   i2l2408 0188  
                 i2l2194 15AC                   i2l2198 15D2                   i2l2390 00F4  
         __CFG_WDTEN$OFF 000000                   i2l2384 00B8                   i2l2392 0118  
                 i2l2386 00D6                   i2l2394 011C                   _RXB0D0 000F66  
              ??_HighISR 000A                   _TXB0D0 000F26                   _SSPBUF 000FC9  
         ?i2_WriteCANMsg 0001            _WriteRegister 18EA           __CFG_XINST$OFF 000000  
   __end_of_LCDClearLine 1894                   ___wmul 18C4                ??___lwdiv 0021  
                 _lcdStr 0060                ??___lwmod 0028                   clear_0 1766  
   __size_of_LCDInitPort 0030         LCDClearLine@line 002B                   _update 007B  
            ?_ConfigPins 0001                ??_isdigit 001D             __mediumconst 0000  
      __end_ofi2___lwmod 1826                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8             WriteCANMsg@i 0025                ??_sprintf 0031  
             __accesstop 0060  __end_of__initialization 1794           ?_WriteRegister 001D  
          ___rparam_used 000001             ??_LCDCommand 0022        __end_of_ConfigCAN 13CC  
       WriteRegister@reg 001E       i2___lwmod@dividend 0001           __pcstackCOMRAM 0001  
           __pidataBANK0 199C         ??_LCDInitCommand 0022       __end_of_LCDCommand 199C  
           sprintf@width 003C            _buttonPressed 003F     __end_of_LCDWriteData 1986  
             __pbssBANK0 0071     __end_of_LCDWriteByte 1862     __end_of_LCDWriteLine 1670  
         WriteRegister@b 001D          ??i2_WriteCANMsg 0007      WriteCANMsg@priority 0022  
          ??_WriteCANMsg 0023    __size_of_ConfigSystem 0024      __size_of_ConfigPins 000C  
  LCDInitCommand@command 0022                  ?___wmul 001D   __size_of_calculateBase 001E  
                _LCDInit 1670         __CFG_CANMX$PORTB 000000                  _RXB0DLC 000F65  
                _TXB0DLC 000F25                  _SSPCON1 000FC6             _ConfigSystem 1910  
        ??_WriteRegister 001E                  _HighISR 0008       LCDInit@functionSet 0024  
  __size_of_LCDClearLine 0032                  __Hparam 0000                  __Lparam 0000  
    __end_of_WriteCANMsg 154C          __size_of___wmul 0026                  ___lwdiv 16C8  
                ___lwmod 17A2             __psmallconst 0F00                  __pcinit 1760  
                __ramtop 0F00                  __ptext0 13CC                  __ptext1 0F36  
                __ptext2 1934                  __ptext3 18C4                  __ptext4 17A2  
                __ptext5 16C8                  __ptext6 14B8                  __ptext7 15E0  
                __ptext8 1670                  __ptext9 1894        __end_of_hexpowers 0F13  
                _dpowers 0F01                  _isdigit 1934                _LCDSetPos 171A  
           _LCDClearLine 1862                  _sprintf 0F36                  main@msg 0080  
   end_of_initialization 1794           i2WriteCANMsg@i 0009            __Lmediumconst 0000  
          LCDWriteData@c 0022            _calculateBase 1952            LCDWriteByte@c 0020  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE               _shortDelay 19C8             ??_ConfigPins 001D  
  __size_of_LCDWriteData 0016    __size_of_LCDWriteByte 003C    __size_of_LCDWriteLine 0090  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
             ?_LCDSetPos 0023                i2___lwmod 17E4           ?_calculateBase 0001  
            _WriteCANMsg 14B8       __end_of_ConfigPins 19C8     i2WriteCANMsg@dataLen 0005  
          ??_LCDInitPort 001F                _ConfigCAN 128A           __end_of___wmul 18EA  
           _LCDWriteData 1970             _LCDWriteByte 1826             _LCDWriteLine 15E0  
            _ECANCONbits 000F72      start_initialization 1760        i2WriteCANMsg@data 0003  
             ?i2___lwmod 0001              _CANSTATbits 000F6E                 ??___wmul 0021  
             ?_ConfigCAN 0001              __pdataBANK0 0060              ?_shortDelay 0001  
    __end_of_LCDInitPort 18C4                 ?_LCDInit 0001              __pbssCOMRAM 003F  
          __pcstackBANK0 007C              _BRGCON1bits 000E43              _BRGCON2bits 000E44  
            _BRGCON3bits 000E45        i2___lwmod@divisor 0003              ??_LCDSetPos 0027  
      i2___lwmod@counter 0005             _isdigit$2572 001E          ??_calculateBase 001D  
               ?_HighISR 0001              sprintf@flag 003B              sprintf@prec 0038  
  __end_ofi2_WriteCANMsg 15E0         ___lwdiv@dividend 001D                __pintcode 0008  
               ?___lwdiv 001D                 ?___lwmod 0024         LCDWriteLine@line 002C  
            __smallconst 0F00        LCDCommand@command 0022                 ?_isdigit 0001  
              _hexpowers 0F0B         ___lwdiv@quotient 0021  __size_of_LCDInitCommand 000E  
               ?_sprintf 0029              ??i2___lwmod 0005           ___wmul@product 0021  
               _LATAbits 000F89                 _LATDbits 000F8C      __size_of_shortDelay 000A  
  __end_of_WriteRegister 1910                 _PIE5bits 000F76                 i2u160_40 0124  
               i2u160_46 0126                 i2u162_45 016A                 i2u170_47 004C  
               i2u158_40 0066                 i2u158_46 0068                 HighISR@i 001B  
               _PIR5bits 000F77                 _RCONbits 000FD0                 _RXB0SIDH 000F61  
               _RXB0SIDL 000F62                 _RXF0SIDH 000EE0                 _RXF1SIDH 000EE4  
               _RXF2SIDH 000EE8              _LCDInitPort 1894                 _RXF3SIDH 000EEC  
               _RXF4SIDH 000EF0                 _RXF5SIDH 000EF4                 _TXB0SIDH 000F21  
               _RXM0SIDH 000EF8              ??_ConfigCAN 001D                 _RXM1SIDH 000EFC  
             _ADCON0bits 000FC2        ___wmul@multiplier 001D         __size_of_LCDInit 0058  
            _INTCON2bits 000FF1                copy_data0 1788               _CANCONbits 000F6F  
       WriteCANMsg@msgID 001D         __size_of_HighISR 0200             ?_WriteCANMsg 001D  
               __Hrparam 0000     LCDWriteByte@comFlags 0021                 __Lrparam 0000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042               sprintf@idx 0035  
             sprintf@val 0039             _RXF0SIDLbits 000EE1         __size_of_isdigit 001E  
        ___lwdiv@divisor 001F             _RXF1SIDLbits 000EE5          ___lwdiv@counter 0023  
               __ptext10 19AE                 __ptext11 1862                 __ptext20 1910  
               __ptext12 1970                 __ptext21 19BC                 __ptext13 171A  
               __ptext22 128A                 __ptext14 1952                 __ptext15 1986  
               __ptext24 17E4                 __ptext16 19D2                 __ptext25 154C  
               __ptext17 19C8                 __ptext18 1826                 __ptext19 18EA  
           _RXF2SIDLbits 000EE9          LCDWriteLine@str 002A             _RXF3SIDLbits 000EED  
       __size_of_sprintf 0354             _RXF4SIDLbits 000EF1             _RXF5SIDLbits 000EF5  
          __size_of_main 00EC            __size_of_wait 0002                 _msgCount 0041  
           _TXB0SIDLbits 000F22               _LCDCommand 1986        calculateBase@base 001D  
      calculateBase@line 001E                 int$flags 0043                 main@time 007C  
           ??_shortDelay 001D             _RXM0SIDLbits 000EF9              _RXB0CONbits 000F60  
        WriteCANMsg@data 001F              _RXB1CONbits 000F30             _RXM1SIDLbits 000EFD  
            _OSCTUNEbits 000F9B               _INTCONbits 000FF2                 isdigit@c 001F  
         _LCDInitCommand 19AE            ?_ConfigSystem 0001                 intlevel2 0000  
              sprintf@ap 0036                sprintf@sp 0029         ___lwmod@dividend 0024  
         LCDWriteByte@rs 001F              _TXB0CONbits 000F20       __end_of_shortDelay 19D2  
               sprintf@c 003E                 sprintf@f 002B          ___lwmod@divisor 0026  
 __end_of_LCDInitCommand 19BC          ___lwmod@counter 0028            ?_LCDClearLine 0001  
         ??_ConfigSystem 001D    __end_of_calculateBase 1970              ?_LCDCommand 0001  
   __size_of_WriteCANMsg 0094  
