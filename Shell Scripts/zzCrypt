#!/bin/sh

# I'm just gonna write a quick script to do what I want it to do,
# with no regard for possible bugs or problems.
# I'm disrespecting all there is to disrespect about computer science.

# But in all seriousness, this is a very barebones, simple wrapper to
# tar and gpg to encrypt and store select data of mine.

# THIS SCRIPT REQUIRES THE USER TO HAVE A VALID GnuPG KEYPAIR, WHICH CAN BE CREATED WITH:
# gpg --full-generate-key
# PRIOR TO EXECUTING THIS SCRIPT.

# Had an ioctl error at some point in development. If this happens to you, then use this solution:
# https://github.com/keybase/keybase-issues/issues/2798
# https://unix.stackexchange.com/questions/257061/gentoo-linux-gpg-encrypts-properly-a-file-passed-through-parameter-but-throws-i/257065#257065
# https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
# export GPG_TTY=$(tty)

# Check for arguments
if [[ $# -eq 0 ]]; then
	echo "No arguments. Try \"zzCrypt help\""
	exit 1
fi

# Check for valid subcommands
if [[ $1 != "help" && $1 != "unlock" && $1 != "lock" && $1 != "peek" && $1 != "list" && $1 != "delete" && $1 != "repack" ]]; then
	echo "Unknown subcommand $1. Try \"zzCrypt help\""
fi

# Set variables
TEMPDIR="/tmp/zzCrypt/tempunpack"
if [[ -z $GPG_TTY ]]; then
	export GPG_TTY=$(tty)
fi

# Unlock command
if [[ $1 == "unlock" ]]; then
	# Decrypt and unarchive target file
	gpg -d $2 | tar -xz
	if [[ $? -eq 0 ]]; then
		rm $2; # No need for -r because it's a single archive file
	else
		# Do NOT remove target archive if gpg or tar failed.
		# If the archive gets deleted and the unlock failed... no more archive, and data is pretty much permanently lost
		echo "WARNING: UNSUCCESSFUL EXECUTION. CHECK YOUR FILES!"
		exit $?
	fi

	# Success
	exit 0
fi

# Lock command
if [[ $1 == "lock" ]]; then
	# Determine target archive name
	if [[ -z $5 ]]; then
		FILENAME="encrypted_archive.tar.gz.gpg"
	else
		FILENAME=$5
	fi

	# Check for existence of target archive file
	if [[ -f $FILENAME ]]; then
		echo "WARNING: $FILENAME ALREADY EXISTS. CHECK YOUR FILES!"
		exit 1
	fi

	# Archive and encrypt files to target archive file
	tar -cz $2 | gpg -se --cipher-algo $3 -r $4 -o $FILENAME
	if [[ $? -eq 0 ]]; then
		rm -rf $2; # Gotta make sure it gets deleted, even if it's a directory
	else
		echo "WARNING: UNSUCCESSFUL EXECUTION. CHECK YOUR FILES!"
		exit $?
	fi

	# This ensures the created file is only accessible by the creator (And root, of course)
	chmod 0600 $FILENAME

	# Success
	exit 0
fi

# Peek command
if [[ $1 == "peek" ]]; then
	# Make temporary working directory if it doesn't exist
	if [[ ! -d $TEMPDIR ]]; then
		mkdir -p $TEMPDIR
	fi

	# Temporarily decrypt and unarchive target archive
	gpg -d $2 | tar -xz --directory $TEMPDIR

	# List contents of all files that match the pattern in $3
	find $TEMPDIR -name $3 -exec cat {} \;

	# Remove temporary directory and all its contents
	rm -rf $TEMPDIR

	# Success
	exit 0
fi

# List command
if [[ $1 == "list" ]]; then
	# Decrypt and directly pipe its output to tar, which lists all of the archive's contents without unpacking it to the disk
	gpg -d $2 | tar -tzv

	# Success
	exit 0
fi

# Delete command
if [[ $1 == "delete" ]]; then
	# Check for valid arguments
	if [[ -z $2 || -z $3 || -z $4 ]]; then
		echo "WARNING: CHECK YOUR ARGUMENTS BEFORE YOU DELETE YOUR DATA ON ACCIDENT!"
		exit 1
	fi

	# Redefine TEMPDIR (MUST BE IN CURRENT WORKING DIRECTORY)
	TEMPDIR="./temp"

	# Make temporary working directory
	mkdir -p $TEMPDIR

	# Temporarily decrypt and unarchive target archive
	gpg -d $2 | tar -xz --directory $TEMPDIR

	# Print found files
	find $TEMPDIR -name $3

	# Get confirmation
	echo "PRESS ENTER TO DELETE THE LISTED FILES. Ctrl-C to cancel."
	read -s

	# Delete contents of all files found
	find $TEMPDIR -name $3 -exec rm -rf {} \;

	# Remove the existing archive to create the new one
	rm -rf $2

	# cd to TEMPDIR to preserve tar hierarchy
	cd $TEMPDIR

	# Repack and encrypt the archive
	tar -cz * | gpg -se --cipher-algo $4 -r $5 -o $2

	# Move new archive to original working directory
	mv $2 ..

	# cd back to original working directory
	cd ..

	# Remove temporary working directory files
	rm -rf $TEMPDIR

	# Success
	exit 0
fi

# Repack command TODO: This will add specified files to the target archive
if [[ $1 == "repack" ]]; then
	echo "TODO"

	# Success
	exit 0
fi

# Help command
if [[ $1 == "help" ]]; then
	if [[ $2 == "" ]]; then
		echo "Usage: zzCrypt <subcommand> <arguments>"
		echo "Subcommands:"
		echo "help"
		echo "lock"
		echo "unlock"
		echo "peek"
		echo "list, ls"
		echo "Use zzCrypt help <subcommand> to view more information about that subcommand."
	else
		if [[ $2 == "help" ]]; then # help
			echo "Usage: zzCrypt help <subcommand>"
			echo "No, I didn't make the command recursive, ya dummy."
		elif [[ $2 == "lock" ]]; then # lock
			echo "Usage: zzCrypt lock <files,directories> <gpg cipher> <gpg recipients> [output file name]"
			echo "Files and directories can include any combination of files and/or directories, but must be enclosed in quotes."
			echo "GPG cipher is any valid GPG cipher. AES256 is recommended."
			echo "GPG recipients is any GPG recipient whose public key is accessible on the system. This usually is a recipient's name or email address."
			echo "Output file name is optional, but can be named anything. The default name \"encrypted_archive.tar.gz.gpg\" is sufficient."
		elif [[ $2 == "unlock" ]]; then # unlock
			echo "Usage: zzCrypt unlock <target archive>"
			echo "Target archive is the target encrypted archive to attempt to decrypt."
		elif [[ $2 == "peek" ]]; then # peek
			echo "Usage: zzCrypt peek <target archive> <target file(s)>"
			echo "Target archive is the target encrypted archive to attempt to decrypt. The decrypted archive will not be stored anywhere on the system."
			echo "Target file uses the find command to find the target file, and the cat command to print its contents to stdout."
		elif [[ $2 == "list" || $2 == "ls" ]]; then # list
			echo "Usage: zzCrypt list <target archive>"
			echo "Target archive is the target encrypted archive to attempt to decrypt. The decrypted archive will not be stored anywhere on the system."
		else
			echo "Unknown subcommand \"$2\""
		fi
	fi

	# Success
	exit 0
fi
