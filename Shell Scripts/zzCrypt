#!/bin/sh

# I'm just gonna write a quick script to do what I want it to do,
# with no regard for possible bugs or problems.
# I'm disrespecting all there is to disrespect about computer science.

# But in all seriousness, this is a very barebones, simple wrapper to
# tar and gpg to encrypt and store select data of mine.

# THIS SCRIPT REQUIRES THE USER TO HAVE A VALID GnuPG KEYPAIR, WHICH CAN BE CREATED WITH:
# gpg --full-generate-key
# PRIOR TO EXECUTING THIS SCRIPT.

# Check for arguments
if [[ $# -eq 0 ]]; then
	echo "No arguments. Try \"zzCrypt help\""
	exit 1
fi

# Check for valid subcommands
if [[ $1 != "help" && $1 != "unlock" && $1 != "lock" && $1 != "peek" && $1 != "list" && $1 != "ls" ]]; then
	echo "Unknown subcommand $1. Try \"zzCrypt help\""
fi

# Unneeded variables set. Might remove later if I don't think of any reason to use them
SCRIPTPATH=$(dirname "$(readlink -f \"$0\")")
TARGET="$(pwd)/$2"

# Unlock command
if [[ $1 == "unlock" ]]; then
	gpg -d $2 | tar -xz
	if [[ $? -eq 0 ]]; then
		rm $2; # No need for -r because it's a single archive file
	else
		# Do NOT remove target archive if gpg or tar failed.
		# If the archive gets deleted and the unlock failed... no more archive, and data is pretty much permanently lost
		echo "WARNING: UNSUCCESSFUL EXECUTION. CHECK YOUR FILES!"
	fi

	exit 0
fi

# Lock command
if [[ $1 == "lock" ]]; then
	if [[ -z $5 ]]; then
		FILENAME="encrypted_archive.tar.gz.gpg"
	else
		FILENAME=$5
	fi
	tar -cz $2 | gpg -se --cipher-algo $3 -r $4 -o $FILENAME
	if [[ $? -eq 0 ]]; then
		rm -r $2; # Gotta make sure it gets deleted, even if it's a directory
	else
		echo "WARNING: UNSUCCESSFUL EXECUTION. CHECK YOUR FILES!"
	fi

	# This ensures the created file is only accessible by the creator (And root, of course)
	chmod 0600 $FILENAME

	exit 0
fi

# Peek command
if [[ $1 == "peek" ]]; then
	TEMPDIR=/tmp/zzCrypt/tempunpack

	if [[ ! -d $TEMPDIR ]]; then
		mkdir -p $TEMPDIR
	fi
	
	gpg -d $2 | tar -xz --directory $TEMPDIR

	find $TEMPDIR -name $3 -exec cat {} \;

	rm -r $TEMPDIR
	
	exit 0
fi

# List command
if [[ $1 == "list" || $1 == "ls" ]]; then
	gpg -d $2 | tar -tzv

	exit 0
fi

# Delete command TODO
if [[ $1 == "delete" ]]; then
	echo "TODO"
fi

# Help command
if [[ $1 == "help" ]]; then
	if [[ $2 == "" ]]; then
		echo "Usage: zzCrypt <subcommand> <arguments>"
		echo "Subcommands:"
		echo "help"
		echo "lock"
		echo "unlock"
		echo "peek"
		echo "list, ls"
		echo "Use zzCrypt help <subcommand> to view more information about that subcommand."
	else
		if [[ $2 == "help" ]]; then # help
			echo "Usage: zzCrypt help <subcommand>"
			echo "No, I didn't make the command recursive, ya dummy."
		elif [[ $2 == "lock" ]]; then # lock
			echo "Usage: zzCrypt lock <files,directories> <gpg cipher> <gpg recipients> [output file name]"
			echo "Files and directories can include any combination of files and/or directories, but must be enclosed in quotes."
			echo "GPG cipher is any valid GPG cipher. AES256 is recommended."
			echo "GPG recipients is any GPG recipient whose public key is accessible on the system. This usually is a recipient's name or email address."
			echo "Output file name is optional, but can be named anything. The default name \"encrypted_archive.tar.gz.gpg\" is sufficient."
		elif [[ $2 == "unlock" ]]; then # unlock
			echo "Usage: zzCrypt unlock <target archive>"
			echo "Target archive is the target encrypted archive to attempt to decrypt."
		elif [[ $2 == "peek" ]]; then # peek
			echo "Usage: zzCrypt peek <target archive> <target file(s)>"
			echo "Target archive is the target encrypted archive to attempt to decrypt. The decrypted archive will not be stored anywhere on the system."
			echo "Target file uses the find command to find the target file, and the cat command to print its contents to stdout."
		elif [[ $2 == "list" || $2 == "ls" ]]; then # list
			echo "Usage: zzCrypt list <target archive>"
			echo "Target archive is the target encrypted archive to attempt to decrypt. The decrypted archive will not be stored anywhere on the system."
		else
			echo "Unknown subcommand \"$2\""
		fi
	fi
fi
